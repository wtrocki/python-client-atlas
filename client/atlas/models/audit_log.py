# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class AuditLog(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    audit_authorization_success: StrictBool = Field(..., alias="auditAuthorizationSuccess", description="Flag that indicates whether someone set auditing to track successful authentications. This only applies to the `\"atype\" : \"authCheck\"` audit filter. Setting this parameter to `true` degrades cluster performance.")
    audit_filter: StrictStr = Field(..., alias="auditFilter", description="JSON document that specifies which events to record. Escape any characters that may prevent parsing, such as single or double quotes, using a backslash (`\\`).")
    configuration_type: Optional[StrictStr] = Field(None, alias="configurationType", description="Human-readable label that displays how to configure the audit filter.")
    enabled: StrictBool = Field(..., description="Flag that indicates whether someone enabled database auditing for the specified project.")
    __properties = ["auditAuthorizationSuccess", "auditFilter", "configurationType", "enabled"]

    @validator('configuration_type')
    def configuration_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NONE', 'FILTER_BUILDER', 'FILTER_JSON'):
            raise ValueError("must validate the enum values ('NONE', 'FILTER_BUILDER', 'FILTER_JSON')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuditLog:
        """Create an instance of AuditLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "configuration_type",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuditLog:
        """Create an instance of AuditLog from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AuditLog.parse_obj(obj)

        _obj = AuditLog.parse_obj({
            "audit_authorization_success": obj.get("auditAuthorizationSuccess") if obj.get("auditAuthorizationSuccess") is not None else False,
            "audit_filter": obj.get("auditFilter"),
            "configuration_type": obj.get("configurationType"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False
        })
        return _obj

