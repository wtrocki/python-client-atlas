# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator
from atlas.models.link import Link
from atlas.models.nds_user_to_dn_mapping import NDSUserToDNMapping

class NDSLDAP(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    authentication_enabled: Optional[StrictBool] = Field(None, alias="authenticationEnabled", description="Flag that indicates whether users can authenticate using an Lightweight Directory Access Protocol (LDAP) host.")
    authorization_enabled: Optional[StrictBool] = Field(None, alias="authorizationEnabled", description="Flag that indicates whether users can authorize access to MongoDB Cloud resources using an Lightweight Directory Access Protocol (LDAP) host.")
    authz_query_template: Optional[StrictStr] = Field('{USER}?memberOf?base', alias="authzQueryTemplate", description="Lightweight Directory Access Protocol (LDAP) query template that MongoDB Cloud runs to obtain the LDAP groups associated with the authenticated user. MongoDB Cloud uses this parameter only for user authorization. Use the `{USER}` placeholder in the Uniform Resource Locator (URL) to substitute the authenticated username. The query relates to the host specified with the hostname. Format this query according to [RFC 4515](https://tools.ietf.org/search/rfc4515) and [RFC 4516](https://datatracker.ietf.org/doc/html/rfc4516).")
    bind_password: Optional[StrictStr] = Field(None, alias="bindPassword", description="Password that MongoDB Cloud uses to authenticate the **bindUsername**.")
    bind_username: Optional[constr(strict=True)] = Field(None, alias="bindUsername", description="Full Distinguished Name (DN) of the Lightweight Directory Access Protocol (LDAP) user that MongoDB Cloud uses to connect to the LDAP host. LDAP distinguished names must be formatted according to RFC 2253.")
    ca_certificate: Optional[StrictStr] = Field(None, alias="caCertificate", description="Certificate Authority (CA) certificate that MongoDB Cloud uses to verify the identity of the Lightweight Directory Access Protocol (LDAP) host. MongoDB Cloud allows self-signed certificates. To delete an assigned value, pass an empty string: `\"caCertificate\": \"\"`.")
    hostname: Optional[constr(strict=True)] = Field(None, description="Human-readable label that identifies the hostname or Internet Protocol (IP) address of the Lightweight Directory Access Protocol (LDAP) host. This host must have access to the internet or have a Virtual Private Cloud (VPC) peering connection to your cluster.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    port: Optional[StrictInt] = Field(636, description="Port to which the Lightweight Directory Access Protocol (LDAP) host listens for client connections.")
    user_to_dn_mapping: Optional[List[NDSUserToDNMapping]] = Field(None, alias="userToDNMapping", description="User-to-Distinguished Name (DN) map that MongoDB Cloud uses to transform a Lightweight Directory Access Protocol (LDAP) username into an LDAP DN.")
    __properties = ["authenticationEnabled", "authorizationEnabled", "authzQueryTemplate", "bindPassword", "bindUsername", "caCertificate", "hostname", "links", "port", "userToDNMapping"]

    @validator('bind_username')
    def bind_username_validate_regular_expression(cls, v):
        if not re.match(r"^(?:(?<cn>CN=(?<name>[^,]*)),)?(?:(?<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?<domain>(?:DC=[^,]+,?)+)$", v):
            raise ValueError(r"must validate the regular expression /^(?:(?<cn>CN=(?<name>[^,]*)),)?(?:(?<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?<domain>(?:DC=[^,]+,?)+)$/")
        return v

    @validator('hostname')
    def hostname_validate_regular_expression(cls, v):
        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?$", v):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NDSLDAP:
        """Create an instance of NDSLDAP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "links",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_to_dn_mapping (list)
        _items = []
        if self.user_to_dn_mapping:
            for _item in self.user_to_dn_mapping:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userToDNMapping'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NDSLDAP:
        """Create an instance of NDSLDAP from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NDSLDAP.parse_obj(obj)

        _obj = NDSLDAP.parse_obj({
            "authentication_enabled": obj.get("authenticationEnabled"),
            "authorization_enabled": obj.get("authorizationEnabled"),
            "authz_query_template": obj.get("authzQueryTemplate") if obj.get("authzQueryTemplate") is not None else '{USER}?memberOf?base',
            "bind_password": obj.get("bindPassword"),
            "bind_username": obj.get("bindUsername"),
            "ca_certificate": obj.get("caCertificate"),
            "hostname": obj.get("hostname"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "port": obj.get("port") if obj.get("port") is not None else 636,
            "user_to_dn_mapping": [NDSUserToDNMapping.from_dict(_item) for _item in obj.get("userToDNMapping")] if obj.get("userToDNMapping") is not None else None
        })
        return _obj

