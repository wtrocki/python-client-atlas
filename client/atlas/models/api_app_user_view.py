# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.api_role_assignment_view import ApiRoleAssignmentView
from atlas.models.link import Link

class ApiAppUserView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    country: constr(strict=True) = Field(..., description="Two alphabet characters that identifies MongoDB Cloud user's geographic location. This parameter uses the ISO 3166-1a2 code format.")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="Date and time when the current account is created. This value is in the ISO 8601 timestamp format in UTC.")
    email_address: StrictStr = Field(..., alias="emailAddress", description="Email address that belongs to the MongoDB Cloud user.")
    first_name: StrictStr = Field(..., alias="firstName", description="First or given name that belongs to the MongoDB Cloud user.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the MongoDB Cloud user.")
    last_auth: Optional[datetime] = Field(None, alias="lastAuth", description="Date and time when the current account last authenticated. This value is in the ISO 8601 timestamp format in UTC.")
    last_name: StrictStr = Field(..., alias="lastName", description="Last name, family name, or surname that belongs to the MongoDB Cloud user.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    mobile_number: constr(strict=True) = Field(..., alias="mobileNumber", description="Mobile phone number that belongs to the MongoDB Cloud user.")
    password: constr(strict=True, min_length=8) = Field(..., description="Password applied with the username to log in to MongoDB Cloud. MongoDB Cloud does not return this parameter except in response to creating a new MongoDB Cloud user. Only the MongoDB Cloud user can update their password after it has been set from the MongoDB Cloud console.")
    roles: Optional[List[ApiRoleAssignmentView]] = Field(None, description="List of objects that display the MongoDB Cloud user's roles and the corresponding organization or project to which that role applies. A role can apply to one organization or one project but not both.")
    team_ids: Optional[List[constr(strict=True, max_length=24, min_length=24)]] = Field(None, alias="teamIds", description="List of unique 24-hexadecimal digit strings that identifies the teams to which this MongoDB Cloud user belongs.", unique_items=True)
    username: StrictStr = Field(..., description="Email address that represents the username of the MongoDB Cloud user.")
    __properties = ["country", "createdAt", "emailAddress", "firstName", "id", "lastAuth", "lastName", "links", "mobileNumber", "password", "roles", "teamIds", "username"]

    @validator('country')
    def country_validate_regular_expression(cls, v):
        if not re.match(r"^([A-Z]{2})$", v):
            raise ValueError(r"must validate the regular expression /^([A-Z]{2})$/")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('mobile_number')
    def mobile_number_validate_regular_expression(cls, v):
        if not re.match(r"(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})$", v):
            raise ValueError(r"must validate the regular expression /(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiAppUserView:
        """Create an instance of ApiAppUserView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_at",
                            "id",
                            "last_auth",
                            "links",
                            "team_ids",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiAppUserView:
        """Create an instance of ApiAppUserView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiAppUserView.parse_obj(obj)

        _obj = ApiAppUserView.parse_obj({
            "country": obj.get("country"),
            "created_at": obj.get("createdAt"),
            "email_address": obj.get("emailAddress"),
            "first_name": obj.get("firstName"),
            "id": obj.get("id"),
            "last_auth": obj.get("lastAuth"),
            "last_name": obj.get("lastName"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "mobile_number": obj.get("mobileNumber"),
            "password": obj.get("password"),
            "roles": [ApiRoleAssignmentView.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "team_ids": obj.get("teamIds"),
            "username": obj.get("username")
        })
        return _obj

