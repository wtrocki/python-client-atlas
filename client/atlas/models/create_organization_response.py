# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator
from atlas.models.api_api_user_view import ApiApiUserView
from atlas.models.api_organization_view import ApiOrganizationView

class CreateOrganizationResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    api_key: Optional[ApiApiUserView] = Field(None, alias="apiKey")
    org_owner_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="orgOwnerId", description="Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role.")
    organization: Optional[ApiOrganizationView] = None
    __properties = ["apiKey", "orgOwnerId", "organization"]

    @validator('org_owner_id')
    def org_owner_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrganizationResponse:
        """Create an instance of CreateOrganizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "org_owner_id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of api_key
        if self.api_key:
            _dict['apiKey'] = self.api_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrganizationResponse:
        """Create an instance of CreateOrganizationResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateOrganizationResponse.parse_obj(obj)

        _obj = CreateOrganizationResponse.parse_obj({
            "api_key": ApiApiUserView.from_dict(obj.get("apiKey")) if obj.get("apiKey") is not None else None,
            "org_owner_id": obj.get("orgOwnerId"),
            "organization": ApiOrganizationView.from_dict(obj.get("organization")) if obj.get("organization") is not None else None
        })
        return _obj

