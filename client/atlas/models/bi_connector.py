# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class BiConnector(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    enabled: Optional[StrictBool] = Field(None, description="Flag that indicates whether MongoDB Connector for Business Intelligence is enabled on the specified cluster.")
    read_preference: Optional[StrictStr] = Field(None, alias="readPreference", description="Data source node designated for the MongoDB Connector for Business Intelligence on MongoDB Cloud. The MongoDB Connector for Business Intelligence on MongoDB Cloud reads data from the primary, secondary, or analytics node based on your read preferences. Defaults to `ANALYTICS` node, or `SECONDARY` if there are no `ANALYTICS` nodes.")
    __properties = ["enabled", "readPreference"]

    @validator('read_preference')
    def read_preference_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PRIMARY', 'SECONDARY', 'ANALYTICS'):
            raise ValueError("must validate the enum values ('PRIMARY', 'SECONDARY', 'ANALYTICS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BiConnector:
        """Create an instance of BiConnector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BiConnector:
        """Create an instance of BiConnector from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return BiConnector.parse_obj(obj)

        _obj = BiConnector.parse_obj({
            "enabled": obj.get("enabled"),
            "read_preference": obj.get("readPreference")
        })
        return _obj

