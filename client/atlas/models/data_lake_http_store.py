# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class DataLakeHTTPStore(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    allow_insecure: Optional[StrictBool] = Field(False, alias="allowInsecure", description="Flag that validates the scheme in the specified URLs. If `true`, allows insecure `HTTP` scheme, doesn't verify the server's certificate chain and hostname, and accepts any certificate with any hostname presented by the server. If `false`, allows secure `HTTPS` scheme only.")
    default_format: Optional[StrictStr] = Field(None, alias="defaultFormat", description="Default format that Data Lake assumes if it encounters a file without an extension while searching the `storeName`. If omitted, Data Lake attempts to detect the file type by processing a few bytes of the file. The specified format only applies to the URLs specified in the **databases.[n].collections.[n].dataSources** object.")
    urls: Optional[List[StrictStr]] = Field(None, description="Comma-separated list of publicly accessible HTTP URLs where data is stored. You can't specify URLs that require authentication.")
    name: Optional[StrictStr] = Field(None, description="Human-readable label that identifies the data store. The **databases.[n].collections.[n].dataSources.[n].storeName** field references this values as part of the mapping configuration. To use MongoDB Cloud as a data store, the data lake requires a serverless instance or an `M10` or higher cluster.")
    provider: StrictStr = ...
    __properties = ["allowInsecure", "defaultFormat", "urls", "name", "provider"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataLakeHTTPStore:
        """Create an instance of DataLakeHTTPStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataLakeHTTPStore:
        """Create an instance of DataLakeHTTPStore from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DataLakeHTTPStore.parse_obj(obj)

        _obj = DataLakeHTTPStore.parse_obj({
            "allow_insecure": obj.get("allowInsecure") if obj.get("allowInsecure") is not None else False,
            "default_format": obj.get("defaultFormat"),
            "urls": obj.get("urls"),
            "name": obj.get("name"),
            "provider": obj.get("provider")
        })
        return _obj

