# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field
from atlas.models.db_action import DBAction
from atlas.models.inherited_role import InheritedRole

class UpdateCustomDBRole(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    actions: Optional[List[DBAction]] = Field(None, description="List of the individual privilege actions that the role grants.")
    inherited_roles: Optional[List[InheritedRole]] = Field(None, alias="inheritedRoles", description="List of the built-in roles that this custom role inherits.", unique_items=True)
    __properties = ["actions", "inheritedRoles"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCustomDBRole:
        """Create an instance of UpdateCustomDBRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item in self.actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inherited_roles (list)
        _items = []
        if self.inherited_roles:
            for _item in self.inherited_roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inheritedRoles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCustomDBRole:
        """Create an instance of UpdateCustomDBRole from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateCustomDBRole.parse_obj(obj)

        _obj = UpdateCustomDBRole.parse_obj({
            "actions": [DBAction.from_dict(_item) for _item in obj.get("actions")] if obj.get("actions") is not None else None,
            "inherited_roles": [InheritedRole.from_dict(_item) for _item in obj.get("inheritedRoles")] if obj.get("inheritedRoles") is not None else None
        })
        return _obj

