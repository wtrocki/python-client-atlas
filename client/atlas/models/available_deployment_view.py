# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class AvailableDeploymentView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    agent_version: Optional[StrictStr] = Field(None, alias="agentVersion", description="Version of MongoDB Agent that monitors/manages the cluster.")
    cluster_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="clusterId", description="Unique 24-hexadecimal digit string that identifies the cluster.")
    db_size_bytes: Optional[StrictInt] = Field(None, alias="dbSizeBytes", description="Size of this database on disk at the time of the request expressed in bytes.")
    feature_compatibility_version: StrictStr = Field(..., alias="featureCompatibilityVersion", description="Version of MongoDB [features](https://docs.mongodb.com/manual/reference/command/setFeatureCompatibilityVersion) that this cluster supports.")
    managed: StrictBool = Field(..., description="Flag that indicates whether Automation manages this cluster.")
    mongo_db_version: StrictStr = Field(..., alias="mongoDBVersion", description="Version of MongoDB that this cluster runs.")
    name: StrictStr = Field(..., description="Human-readable label that identifies this cluster.")
    oplog_size_mb: Optional[StrictInt] = Field(None, alias="oplogSizeMB", description="Size of the Oplog on disk at the time of the request expressed in MB.")
    sharded: StrictBool = Field(..., description="Flag that indicates whether someone configured this cluster as a sharded cluster.  - If `true`, this cluster serves as a sharded cluster. - If `false`, this cluster serves as a replica set.")
    shards_size: Optional[StrictInt] = Field(None, alias="shardsSize", description="Number of shards that comprise this cluster.")
    tls_enabled: StrictBool = Field(..., alias="tlsEnabled", description="Flag that indicates whether someone enabled TLS for this cluster.")
    __properties = ["agentVersion", "clusterId", "dbSizeBytes", "featureCompatibilityVersion", "managed", "mongoDBVersion", "name", "oplogSizeMB", "sharded", "shardsSize", "tlsEnabled"]

    @validator('cluster_id')
    def cluster_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AvailableDeploymentView:
        """Create an instance of AvailableDeploymentView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "agent_version",
                            "cluster_id",
                            "db_size_bytes",
                            "feature_compatibility_version",
                            "managed",
                            "mongo_db_version",
                            "name",
                            "oplog_size_mb",
                            "sharded",
                            "shards_size",
                            "tls_enabled",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AvailableDeploymentView:
        """Create an instance of AvailableDeploymentView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AvailableDeploymentView.parse_obj(obj)

        _obj = AvailableDeploymentView.parse_obj({
            "agent_version": obj.get("agentVersion"),
            "cluster_id": obj.get("clusterId"),
            "db_size_bytes": obj.get("dbSizeBytes"),
            "feature_compatibility_version": obj.get("featureCompatibilityVersion"),
            "managed": obj.get("managed"),
            "mongo_db_version": obj.get("mongoDBVersion"),
            "name": obj.get("name"),
            "oplog_size_mb": obj.get("oplogSizeMB"),
            "sharded": obj.get("sharded"),
            "shards_size": obj.get("shardsSize"),
            "tls_enabled": obj.get("tlsEnabled")
        })
        return _obj

