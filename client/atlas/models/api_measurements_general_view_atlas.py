# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.api_measurement_view_atlas import ApiMeasurementViewAtlas
from atlas.models.link_atlas import LinkAtlas

class ApiMeasurementsGeneralViewAtlas(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    database_name: Optional[StrictStr] = Field(None, alias="databaseName", description="Human-readable label that identifies the database that the specified MongoDB process serves.")
    end: Optional[datetime] = Field(None, description="Date and time that specifies when to stop retrieving measurements. If you set **end**, you must set **start**. You can't set this parameter and **period** in the same request. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    granularity: Optional[StrictStr] = Field(None, description="Duration that specifies the interval between measurement data points. The parameter expresses its value in ISO 8601 timestamp format in UTC. If you set this parameter, you must set either **period** or **start** and **end**.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal digit string that identifies the project. The project contains MongoDB processes that you want to return. The MongoDB process can be either the `mongod` or `mongos`.")
    host_id: Optional[constr(strict=True)] = Field(None, alias="hostId", description="Combination of hostname and Internet Assigned Numbers Authority (IANA) port that serves the MongoDB process. The host must be the hostname, fully qualified domain name (FQDN), or Internet Protocol address (IPv4 or IPv6) of the host that runs the MongoDB process (`mongod` or `mongos`). The port must be the IANA port on which the MongoDB process listens for requests.")
    links: Optional[List[LinkAtlas]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    measurements: Optional[List[ApiMeasurementViewAtlas]] = Field(None, description="List that contains measurements and their data points.")
    partition_name: Optional[StrictStr] = Field(None, alias="partitionName", description="Human-readable label of the disk or partition to which the measurements apply.")
    process_id: Optional[constr(strict=True)] = Field(None, alias="processId", description="Combination of hostname and Internet Assigned Numbers Authority (IANA) port that serves the MongoDB process. The host must be the hostname, fully qualified domain name (FQDN), or Internet Protocol address (IPv4 or IPv6) of the host that runs the MongoDB process (`mongod` or `mongos`). The port must be the IANA port on which the MongoDB process listens for requests.")
    start: Optional[datetime] = Field(None, description="Date and time that specifies when to start retrieving measurements. If you set **start**, you must set **end**. You can't set this parameter and **period** in the same request. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    __properties = ["databaseName", "end", "granularity", "groupId", "hostId", "links", "measurements", "partitionName", "processId", "start"]

    @validator('granularity')
    def granularity_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PT1M', 'PT5M', 'PT1H', 'P1D'):
            raise ValueError("must validate the enum values ('PT1M', 'PT5M', 'PT1H', 'P1D')")
        return v

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('host_id')
    def host_id_validate_regular_expression(cls, v):
        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$", v):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$/")
        return v

    @validator('process_id')
    def process_id_validate_regular_expression(cls, v):
        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$", v):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMeasurementsGeneralViewAtlas:
        """Create an instance of ApiMeasurementsGeneralViewAtlas from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "database_name",
                            "end",
                            "granularity",
                            "group_id",
                            "host_id",
                            "links",
                            "measurements",
                            "partition_name",
                            "process_id",
                            "start",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item in self.measurements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['measurements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMeasurementsGeneralViewAtlas:
        """Create an instance of ApiMeasurementsGeneralViewAtlas from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiMeasurementsGeneralViewAtlas.parse_obj(obj)

        _obj = ApiMeasurementsGeneralViewAtlas.parse_obj({
            "database_name": obj.get("databaseName"),
            "end": obj.get("end"),
            "granularity": obj.get("granularity"),
            "group_id": obj.get("groupId"),
            "host_id": obj.get("hostId"),
            "links": [LinkAtlas.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "measurements": [ApiMeasurementViewAtlas.from_dict(_item) for _item in obj.get("measurements")] if obj.get("measurements") is not None else None,
            "partition_name": obj.get("partitionName"),
            "process_id": obj.get("processId"),
            "start": obj.get("start")
        })
        return _obj

