# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.cluster_view import ClusterView

class OrgGroupView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    clusters: Optional[List[ClusterView]] = Field(None, description="Settings that describe the clusters in each project that the API key is authorized to view.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal character string that identifies the project.")
    group_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="groupName", description="Human-readable label that identifies the project.")
    org_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="orgId", description="Unique 24-hexadecimal character string that identifies the organization that contains the project.")
    org_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="orgName", description="Human-readable label that identifies the organization that contains the project.")
    plan_type: Optional[StrictStr] = Field(None, alias="planType", description="Human-readable label that indicates the plan type.")
    tags: Optional[List[StrictStr]] = Field(None, description="List of human-readable labels that categorize the specified project. MongoDB Cloud returns an empty array.")
    __properties = ["clusters", "groupId", "groupName", "orgId", "orgName", "planType", "tags"]

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('group_name')
    def group_name_validate_regular_expression(cls, v):
        if not re.match(r"^[\p{L}\p{N}\-_.(),:&@+\']{1,64}$", v):
            raise ValueError(r"must validate the regular expression /^[\p{L}\p{N}\-_.(),:&@+']{1,64}$/")
        return v

    @validator('org_id')
    def org_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('org_name')
    def org_name_validate_regular_expression(cls, v):
        if not re.match(r"^[\p{L}\p{N}\-_.(),:&@+\']{1,64}$", v):
            raise ValueError(r"must validate the regular expression /^[\p{L}\p{N}\-_.(),:&@+']{1,64}$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrgGroupView:
        """Create an instance of OrgGroupView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "clusters",
                            "group_id",
                            "org_id",
                            "plan_type",
                            "tags",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item in self.clusters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['clusters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrgGroupView:
        """Create an instance of OrgGroupView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OrgGroupView.parse_obj(obj)

        _obj = OrgGroupView.parse_obj({
            "clusters": [ClusterView.from_dict(_item) for _item in obj.get("clusters")] if obj.get("clusters") is not None else None,
            "group_id": obj.get("groupId"),
            "group_name": obj.get("groupName"),
            "org_id": obj.get("orgId"),
            "org_name": obj.get("orgName"),
            "plan_type": obj.get("planType"),
            "tags": obj.get("tags")
        })
        return _obj

