# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, conint

class GroupMaintenanceWindow(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    auto_defer_once_enabled: Optional[StrictBool] = Field(None, alias="autoDeferOnceEnabled", description="Flag that indicates whether MongoDB Cloud should defer all maintenance windows for one week after you enable them.")
    day_of_week: conint(strict=True, le=7, ge=1) = Field(..., alias="dayOfWeek", description="One-based integer that represents the day of the week that the maintenance window starts.  | Value | Day of Week | |---|---| | `1` | Sunday | | `2` | Monday | | `3` | Tuesday | | `4` | Wednesday | | `5` | Thursday | | `6` | Friday | | `7` | Saturday | ")
    hour_of_day: conint(strict=True, le=23, ge=0) = Field(..., alias="hourOfDay", description="Zero-based integer that represents the hour of the of the day that the maintenance window starts according to a 24-hour clock. Use `0` for midnight and `12` for noon.")
    start_asap: Optional[StrictBool] = Field(None, alias="startASAP", description="Flag that indicates whether MongoDB Cloud starts the maintenance window immediately upon receiving this request. To start the maintenance window immediately for your project, MongoDB Cloud must have maintenance scheduled and you must set a maintenance window. This flag resets to `false` after MongoDB Cloud completes maintenance.")
    __properties = ["autoDeferOnceEnabled", "dayOfWeek", "hourOfDay", "startASAP"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupMaintenanceWindow:
        """Create an instance of GroupMaintenanceWindow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupMaintenanceWindow:
        """Create an instance of GroupMaintenanceWindow from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GroupMaintenanceWindow.parse_obj(obj)

        _obj = GroupMaintenanceWindow.parse_obj({
            "auto_defer_once_enabled": obj.get("autoDeferOnceEnabled"),
            "day_of_week": obj.get("dayOfWeek"),
            "hour_of_day": obj.get("hourOfDay"),
            "start_asap": obj.get("startASAP")
        })
        return _obj

