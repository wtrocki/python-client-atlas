# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.link import Link
from atlas.models.ndsldap_verify_connectivity_job_request_params import NDSLDAPVerifyConnectivityJobRequestParams
from atlas.models.ndsldap_verify_connectivity_job_request_validation import NDSLDAPVerifyConnectivityJobRequestValidation

class NDSLDAPVerifyConnectivityJobRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal digit string that identifies the project associated with this Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    request: Optional[NDSLDAPVerifyConnectivityJobRequestParams] = None
    request_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="requestId", description="Unique 24-hexadecimal digit string that identifies this request to verify an Lightweight Directory Access Protocol (LDAP) configuration.")
    status: Optional[StrictStr] = Field(None, description="Human-readable string that indicates the status of the Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration.")
    validations: Optional[List[NDSLDAPVerifyConnectivityJobRequestValidation]] = Field(None, description="List that contains the validation messages related to the verification of the provided Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration details. The list contains a document for each test that MongoDB Cloud runs. MongoDB Cloud stops running tests after the first failure.")
    __properties = ["groupId", "links", "request", "requestId", "status", "validations"]

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('request_id')
    def request_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('FAIL', 'PENDING', 'SUCCESS'):
            raise ValueError("must validate the enum values ('FAIL', 'PENDING', 'SUCCESS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NDSLDAPVerifyConnectivityJobRequest:
        """Create an instance of NDSLDAPVerifyConnectivityJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "group_id",
                            "links",
                            "request_id",
                            "status",
                            "validations",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validations (list)
        _items = []
        if self.validations:
            for _item in self.validations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NDSLDAPVerifyConnectivityJobRequest:
        """Create an instance of NDSLDAPVerifyConnectivityJobRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return NDSLDAPVerifyConnectivityJobRequest.parse_obj(obj)

        _obj = NDSLDAPVerifyConnectivityJobRequest.parse_obj({
            "group_id": obj.get("groupId"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "request": NDSLDAPVerifyConnectivityJobRequestParams.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "request_id": obj.get("requestId"),
            "status": obj.get("status"),
            "validations": [NDSLDAPVerifyConnectivityJobRequestValidation.from_dict(_item) for _item in obj.get("validations")] if obj.get("validations") is not None else None
        })
        return _obj

