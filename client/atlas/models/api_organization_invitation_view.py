# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.link import Link

class ApiOrganizationInvitationView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="Date and time when MongoDB Cloud sent the invitation. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt", description="Date and time when the invitation from MongoDB Cloud expires. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies this organization.")
    inviter_username: Optional[StrictStr] = Field(None, alias="inviterUsername", description="Email address of the MongoDB Cloud user who sent the invitation to join the organization.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    org_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="orgId", description="Unique 24-hexadecimal digit string that identifies the organization.")
    org_name: constr(strict=True) = Field(..., alias="orgName", description="Human-readable label that identifies this organization.")
    roles: Optional[List[StrictStr]] = Field(None, description="One or more organization or project level roles to assign to the MongoDB Cloud user.", unique_items=True)
    team_ids: Optional[List[constr(strict=True, max_length=24, min_length=24)]] = Field(None, alias="teamIds", description="List of unique 24-hexadecimal digit strings that identifies each team.", unique_items=True)
    username: Optional[StrictStr] = Field(None, description="Email address of the MongoDB Cloud user invited to join the organization.")
    __properties = ["createdAt", "expiresAt", "id", "inviterUsername", "links", "orgId", "orgName", "roles", "teamIds", "username"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('org_id')
    def org_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('org_name')
    def org_name_validate_regular_expression(cls, v):
        if not re.match(r"^[\p{L}\p{N}\-_.(),:&@+\']{1,64}$", v):
            raise ValueError(r"must validate the regular expression /^[\p{L}\p{N}\-_.(),:&@+']{1,64}$/")
        return v

    @validator('roles')
    def roles_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('ORG_OWNER', 'ORG_MEMBER', 'ORG_GROUP_CREATOR', 'ORG_BILLING_ADMIN', 'ORG_READ_ONLY', 'GROUP_CLUSTER_MANAGER', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_OWNER', 'GROUP_READ_ONLY'):
            raise ValueError("must validate the enum values ('ORG_OWNER', 'ORG_MEMBER', 'ORG_GROUP_CREATOR', 'ORG_BILLING_ADMIN', 'ORG_READ_ONLY', 'GROUP_CLUSTER_MANAGER', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_OWNER', 'GROUP_READ_ONLY')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiOrganizationInvitationView:
        """Create an instance of ApiOrganizationInvitationView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_at",
                            "expires_at",
                            "id",
                            "inviter_username",
                            "links",
                            "org_id",
                            "team_ids",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiOrganizationInvitationView:
        """Create an instance of ApiOrganizationInvitationView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiOrganizationInvitationView.parse_obj(obj)

        _obj = ApiOrganizationInvitationView.parse_obj({
            "created_at": obj.get("createdAt"),
            "expires_at": obj.get("expiresAt"),
            "id": obj.get("id"),
            "inviter_username": obj.get("inviterUsername"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "org_id": obj.get("orgId"),
            "org_name": obj.get("orgName"),
            "roles": obj.get("roles"),
            "team_ids": obj.get("teamIds"),
            "username": obj.get("username")
        })
        return _obj

