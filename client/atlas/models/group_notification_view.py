# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint, validator

class GroupNotificationView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    delay_min: Optional[StrictInt] = Field(None, alias="delayMin", description="Number of minutes that MongoDB Cloud waits after detecting an alert condition before it sends out the first notification.")
    email_enabled: Optional[StrictBool] = Field(None, alias="emailEnabled", description="Flag that indicates whether MongoDB Cloud should send email notifications. The resource requires this parameter when one of the following values have been set:  - `\"notifications.[n].typeName\" : \"ORG\"` - `\"notifications.[n].typeName\" : \"GROUP\"` - `\"notifications.[n].typeName\" : \"USER\"`")
    interval_min: Optional[conint(strict=True, ge=5)] = Field(None, alias="intervalMin", description="Number of minutes to wait between successive notifications. MongoDB Cloud sends notifications until someone acknowledges the unacknowledged alert.  PagerDuty, VictorOps, and OpsGenie notifications don't return this element. Configure and manage the notification interval within each of those services.")
    roles: Optional[List[StrictStr]] = Field(None, description="List that contains the one or more [organization](https://dochub.mongodb.org/core/atlas-org-roles) or [project roles](https://dochub.mongodb.org/core/atlas-proj-roles) that receive the configured alert. The resource requires this parameter when `\"notifications.[n].typeName\" : \"GROUP\"` or `\"notifications.[n].typeName\" : \"ORG\"`. If you include this parameter, MongoDB Cloud sends alerts only to users assigned the roles you specify in the array. If you omit this parameter, MongoDB Cloud sends alerts to users assigned any role.")
    sms_enabled: Optional[StrictBool] = Field(None, alias="smsEnabled", description="Flag that indicates whether MongoDB Cloud should send text message notifications. The resource requires this parameter when one of the following values have been set:  - `\"notifications.[n].typeName\" : \"ORG\"` - `\"notifications.[n].typeName\" : \"GROUP\"` - `\"notifications.[n].typeName\" : \"USER\"`")
    type_name: StrictStr = Field(..., alias="typeName", description="Human-readable label that displays the alert notification type.")
    __properties = ["delayMin", "emailEnabled", "intervalMin", "roles", "smsEnabled", "typeName"]

    @validator('roles')
    def roles_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('GROUP_CLUSTER_MANAGER', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_OWNER', 'GROUP_READ_WRITE', 'ORG_OWNER', 'ORG_MEMBER', 'ORG_GROUP_CREATOR', 'ORG_BILLING_ADMIN', 'ORG_READ_ONLY'):
            raise ValueError("must validate the enum values ('GROUP_CLUSTER_MANAGER', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_OWNER', 'GROUP_READ_WRITE', 'ORG_OWNER', 'ORG_MEMBER', 'ORG_GROUP_CREATOR', 'ORG_BILLING_ADMIN', 'ORG_READ_ONLY')")
        return v

    @validator('type_name')
    def type_name_validate_enum(cls, v):
        if v not in ('GROUP'):
            raise ValueError("must validate the enum values ('GROUP')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupNotificationView:
        """Create an instance of GroupNotificationView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupNotificationView:
        """Create an instance of GroupNotificationView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GroupNotificationView.parse_obj(obj)

        _obj = GroupNotificationView.parse_obj({
            "delay_min": obj.get("delayMin"),
            "email_enabled": obj.get("emailEnabled"),
            "interval_min": obj.get("intervalMin"),
            "roles": obj.get("roles"),
            "sms_enabled": obj.get("smsEnabled"),
            "type_name": obj.get("typeName")
        })
        return _obj

