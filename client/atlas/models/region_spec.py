# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, conint, validator

class RegionSpec(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    analytics_nodes: Optional[StrictInt] = Field(None, alias="analyticsNodes", description="Number of analytics nodes in the region. Analytics nodes handle analytic data such as reporting queries from MongoDB Connector for Business Intelligence on MongoDB Cloud. Analytics nodes are read-only, and can never become the primary. Use **replicationSpecs[n].{region}.analyticsNodes** instead.")
    electable_nodes: Optional[StrictInt] = Field(None, alias="electableNodes", description="Number of electable nodes to deploy in the specified region. Electable nodes can become the primary and can facilitate local reads. Use **replicationSpecs[n].{region}.electableNodes** instead.")
    priority: Optional[conint(strict=True, le=7, ge=0)] = Field(None, description="Number that indicates the election priority of the region. To identify the Preferred Region of the cluster, set this parameter to `7`. The primary node runs in the **Preferred Region**. To identify a read-only region, set this parameter to `0`.")
    read_only_nodes: Optional[StrictInt] = Field(None, alias="readOnlyNodes", description="Number of read-only nodes in the region. Read-only nodes can never become the primary member, but can facilitate local reads. Use **replicationSpecs[n].{region}.readOnlyNodes** instead.")
    __properties = ["analyticsNodes", "electableNodes", "priority", "readOnlyNodes"]

    @validator('electable_nodes')
    def electable_nodes_validate_enum(cls, v):
        if v is None:
            return v

        if v not in (0, 3, 5, 7):
            raise ValueError("must validate the enum values (0, 3, 5, 7)")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegionSpec:
        """Create an instance of RegionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegionSpec:
        """Create an instance of RegionSpec from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RegionSpec.parse_obj(obj)

        _obj = RegionSpec.parse_obj({
            "analytics_nodes": obj.get("analyticsNodes"),
            "electable_nodes": obj.get("electableNodes"),
            "priority": obj.get("priority"),
            "read_only_nodes": obj.get("readOnlyNodes")
        })
        return _obj

