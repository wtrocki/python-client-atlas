# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from atlas.models.data_lake_database_data_source import DataLakeDatabaseDataSource

class DataLakeDatabaseCollection(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    data_sources: Optional[List[DataLakeDatabaseDataSource]] = Field(None, alias="dataSources", description="Array that contains the data stores that map to a collection for this data lake.")
    name: Optional[StrictStr] = Field(None, description="Human-readable label that identifies the collection to which MongoDB Cloud maps the data in the data stores.")
    __properties = ["dataSources", "name"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataLakeDatabaseCollection:
        """Create an instance of DataLakeDatabaseCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data_sources (list)
        _items = []
        if self.data_sources:
            for _item in self.data_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataSources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataLakeDatabaseCollection:
        """Create an instance of DataLakeDatabaseCollection from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DataLakeDatabaseCollection.parse_obj(obj)

        _obj = DataLakeDatabaseCollection.parse_obj({
            "data_sources": [DataLakeDatabaseDataSource.from_dict(_item) for _item in obj.get("dataSources")] if obj.get("dataSources") is not None else None,
            "name": obj.get("name")
        })
        return _obj

