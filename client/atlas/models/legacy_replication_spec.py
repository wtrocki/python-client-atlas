# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator
from atlas.models.region_spec import RegionSpec

class LegacyReplicationSpec(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the replication object for a zone in a Global Cluster.  - If you include existing zones in the request, you must specify this parameter.  - If you add a new zone to an existing Global Cluster, you may specify this parameter. The request deletes any existing zones in a Global Cluster that you exclude from the request.")
    num_shards: Optional[StrictInt] = Field(1, alias="numShards", description="Positive integer that specifies the number of shards to deploy in each specified zone If you set this value to `1` and **clusterType** is `SHARDED`, MongoDB Cloud deploys a single-shard sharded cluster. Don't create a sharded cluster with a single shard for production environments. Single-shard sharded clusters don't provide the same benefits as multi-shard configurations.")
    regions_config: Optional[Dict[str, RegionSpec]] = Field(None, alias="regionsConfig", description="Physical location where MongoDB Cloud provisions cluster nodes.")
    zone_name: Optional[StrictStr] = Field(None, alias="zoneName", description="Human-readable label that identifies the zone in a Global Cluster. Provide this value only if **clusterType** is `GEOSHARDED`.")
    __properties = ["id", "numShards", "regionsConfig", "zoneName"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LegacyReplicationSpec:
        """Create an instance of LegacyReplicationSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in regions_config (dict)
        _field_dict = {}
        if self.regions_config:
            for _key in self.regions_config:
                if self.regions_config[_key]:
                    _field_dict[_key] = self.regions_config[_key].to_dict()
            _dict['regionsConfig'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LegacyReplicationSpec:
        """Create an instance of LegacyReplicationSpec from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LegacyReplicationSpec.parse_obj(obj)

        _obj = LegacyReplicationSpec.parse_obj({
            "id": obj.get("id"),
            "num_shards": obj.get("numShards") if obj.get("numShards") is not None else 1,
            "regions_config": dict((_k, Dict[str, RegionSpec].from_dict(_v)) for _k, _v in obj.get("regionsConfig").items()),
            "zone_name": obj.get("zoneName")
        })
        return _obj

