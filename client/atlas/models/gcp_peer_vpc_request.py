# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class GCPPeerVpcRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    container_id: constr(strict=True, max_length=24, min_length=24) = Field(..., alias="containerId", description="Unique 24-hexadecimal digit string that identifies the MongoDB Cloud network container that contains the specified network peering connection.")
    provider_name: StrictStr = Field(..., alias="providerName", description="Cloud service provider that determines the needed settings to configure the network connection for a virtual private connection.")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="Details of the error returned when requesting a GCP network peering resource. The resource returns `null` if the request succeeded.")
    gcp_project_id: constr(strict=True, max_length=30, min_length=6) = Field(..., alias="gcpProjectId", description="Human-readable label that identifies the GCP project that contains the network that you want to peer with the MongoDB Cloud VPC.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the network peering connection.")
    network_name: constr(strict=True, max_length=63, min_length=1) = Field(..., alias="networkName", description="Human-readable label that identifies the network to peer with the MongoDB Cloud VPC.")
    status: Optional[StrictStr] = Field(None, description="State of the network peering connection at the time you made the request.")
    __properties = ["containerId", "providerName", "errorMessage", "gcpProjectId", "id", "networkName", "status"]

    @validator('container_id')
    def container_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('provider_name')
    def provider_name_validate_enum(cls, v):
        if v not in ('AWS', 'AZURE', 'GCP'):
            raise ValueError("must validate the enum values ('AWS', 'AZURE', 'GCP')")
        return v

    @validator('gcp_project_id')
    def gcp_project_id_validate_regular_expression(cls, v):
        if not re.match(r"^[a-z][0-9a-z-]{4,28}[0-9a-z]{1}", v):
            raise ValueError(r"must validate the regular expression /^[a-z][0-9a-z-]{4,28}[0-9a-z]{1}/")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('network_name')
    def network_name_validate_regular_expression(cls, v):
        if not re.match(r"[a-z]([-a-z0-9]{0,62}[a-z0-9]{0,1})?", v):
            raise ValueError(r"must validate the regular expression /[a-z]([-a-z0-9]{0,62}[a-z0-9]{0,1})?/")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('ADDING_PEER', 'WAITING_FOR_USER', 'AVAILABLE', 'FAILED', 'DELETING'):
            raise ValueError("must validate the enum values ('ADDING_PEER', 'WAITING_FOR_USER', 'AVAILABLE', 'FAILED', 'DELETING')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GCPPeerVpcRequest:
        """Create an instance of GCPPeerVpcRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "error_message",
                            "id",
                            "status",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GCPPeerVpcRequest:
        """Create an instance of GCPPeerVpcRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GCPPeerVpcRequest.parse_obj(obj)

        _obj = GCPPeerVpcRequest.parse_obj({
            "container_id": obj.get("containerId"),
            "provider_name": obj.get("providerName"),
            "error_message": obj.get("errorMessage"),
            "gcp_project_id": obj.get("gcpProjectId"),
            "id": obj.get("id"),
            "network_name": obj.get("networkName"),
            "status": obj.get("status")
        })
        return _obj

