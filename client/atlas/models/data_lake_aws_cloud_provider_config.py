# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class DataLakeAWSCloudProviderConfig(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    external_id: Optional[StrictStr] = Field(None, alias="externalId", description="Unique identifier associated with the Identity and Access Management (IAM) role that the data lake assumes when accessing the data stores.")
    iam_assumed_role_arn: Optional[constr(strict=True, max_length=2048, min_length=20)] = Field(None, alias="iamAssumedRoleARN", description="Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role that the data lake assumes when accessing data stores.")
    iam_user_arn: Optional[StrictStr] = Field(None, alias="iamUserARN", description="Amazon Resource Name (ARN) of the user that the data lake assumes when accessing data stores.")
    role_id: StrictStr = Field(..., alias="roleId", description="Unique identifier of the role that the data lake can use to access the data stores.Required if specifying cloudProviderConfig.")
    test_s3_bucket: StrictStr = Field(..., alias="testS3Bucket", description="Name of the S3 data bucket that the provided role ID is authorized to access.Required if specifying cloudProviderConfig.")
    __properties = ["externalId", "iamAssumedRoleARN", "iamUserARN", "roleId", "testS3Bucket"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataLakeAWSCloudProviderConfig:
        """Create an instance of DataLakeAWSCloudProviderConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "external_id",
                            "iam_assumed_role_arn",
                            "iam_user_arn",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataLakeAWSCloudProviderConfig:
        """Create an instance of DataLakeAWSCloudProviderConfig from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DataLakeAWSCloudProviderConfig.parse_obj(obj)

        _obj = DataLakeAWSCloudProviderConfig.parse_obj({
            "external_id": obj.get("externalId"),
            "iam_assumed_role_arn": obj.get("iamAssumedRoleARN"),
            "iam_user_arn": obj.get("iamUserARN"),
            "role_id": obj.get("roleId"),
            "test_s3_bucket": obj.get("testS3Bucket")
        })
        return _obj

