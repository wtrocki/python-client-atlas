# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from atlas.models.gcp_consumer_forwarding_rule import GCPConsumerForwardingRule

class GCPEndpointGroup(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    delete_requested: Optional[StrictBool] = Field(None, alias="deleteRequested", description="Flag that indicates whether MongoDB Cloud received a request to remove the specified private endpoint from the private endpoint service.")
    endpoint_group_name: Optional[StrictStr] = Field(None, alias="endpointGroupName", description="Human-readable label that identifies a set of endpoints.")
    endpoints: Optional[List[GCPConsumerForwardingRule]] = Field(None, description="List of individual private endpoints that comprise this endpoint group.")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="Error message returned when requesting private connection resource. The resource returns `null` if the request succeeded.")
    status: Optional[StrictStr] = Field(None, description="State of the Google Cloud network endpoint group when MongoDB Cloud received this request.")
    __properties = ["deleteRequested", "endpointGroupName", "endpoints", "errorMessage", "status"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('INITIATING', 'VERIFIED', 'AVAILABLE', 'FAILED', 'DELETING'):
            raise ValueError("must validate the enum values ('INITIATING', 'VERIFIED', 'AVAILABLE', 'FAILED', 'DELETING')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GCPEndpointGroup:
        """Create an instance of GCPEndpointGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "delete_requested",
                            "endpoint_group_name",
                            "endpoints",
                            "error_message",
                            "status",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item in self.endpoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GCPEndpointGroup:
        """Create an instance of GCPEndpointGroup from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GCPEndpointGroup.parse_obj(obj)

        _obj = GCPEndpointGroup.parse_obj({
            "delete_requested": obj.get("deleteRequested"),
            "endpoint_group_name": obj.get("endpointGroupName"),
            "endpoints": [GCPConsumerForwardingRule.from_dict(_item) for _item in obj.get("endpoints")] if obj.get("endpoints") is not None else None,
            "error_message": obj.get("errorMessage"),
            "status": obj.get("status")
        })
        return _obj

