# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ManagedNamespaceView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    collection: Optional[StrictStr] = Field(None, description="Human-readable label of the collection to manage for this Global Cluster.")
    custom_shard_key: Optional[StrictStr] = Field(None, alias="customShardKey", description="Database parameter used to divide the *collection* into shards. Global clusters require a compound shard key. This compound shard key combines the location parameter and the user-selected custom key.")
    db: Optional[StrictStr] = Field(None, description="Human-readable label of the database to manage for this Global Cluster.")
    is_custom_shard_key_hashed: Optional[StrictBool] = Field(False, alias="isCustomShardKeyHashed", description="Flag that indicates whether someone hashed the custom shard key. If this parameter returns `false`, this cluster uses ranged sharding.")
    is_shard_key_unique: Optional[StrictBool] = Field(False, alias="isShardKeyUnique", description="Flag that indicates whether the underlying index enforces unique values.")
    num_initial_chunks: Optional[StrictInt] = Field(None, alias="numInitialChunks", description="Minimum number of chunks to create initially when sharding an empty collection with a hashed shard key.")
    presplit_hashed_zones: Optional[StrictBool] = Field(False, alias="presplitHashedZones", description="Flag that indicates whether MongoDB Cloud should create and distribute initial chunks for an empty or non-existing collection. MongoDB Cloud distributes data based on the defined zones and zone ranges for the collection.")
    __properties = ["collection", "customShardKey", "db", "isCustomShardKeyHashed", "isShardKeyUnique", "numInitialChunks", "presplitHashedZones"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManagedNamespaceView:
        """Create an instance of ManagedNamespaceView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManagedNamespaceView:
        """Create an instance of ManagedNamespaceView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ManagedNamespaceView.parse_obj(obj)

        _obj = ManagedNamespaceView.parse_obj({
            "collection": obj.get("collection"),
            "custom_shard_key": obj.get("customShardKey"),
            "db": obj.get("db"),
            "is_custom_shard_key_hashed": obj.get("isCustomShardKeyHashed") if obj.get("isCustomShardKeyHashed") is not None else False,
            "is_shard_key_unique": obj.get("isShardKeyUnique") if obj.get("isShardKeyUnique") is not None else False,
            "num_initial_chunks": obj.get("numInitialChunks"),
            "presplit_hashed_zones": obj.get("presplitHashedZones") if obj.get("presplitHashedZones") is not None else False
        })
        return _obj

