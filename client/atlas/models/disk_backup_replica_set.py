# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator
from atlas.models.link import Link

class DiskBackupReplicaSet(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cloud_provider: Optional[StrictStr] = Field(None, alias="cloudProvider", description="Human-readable label that identifies the cloud provider that stores this snapshot. The resource returns this parameter when `\"type\": \"replicaSet\"`.")
    copy_regions: Optional[List[StrictStr]] = Field(None, alias="copyRegions", description="List that identifies the regions to which MongoDB Cloud copies the snapshot.")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="Date and time when MongoDB Cloud took the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    description: Optional[StrictStr] = Field(None, description="Human-readable phrase or sentence that explains the purpose of the snapshot. The resource returns this parameter when `\"status\": \"onDemand\"`.")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt", description="Date and time when MongoDB Cloud deletes the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    frequency_type: Optional[StrictStr] = Field(None, alias="frequencyType", description="Human-readable label that identifies how often this snapshot triggers.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the snapshot.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    master_key_uuid: Optional[StrictStr] = Field(None, alias="masterKeyUUID", description="Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot. The resource returns this value when `\"encryptionEnabled\" : true`.")
    mongod_version: Optional[constr(strict=True)] = Field(None, alias="mongodVersion", description="Version of the MongoDB host that this snapshot backs up.")
    policy_items: Optional[List[constr(strict=True, max_length=24, min_length=24)]] = Field(None, alias="policyItems", description="List that contains unique identifiers for the policy items.")
    replica_set_name: Optional[StrictStr] = Field(None, alias="replicaSetName", description="Human-readable label that identifies the replica set from which MongoDB Cloud took this snapshot. The resource returns this parameter when `\"type\": \"replicaSet\"`.")
    snapshot_type: Optional[StrictStr] = Field(None, alias="snapshotType", description="Human-readable label that identifies when this snapshot triggers.")
    status: Optional[StrictStr] = Field(None, description="Human-readable label that indicates the stage of the backup process for this snapshot.")
    storage_size_bytes: Optional[StrictInt] = Field(None, alias="storageSizeBytes", description="Number of bytes taken to store the backup snapshot.")
    type: Optional[StrictStr] = Field(None, description="Human-readable label that categorizes the cluster as a replica set or sharded cluster.")
    __properties = ["cloudProvider", "copyRegions", "createdAt", "description", "expiresAt", "frequencyType", "id", "links", "masterKeyUUID", "mongodVersion", "policyItems", "replicaSetName", "snapshotType", "status", "storageSizeBytes", "type"]

    @validator('cloud_provider')
    def cloud_provider_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AWS', 'AZURE', 'GCP'):
            raise ValueError("must validate the enum values ('AWS', 'AZURE', 'GCP')")
        return v

    @validator('frequency_type')
    def frequency_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('hourly', 'daily', 'weekly', 'monthly'):
            raise ValueError("must validate the enum values ('hourly', 'daily', 'weekly', 'monthly')")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('mongod_version')
    def mongod_version_validate_regular_expression(cls, v):
        if not re.match(r"([\d]+\.[\d]+\.[\d]+)", v):
            raise ValueError(r"must validate the regular expression /([\d]+\.[\d]+\.[\d]+)/")
        return v

    @validator('snapshot_type')
    def snapshot_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('onDemand', 'scheduled'):
            raise ValueError("must validate the enum values ('onDemand', 'scheduled')")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('queued', 'inProgress', 'completed', 'failed'):
            raise ValueError("must validate the enum values ('queued', 'inProgress', 'completed', 'failed')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('REPLICA_SET', 'SHARDED_CLUSTER'):
            raise ValueError("must validate the enum values ('REPLICA_SET', 'SHARDED_CLUSTER')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiskBackupReplicaSet:
        """Create an instance of DiskBackupReplicaSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "cloud_provider",
                            "copy_regions",
                            "created_at",
                            "description",
                            "expires_at",
                            "frequency_type",
                            "id",
                            "links",
                            "master_key_uuid",
                            "mongod_version",
                            "policy_items",
                            "replica_set_name",
                            "snapshot_type",
                            "status",
                            "storage_size_bytes",
                            "type",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiskBackupReplicaSet:
        """Create an instance of DiskBackupReplicaSet from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DiskBackupReplicaSet.parse_obj(obj)

        _obj = DiskBackupReplicaSet.parse_obj({
            "cloud_provider": obj.get("cloudProvider"),
            "copy_regions": obj.get("copyRegions"),
            "created_at": obj.get("createdAt"),
            "description": obj.get("description"),
            "expires_at": obj.get("expiresAt"),
            "frequency_type": obj.get("frequencyType"),
            "id": obj.get("id"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "master_key_uuid": obj.get("masterKeyUUID"),
            "mongod_version": obj.get("mongodVersion"),
            "policy_items": obj.get("policyItems"),
            "replica_set_name": obj.get("replicaSetName"),
            "snapshot_type": obj.get("snapshotType"),
            "status": obj.get("status"),
            "storage_size_bytes": obj.get("storageSizeBytes"),
            "type": obj.get("type")
        })
        return _obj

