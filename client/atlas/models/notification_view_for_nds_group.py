# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from atlas.models.datadog_notification_view import DatadogNotificationView
from atlas.models.email_notification_view import EmailNotificationView
from atlas.models.group_notification_view import GroupNotificationView
from atlas.models.hip_chat_notification_view import HipChatNotificationView
from atlas.models.microsoft_teams_notification_view import MicrosoftTeamsNotificationView
from atlas.models.ops_genie_notification_view import OpsGenieNotificationView
from atlas.models.org_notification_view import OrgNotificationView
from atlas.models.pager_duty_notification_view import PagerDutyNotificationView
from atlas.models.slack_notification_view import SlackNotificationView
from atlas.models.sms_notification_view import SMSNotificationView
from atlas.models.team_notification_view import TeamNotificationView
from atlas.models.user_notification_view import UserNotificationView
from atlas.models.victor_ops_notification_view import VictorOpsNotificationView
from atlas.models.webhook_notification_view import WebhookNotificationView
from typing import Any, List
from pydantic import StrictStr, Field

NOTIFICATIONVIEWFORNDSGROUP_ONE_OF_SCHEMAS = ["DatadogNotificationView", "EmailNotificationView", "GroupNotificationView", "HipChatNotificationView", "MicrosoftTeamsNotificationView", "OpsGenieNotificationView", "OrgNotificationView", "PagerDutyNotificationView", "SMSNotificationView", "SlackNotificationView", "TeamNotificationView", "UserNotificationView", "VictorOpsNotificationView", "WebhookNotificationView"]

class NotificationViewForNdsGroup(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: DatadogNotificationView
    oneof_schema_1_validator: Optional[DatadogNotificationView] = None
    # data type: EmailNotificationView
    oneof_schema_2_validator: Optional[EmailNotificationView] = None
    # data type: GroupNotificationView
    oneof_schema_3_validator: Optional[GroupNotificationView] = None
    # data type: HipChatNotificationView
    oneof_schema_4_validator: Optional[HipChatNotificationView] = None
    # data type: MicrosoftTeamsNotificationView
    oneof_schema_5_validator: Optional[MicrosoftTeamsNotificationView] = None
    # data type: OpsGenieNotificationView
    oneof_schema_6_validator: Optional[OpsGenieNotificationView] = None
    # data type: OrgNotificationView
    oneof_schema_7_validator: Optional[OrgNotificationView] = None
    # data type: PagerDutyNotificationView
    oneof_schema_8_validator: Optional[PagerDutyNotificationView] = None
    # data type: SlackNotificationView
    oneof_schema_9_validator: Optional[SlackNotificationView] = None
    # data type: SMSNotificationView
    oneof_schema_10_validator: Optional[SMSNotificationView] = None
    # data type: TeamNotificationView
    oneof_schema_11_validator: Optional[TeamNotificationView] = None
    # data type: UserNotificationView
    oneof_schema_12_validator: Optional[UserNotificationView] = None
    # data type: VictorOpsNotificationView
    oneof_schema_13_validator: Optional[VictorOpsNotificationView] = None
    # data type: WebhookNotificationView
    oneof_schema_14_validator: Optional[WebhookNotificationView] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(NOTIFICATIONVIEWFORNDSGROUP_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: DatadogNotificationView
        if type(v) is not DatadogNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatadogNotificationView`")
        else:
            match += 1

        # validate data type: EmailNotificationView
        if type(v) is not EmailNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmailNotificationView`")
        else:
            match += 1

        # validate data type: GroupNotificationView
        if type(v) is not GroupNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `GroupNotificationView`")
        else:
            match += 1

        # validate data type: HipChatNotificationView
        if type(v) is not HipChatNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `HipChatNotificationView`")
        else:
            match += 1

        # validate data type: MicrosoftTeamsNotificationView
        if type(v) is not MicrosoftTeamsNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `MicrosoftTeamsNotificationView`")
        else:
            match += 1

        # validate data type: OpsGenieNotificationView
        if type(v) is not OpsGenieNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpsGenieNotificationView`")
        else:
            match += 1

        # validate data type: OrgNotificationView
        if type(v) is not OrgNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrgNotificationView`")
        else:
            match += 1

        # validate data type: PagerDutyNotificationView
        if type(v) is not PagerDutyNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `PagerDutyNotificationView`")
        else:
            match += 1

        # validate data type: SlackNotificationView
        if type(v) is not SlackNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `SlackNotificationView`")
        else:
            match += 1

        # validate data type: SMSNotificationView
        if type(v) is not SMSNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `SMSNotificationView`")
        else:
            match += 1

        # validate data type: TeamNotificationView
        if type(v) is not TeamNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TeamNotificationView`")
        else:
            match += 1

        # validate data type: UserNotificationView
        if type(v) is not UserNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserNotificationView`")
        else:
            match += 1

        # validate data type: VictorOpsNotificationView
        if type(v) is not VictorOpsNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `VictorOpsNotificationView`")
        else:
            match += 1

        # validate data type: WebhookNotificationView
        if type(v) is not WebhookNotificationView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebhookNotificationView`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into NotificationViewForNdsGroup with oneOf schemas: DatadogNotificationView, EmailNotificationView, GroupNotificationView, HipChatNotificationView, MicrosoftTeamsNotificationView, OpsGenieNotificationView, OrgNotificationView, PagerDutyNotificationView, SMSNotificationView, SlackNotificationView, TeamNotificationView, UserNotificationView, VictorOpsNotificationView, WebhookNotificationView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into NotificationViewForNdsGroup with oneOf schemas: DatadogNotificationView, EmailNotificationView, GroupNotificationView, HipChatNotificationView, MicrosoftTeamsNotificationView, OpsGenieNotificationView, OrgNotificationView, PagerDutyNotificationView, SMSNotificationView, SlackNotificationView, TeamNotificationView, UserNotificationView, VictorOpsNotificationView, WebhookNotificationView. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationViewForNdsGroup:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> NotificationViewForNdsGroup:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into DatadogNotificationView
        try:
            instance.actual_instance = DatadogNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into EmailNotificationView
        try:
            instance.actual_instance = EmailNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into GroupNotificationView
        try:
            instance.actual_instance = GroupNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into HipChatNotificationView
        try:
            instance.actual_instance = HipChatNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into MicrosoftTeamsNotificationView
        try:
            instance.actual_instance = MicrosoftTeamsNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into OpsGenieNotificationView
        try:
            instance.actual_instance = OpsGenieNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into OrgNotificationView
        try:
            instance.actual_instance = OrgNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into PagerDutyNotificationView
        try:
            instance.actual_instance = PagerDutyNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into SlackNotificationView
        try:
            instance.actual_instance = SlackNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into SMSNotificationView
        try:
            instance.actual_instance = SMSNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into TeamNotificationView
        try:
            instance.actual_instance = TeamNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into UserNotificationView
        try:
            instance.actual_instance = UserNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into VictorOpsNotificationView
        try:
            instance.actual_instance = VictorOpsNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into WebhookNotificationView
        try:
            instance.actual_instance = WebhookNotificationView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into NotificationViewForNdsGroup with oneOf schemas: DatadogNotificationView, EmailNotificationView, GroupNotificationView, HipChatNotificationView, MicrosoftTeamsNotificationView, OpsGenieNotificationView, OrgNotificationView, PagerDutyNotificationView, SMSNotificationView, SlackNotificationView, TeamNotificationView, UserNotificationView, VictorOpsNotificationView, WebhookNotificationView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into NotificationViewForNdsGroup with oneOf schemas: DatadogNotificationView, EmailNotificationView, GroupNotificationView, HipChatNotificationView, MicrosoftTeamsNotificationView, OpsGenieNotificationView, OrgNotificationView, PagerDutyNotificationView, SMSNotificationView, SlackNotificationView, TeamNotificationView, UserNotificationView, VictorOpsNotificationView, WebhookNotificationView. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

