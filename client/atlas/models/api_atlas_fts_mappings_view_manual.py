# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool

class ApiAtlasFTSMappingsViewManual(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    dynamic: Optional[StrictBool] = Field(False, description="Flag that indicates whether the index uses dynamic or static mappings. Required if **mappings.fields** is omitted.")
    fields: Optional[Dict[str, Dict[str, Any]]] = Field(None, description="One or more field specifications for the Atlas Search index. Required if **mappings.dynamic** is omitted or set to **false**.")
    __properties = ["dynamic", "fields"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiAtlasFTSMappingsViewManual:
        """Create an instance of ApiAtlasFTSMappingsViewManual from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiAtlasFTSMappingsViewManual:
        """Create an instance of ApiAtlasFTSMappingsViewManual from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiAtlasFTSMappingsViewManual.parse_obj(obj)

        _obj = ApiAtlasFTSMappingsViewManual.parse_obj({
            "dynamic": obj.get("dynamic") if obj.get("dynamic") is not None else False,
            "fields": obj.get("fields")
        })
        return _obj

