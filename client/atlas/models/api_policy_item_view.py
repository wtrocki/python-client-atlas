# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator

class ApiPolicyItemView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    frequency_interval: StrictInt = Field(..., alias="frequencyInterval", description="Number that indicates the frequency interval for a set of snapshots. A value of `1` specifies the first instance of the corresponding `frequencyType`.  - In a monthly policy item, `1` indicates that the monthly snapshot occurs on the first day of the month and `40` indicates the last day of the month.  - In a weekly policy item, `1` indicates that the weekly snapshot occurs on Monday and `7` indicates Sunday.  - In an hourly policy item, you can set the frequency interval to `1`, `2`, `4`, `6`, `8`, or `12`. For hourly policy items for NVMe clusters, MongoDB Cloud only accepts `12` as the frequency interval value.")
    frequency_type: StrictStr = Field(..., alias="frequencyType", description="Human-readable label that identifies the frequency type associated with the backup policy.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies this backup policy item.")
    retention_unit: StrictStr = Field(..., alias="retentionUnit", description="Unit of time in which MongoDB Cloud measures snapshot retention.")
    retention_value: StrictInt = Field(..., alias="retentionValue", description="Duration in days, weeks, or months that MongoDB Cloud retains the snapshot. For less frequent policy items, MongoDB Cloud requires that you specify a value greater than or equal to the value specified for more frequent policy items.  For example: If the hourly policy item specifies a retention of two days, you must specify two days or greater for the retention of the weekly policy item.")
    __properties = ["frequencyInterval", "frequencyType", "id", "retentionUnit", "retentionValue"]

    @validator('frequency_interval')
    def frequency_interval_validate_enum(cls, v):
        if v not in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 40):
            raise ValueError("must validate the enum values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 40)")
        return v

    @validator('frequency_type')
    def frequency_type_validate_enum(cls, v):
        if v not in ('daily', 'hourly', 'monthly', 'weekly', 'ondemand'):
            raise ValueError("must validate the enum values ('daily', 'hourly', 'monthly', 'weekly', 'ondemand')")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('retention_unit')
    def retention_unit_validate_enum(cls, v):
        if v not in ('days', 'weeks', 'months'):
            raise ValueError("must validate the enum values ('days', 'weeks', 'months')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiPolicyItemView:
        """Create an instance of ApiPolicyItemView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiPolicyItemView:
        """Create an instance of ApiPolicyItemView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiPolicyItemView.parse_obj(obj)

        _obj = ApiPolicyItemView.parse_obj({
            "frequency_interval": obj.get("frequencyInterval"),
            "frequency_type": obj.get("frequencyType"),
            "id": obj.get("id"),
            "retention_unit": obj.get("retentionUnit"),
            "retention_value": obj.get("retentionValue")
        })
        return _obj

