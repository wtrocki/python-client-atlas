# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class AzureKeyVault(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    azure_environment: Optional[StrictStr] = Field(None, alias="azureEnvironment", description="Azure environment in which your account credentials reside.")
    client_id: Optional[StrictStr] = Field(None, alias="clientID", description="Unique 36-hexadecimal character string that identifies an Azure application associated with your Azure Active Directory tenant.")
    enabled: Optional[StrictBool] = Field(None, description="Flag that indicates whether someone enabled encryption at rest for the specified  project. To disable encryption at rest using customer key management and remove the configuration details, pass only this parameter with a value of `false`.")
    key_identifier: Optional[StrictStr] = Field(None, alias="keyIdentifier", description="Web address with a unique key that identifies for your Azure Key Vault.")
    key_vault_name: Optional[StrictStr] = Field(None, alias="keyVaultName", description="Unique string that identifies the Azure Key Vault that contains your key.")
    resource_group_name: Optional[StrictStr] = Field(None, alias="resourceGroupName", description="Name of the Azure resource group that contains your Azure Key Vault.")
    secret: Optional[StrictStr] = Field(None, description="Private data that you need secured and that belongs to the specified Azure Key Vault (AKV) tenant (**azureKeyVault.tenantID**). This data can include any type of sensitive data such as passwords, database connection strings, API keys, and the like. AKV stores this information as encrypted binary data.")
    subscription_id: Optional[StrictStr] = Field(None, alias="subscriptionID", description="Unique 36-hexadecimal character string that identifies your Azure subscription.")
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantID", description="Unique 36-hexadecimal character string that identifies the Azure Active Directory tenant within your Azure subscription.")
    valid: Optional[StrictBool] = Field(None, description="Flag that indicates whether the Azure encryption key can encrypt and decrypt data.")
    __properties = ["azureEnvironment", "clientID", "enabled", "keyIdentifier", "keyVaultName", "resourceGroupName", "secret", "subscriptionID", "tenantID", "valid"]

    @validator('azure_environment')
    def azure_environment_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AZURE', 'AZURE_CHINA', 'AZURE_GERMANY'):
            raise ValueError("must validate the enum values ('AZURE', 'AZURE_CHINA', 'AZURE_GERMANY')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AzureKeyVault:
        """Create an instance of AzureKeyVault from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "valid",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AzureKeyVault:
        """Create an instance of AzureKeyVault from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AzureKeyVault.parse_obj(obj)

        _obj = AzureKeyVault.parse_obj({
            "azure_environment": obj.get("azureEnvironment"),
            "client_id": obj.get("clientID"),
            "enabled": obj.get("enabled"),
            "key_identifier": obj.get("keyIdentifier"),
            "key_vault_name": obj.get("keyVaultName"),
            "resource_group_name": obj.get("resourceGroupName"),
            "secret": obj.get("secret"),
            "subscription_id": obj.get("subscriptionID"),
            "tenant_id": obj.get("tenantID"),
            "valid": obj.get("valid")
        })
        return _obj

