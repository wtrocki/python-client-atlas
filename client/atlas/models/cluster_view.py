# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class ClusterView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    alert_count: Optional[StrictInt] = Field(None, alias="alertCount", description="Whole number that indicates the quantity of alerts open on the cluster.")
    auth_enabled: Optional[StrictBool] = Field(None, alias="authEnabled", description="Flag that indicates whether authentication is required to access the nodes in this cluster.")
    availability: Optional[StrictStr] = Field(None, description="Term that expresses how many nodes of the cluster can be accessed when MongoDB Cloud receives this request. This parameter returns `available` when all nodes are accessible, `warning` only when some nodes in the cluster can be accessed, `unavailable` when the cluster can't be accessed, or `dead` when the cluster has been deactivated.")
    backup_enabled: Optional[StrictBool] = Field(None, alias="backupEnabled", description="Flag that indicates whether the cluster can perform backups. If set to `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters. Backup uses Cloud Backups for dedicated clusters and Shared Cluster Backups for tenant clusters. If set to `false`, the cluster doesn't use MongoDB Cloud backups.")
    cluster_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="clusterId", description="Unique 24-hexadecimal character string that identifies the cluster.")
    data_size_bytes: Optional[StrictInt] = Field(None, alias="dataSizeBytes", description="Total size of the data stored on each node in the cluster. The resource expresses this value in bytes.")
    name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, description="Human-readable label that identifies the cluster.")
    node_count: Optional[StrictInt] = Field(None, alias="nodeCount", description="Whole number that indicates the quantity of nodes that comprise the cluster.")
    ssl_enabled: Optional[StrictBool] = Field(None, alias="sslEnabled", description="Flag that indicates whether TLS authentication is required to access the nodes in this cluster.")
    type: Optional[StrictStr] = Field(None, description="Human-readable label that indicates the cluster type.")
    versions: Optional[List[StrictStr]] = Field(None, description="List that contains the versions of MongoDB that each node in the cluster runs.", unique_items=True)
    __properties = ["alertCount", "authEnabled", "availability", "backupEnabled", "clusterId", "dataSizeBytes", "name", "nodeCount", "sslEnabled", "type", "versions"]

    @validator('availability')
    def availability_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('available', 'dead', 'unavailable', 'warning'):
            raise ValueError("must validate the enum values ('available', 'dead', 'unavailable', 'warning')")
        return v

    @validator('cluster_id')
    def cluster_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('name')
    def name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('REPLICA_SET', 'SHARDED_CLUSTER'):
            raise ValueError("must validate the enum values ('REPLICA_SET', 'SHARDED_CLUSTER')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterView:
        """Create an instance of ClusterView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "alert_count",
                            "auth_enabled",
                            "availability",
                            "backup_enabled",
                            "cluster_id",
                            "data_size_bytes",
                            "name",
                            "node_count",
                            "ssl_enabled",
                            "type",
                            "versions",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterView:
        """Create an instance of ClusterView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ClusterView.parse_obj(obj)

        _obj = ClusterView.parse_obj({
            "alert_count": obj.get("alertCount"),
            "auth_enabled": obj.get("authEnabled"),
            "availability": obj.get("availability"),
            "backup_enabled": obj.get("backupEnabled"),
            "cluster_id": obj.get("clusterId"),
            "data_size_bytes": obj.get("dataSizeBytes"),
            "name": obj.get("name"),
            "node_count": obj.get("nodeCount"),
            "ssl_enabled": obj.get("sslEnabled"),
            "type": obj.get("type"),
            "versions": obj.get("versions")
        })
        return _obj

