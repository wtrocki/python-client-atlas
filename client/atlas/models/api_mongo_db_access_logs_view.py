# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class ApiMongoDBAccessLogsView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    auth_result: Optional[StrictBool] = Field(None, alias="authResult", description="Flag that indicates whether the response should return successful authentication attempts only.")
    auth_source: Optional[StrictStr] = Field(None, alias="authSource", description="Database against which someone attempted to authenticate.")
    failure_reason: Optional[StrictStr] = Field(None, alias="failureReason", description="Reason that the authentication failed. Null if authentication succeeded.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal character string that identifies the project.")
    hostname: Optional[StrictStr] = Field(None, description="Human-readable label that identifies the hostname of the target node that received the authentication attempt.")
    ip_address: Optional[constr(strict=True)] = Field(None, alias="ipAddress", description="Internet Protocol address that attempted to authenticate with the database.")
    log_line: Optional[StrictStr] = Field(None, alias="logLine", description="Text of the host log concerning the authentication attempt.")
    timestamp: Optional[StrictStr] = Field(None, description="Date and time when someone made this authentication attempt. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.")
    username: Optional[StrictStr] = Field(None, description="Username used to authenticate against the database.")
    __properties = ["authResult", "authSource", "failureReason", "groupId", "hostname", "ipAddress", "logLine", "timestamp", "username"]

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('ip_address')
    def ip_address_validate_regular_expression(cls, v):
        if not re.match(r"^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}|([0-9a-f]{1,4}\:){7}[0-9a-f]{1,4}$", v):
            raise ValueError(r"must validate the regular expression /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}|([0-9a-f]{1,4}\:){7}[0-9a-f]{1,4}$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMongoDBAccessLogsView:
        """Create an instance of ApiMongoDBAccessLogsView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "auth_source",
                            "failure_reason",
                            "group_id",
                            "hostname",
                            "ip_address",
                            "log_line",
                            "timestamp",
                            "username",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMongoDBAccessLogsView:
        """Create an instance of ApiMongoDBAccessLogsView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiMongoDBAccessLogsView.parse_obj(obj)

        _obj = ApiMongoDBAccessLogsView.parse_obj({
            "auth_result": obj.get("authResult"),
            "auth_source": obj.get("authSource"),
            "failure_reason": obj.get("failureReason"),
            "group_id": obj.get("groupId"),
            "hostname": obj.get("hostname"),
            "ip_address": obj.get("ipAddress"),
            "log_line": obj.get("logLine"),
            "timestamp": obj.get("timestamp"),
            "username": obj.get("username")
        })
        return _obj

