# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from atlas.models.api_atlas_fts_analyzers_view_manual_char_filters_inner import ApiAtlasFTSAnalyzersViewManualCharFiltersInner
from atlas.models.api_atlas_fts_analyzers_view_manual_token_filters_inner import ApiAtlasFTSAnalyzersViewManualTokenFiltersInner
from atlas.models.api_atlas_fts_analyzers_view_manual_tokenizer import ApiAtlasFTSAnalyzersViewManualTokenizer

class ApiAtlasFTSAnalyzersViewManual(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    char_filters: Optional[List[ApiAtlasFTSAnalyzersViewManualCharFiltersInner]] = Field(None, alias="charFilters", description="Filters that examine text one character at a time and perform filtering operations.")
    name: StrictStr = Field(..., description="Human-readable name that identifies the custom analyzer. Names must be unique within an index, and must not start with any of the following strings: - `lucene.` - `builtin.` - `mongodb.`")
    token_filters: Optional[List[ApiAtlasFTSAnalyzersViewManualTokenFiltersInner]] = Field(None, alias="tokenFilters", description="Filter that performs operations such as:  - Stemming, which reduces related words, such as \"talking\", \"talked\", and \"talks\" to their root word \"talk\".  - Redaction, the removal of sensitive information from public documents.")
    tokenizer: ApiAtlasFTSAnalyzersViewManualTokenizer = ...
    __properties = ["charFilters", "name", "tokenFilters", "tokenizer"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiAtlasFTSAnalyzersViewManual:
        """Create an instance of ApiAtlasFTSAnalyzersViewManual from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in char_filters (list)
        _items = []
        if self.char_filters:
            for _item in self.char_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['charFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in token_filters (list)
        _items = []
        if self.token_filters:
            for _item in self.token_filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tokenFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of tokenizer
        if self.tokenizer:
            _dict['tokenizer'] = self.tokenizer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiAtlasFTSAnalyzersViewManual:
        """Create an instance of ApiAtlasFTSAnalyzersViewManual from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiAtlasFTSAnalyzersViewManual.parse_obj(obj)

        _obj = ApiAtlasFTSAnalyzersViewManual.parse_obj({
            "char_filters": [ApiAtlasFTSAnalyzersViewManualCharFiltersInner.from_dict(_item) for _item in obj.get("charFilters")] if obj.get("charFilters") is not None else None,
            "name": obj.get("name"),
            "token_filters": [ApiAtlasFTSAnalyzersViewManualTokenFiltersInner.from_dict(_item) for _item in obj.get("tokenFilters")] if obj.get("tokenFilters") is not None else None,
            "tokenizer": ApiAtlasFTSAnalyzersViewManualTokenizer.from_dict(obj.get("tokenizer")) if obj.get("tokenizer") is not None else None
        })
        return _obj

