# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class GroupSettings(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    is_collect_database_specifics_statistics_enabled: Optional[StrictBool] = Field(None, alias="isCollectDatabaseSpecificsStatisticsEnabled", description="Flag that indicates whether to collect database-specific metrics  for the specified project.")
    is_data_explorer_enabled: Optional[StrictBool] = Field(None, alias="isDataExplorerEnabled", description="Flag that indicates whether to enable the Data Explorer for the specified project.")
    is_extended_storage_sizes_enabled: Optional[StrictBool] = Field(None, alias="isExtendedStorageSizesEnabled", description="Flag that indicates whether to enable extended storage sizes  for the specified project.")
    is_performance_advisor_enabled: Optional[StrictBool] = Field(None, alias="isPerformanceAdvisorEnabled", description="Flag that indicates whether to enable the Performance Advisor and Profiler  for the specified project.")
    is_realtime_performance_panel_enabled: Optional[StrictBool] = Field(None, alias="isRealtimePerformancePanelEnabled", description="Flag that indicates whether to enable the Real Time Performance Panel for the specified project.")
    is_schema_advisor_enabled: Optional[StrictBool] = Field(None, alias="isSchemaAdvisorEnabled", description="Flag that indicates whether to enable the Schema Advisor for the specified project.")
    __properties = ["isCollectDatabaseSpecificsStatisticsEnabled", "isDataExplorerEnabled", "isExtendedStorageSizesEnabled", "isPerformanceAdvisorEnabled", "isRealtimePerformancePanelEnabled", "isSchemaAdvisorEnabled"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupSettings:
        """Create an instance of GroupSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupSettings:
        """Create an instance of GroupSettings from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GroupSettings.parse_obj(obj)

        _obj = GroupSettings.parse_obj({
            "is_collect_database_specifics_statistics_enabled": obj.get("isCollectDatabaseSpecificsStatisticsEnabled"),
            "is_data_explorer_enabled": obj.get("isDataExplorerEnabled"),
            "is_extended_storage_sizes_enabled": obj.get("isExtendedStorageSizesEnabled"),
            "is_performance_advisor_enabled": obj.get("isPerformanceAdvisorEnabled"),
            "is_realtime_performance_panel_enabled": obj.get("isRealtimePerformancePanelEnabled"),
            "is_schema_advisor_enabled": obj.get("isSchemaAdvisorEnabled")
        })
        return _obj

