# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from atlas.models.federated_user_view import FederatedUserView
from atlas.models.role_mapping_view import RoleMappingView

class ConnectedOrgConfigView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    domain_allow_list: Optional[List[StrictStr]] = Field(None, alias="domainAllowList", description="Approved domains that restrict users who can join the organization based on their email address.", unique_items=True)
    domain_restriction_enabled: StrictBool = Field(..., alias="domainRestrictionEnabled", description="Value that indicates whether domain restriction is enabled for this connected org.")
    identity_provider_id: constr(strict=True, max_length=20, min_length=20) = Field(..., alias="identityProviderId", description="Unique 20-hexadecimal digit string that identifies the identity provider that this connected org config is associated with.")
    org_id: constr(strict=True, max_length=24, min_length=24) = Field(..., alias="orgId", description="Unique 24-hexadecimal digit string that identifies the connected organization configuration.")
    post_auth_role_grants: Optional[List[StrictStr]] = Field(None, alias="postAuthRoleGrants", description="Atlas roles that are granted to a user in this organization after authenticating.", unique_items=True)
    role_mappings: Optional[List[RoleMappingView]] = Field(None, alias="roleMappings", description="Role mappings that are configured in this organization.", unique_items=True)
    user_conflicts: Optional[List[FederatedUserView]] = Field(None, alias="userConflicts", description="List that contains the users who have an email address that doesn't match any domain on the allowed list.")
    __properties = ["domainAllowList", "domainRestrictionEnabled", "identityProviderId", "orgId", "postAuthRoleGrants", "roleMappings", "userConflicts"]

    @validator('identity_provider_id')
    def identity_provider_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{20})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{20})$/")
        return v

    @validator('org_id')
    def org_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('post_auth_role_grants')
    def post_auth_role_grants_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('GLOBAL_AUTOMATION_ADMIN', 'GLOBAL_BACKUP_ADMIN', 'GLOBAL_METERING_USER', 'GLOBAL_METRICS_INTERNAL_USER', 'GLOBAL_MONITORING_ADMIN', 'GLOBAL_OWNER', 'GLOBAL_READ_ONLY', 'GLOBAL_USER_ADMIN', 'GLOBAL_USER_READ_ONLY', 'GLOBAL_ACCOUNT_SUSPENSION_ADMIN', 'GLOBAL_BILLING_ADMIN', 'GLOBAL_LEGAL_ADMIN', 'GLOBAL_FEATURE_FLAG_ADMIN', 'GLOBAL_ATLAS_TSE', 'GLOBAL_ATLAS_OPERATOR', 'GLOBAL_ATLAS_MONGODB_ROLLOUT_ADMIN', 'GLOBAL_ATLAS_ADMIN', 'GLOBAL_STITCH_ADMIN', 'GLOBAL_CHARTS_ADMIN', 'GLOBAL_EXPERIMENT_ASSIGNMENT_USER', 'GLOBAL_STITCH_INTERNAL_ADMIN', 'GLOBAL_BAAS_FEATURE_ADMIN', 'GLOBAL_SECURITY_ADMIN', 'GLOBAL_QUERY_ENGINE_INTERNAL_ADMIN', 'GLOBAL_PROACTIVE_SUPPORT_ADMIN', 'GLOBAL_INFRASTRUCTURE_INTERNAL_ADMIN', 'GLOBAL_SALESFORCE_ADMIN', 'GLOBAL_SALESFORCE_READ_ONLY', 'GLOBAL_APP_SERVICES_CLUSTER_DEBUG_DATA_ACCESS', 'ORG_MEMBER', 'ORG_READ_ONLY', 'ORG_BILLING_ADMIN', 'ORG_GROUP_CREATOR', 'ORG_OWNER', 'ORG_TEAM_MEMBERS_ADMIN', 'GROUP_AUTOMATION_ADMIN', 'GROUP_BACKUP_ADMIN', 'GROUP_MONITORING_ADMIN', 'GROUP_OWNER', 'GROUP_READ_ONLY', 'GROUP_USER_ADMIN', 'GROUP_BILLING_ADMIN', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_CHARTS_ADMIN', 'GROUP_CLUSTER_MANAGER', 'GROUP_SEARCH_INDEX_EDITOR'):
            raise ValueError("must validate the enum values ('GLOBAL_AUTOMATION_ADMIN', 'GLOBAL_BACKUP_ADMIN', 'GLOBAL_METERING_USER', 'GLOBAL_METRICS_INTERNAL_USER', 'GLOBAL_MONITORING_ADMIN', 'GLOBAL_OWNER', 'GLOBAL_READ_ONLY', 'GLOBAL_USER_ADMIN', 'GLOBAL_USER_READ_ONLY', 'GLOBAL_ACCOUNT_SUSPENSION_ADMIN', 'GLOBAL_BILLING_ADMIN', 'GLOBAL_LEGAL_ADMIN', 'GLOBAL_FEATURE_FLAG_ADMIN', 'GLOBAL_ATLAS_TSE', 'GLOBAL_ATLAS_OPERATOR', 'GLOBAL_ATLAS_MONGODB_ROLLOUT_ADMIN', 'GLOBAL_ATLAS_ADMIN', 'GLOBAL_STITCH_ADMIN', 'GLOBAL_CHARTS_ADMIN', 'GLOBAL_EXPERIMENT_ASSIGNMENT_USER', 'GLOBAL_STITCH_INTERNAL_ADMIN', 'GLOBAL_BAAS_FEATURE_ADMIN', 'GLOBAL_SECURITY_ADMIN', 'GLOBAL_QUERY_ENGINE_INTERNAL_ADMIN', 'GLOBAL_PROACTIVE_SUPPORT_ADMIN', 'GLOBAL_INFRASTRUCTURE_INTERNAL_ADMIN', 'GLOBAL_SALESFORCE_ADMIN', 'GLOBAL_SALESFORCE_READ_ONLY', 'GLOBAL_APP_SERVICES_CLUSTER_DEBUG_DATA_ACCESS', 'ORG_MEMBER', 'ORG_READ_ONLY', 'ORG_BILLING_ADMIN', 'ORG_GROUP_CREATOR', 'ORG_OWNER', 'ORG_TEAM_MEMBERS_ADMIN', 'GROUP_AUTOMATION_ADMIN', 'GROUP_BACKUP_ADMIN', 'GROUP_MONITORING_ADMIN', 'GROUP_OWNER', 'GROUP_READ_ONLY', 'GROUP_USER_ADMIN', 'GROUP_BILLING_ADMIN', 'GROUP_DATA_ACCESS_ADMIN', 'GROUP_DATA_ACCESS_READ_ONLY', 'GROUP_DATA_ACCESS_READ_WRITE', 'GROUP_CHARTS_ADMIN', 'GROUP_CLUSTER_MANAGER', 'GROUP_SEARCH_INDEX_EDITOR')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConnectedOrgConfigView:
        """Create an instance of ConnectedOrgConfigView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "org_id",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in role_mappings (list)
        _items = []
        if self.role_mappings:
            for _item in self.role_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roleMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_conflicts (list)
        _items = []
        if self.user_conflicts:
            for _item in self.user_conflicts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['userConflicts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConnectedOrgConfigView:
        """Create an instance of ConnectedOrgConfigView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ConnectedOrgConfigView.parse_obj(obj)

        _obj = ConnectedOrgConfigView.parse_obj({
            "domain_allow_list": obj.get("domainAllowList"),
            "domain_restriction_enabled": obj.get("domainRestrictionEnabled"),
            "identity_provider_id": obj.get("identityProviderId"),
            "org_id": obj.get("orgId"),
            "post_auth_role_grants": obj.get("postAuthRoleGrants"),
            "role_mappings": [RoleMappingView.from_dict(_item) for _item in obj.get("roleMappings")] if obj.get("roleMappings") is not None else None,
            "user_conflicts": [FederatedUserView.from_dict(_item) for _item in obj.get("userConflicts")] if obj.get("userConflicts") is not None else None
        })
        return _obj

