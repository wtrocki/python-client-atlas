# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from atlas.models.data_metric_threshold_view import DataMetricThresholdView
from atlas.models.raw_metric_threshold_view import RawMetricThresholdView
from atlas.models.rpu_metric_threshold_view import RPUMetricThresholdView
from atlas.models.time_metric_threshold_view import TimeMetricThresholdView
from typing import Any, List
from pydantic import StrictStr, Field

SERVERLESSMETRICTHRESHOLDVIEW_ONE_OF_SCHEMAS = ["DataMetricThresholdView", "RPUMetricThresholdView", "RawMetricThresholdView", "TimeMetricThresholdView"]

class ServerlessMetricThresholdView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: TimeMetricThresholdView
    oneof_schema_1_validator: Optional[TimeMetricThresholdView] = None
    # data type: RawMetricThresholdView
    oneof_schema_2_validator: Optional[RawMetricThresholdView] = None
    # data type: DataMetricThresholdView
    oneof_schema_3_validator: Optional[DataMetricThresholdView] = None
    # data type: RPUMetricThresholdView
    oneof_schema_4_validator: Optional[RPUMetricThresholdView] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(SERVERLESSMETRICTHRESHOLDVIEW_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: TimeMetricThresholdView
        if type(v) is not TimeMetricThresholdView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimeMetricThresholdView`")
        else:
            match += 1

        # validate data type: RawMetricThresholdView
        if type(v) is not RawMetricThresholdView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `RawMetricThresholdView`")
        else:
            match += 1

        # validate data type: DataMetricThresholdView
        if type(v) is not DataMetricThresholdView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataMetricThresholdView`")
        else:
            match += 1

        # validate data type: RPUMetricThresholdView
        if type(v) is not RPUMetricThresholdView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `RPUMetricThresholdView`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ServerlessMetricThresholdView with oneOf schemas: DataMetricThresholdView, RPUMetricThresholdView, RawMetricThresholdView, TimeMetricThresholdView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ServerlessMetricThresholdView with oneOf schemas: DataMetricThresholdView, RPUMetricThresholdView, RawMetricThresholdView, TimeMetricThresholdView. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ServerlessMetricThresholdView:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ServerlessMetricThresholdView:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("metricName")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `metricName` in the input.")

        # check if data type is `DataMetricThresholdView`
        if _data_type == "DataMetricThresholdView":
            instance.actual_instance = DataMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RPUMetricThresholdView`
        if _data_type == "RPUMetricThresholdView":
            instance.actual_instance = RPUMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "RawMetricThresholdView":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricThresholdView`
        if _data_type == "SERVERLESS_AVG_COMMAND_EXECUTION_TIME":
            instance.actual_instance = TimeMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricThresholdView`
        if _data_type == "SERVERLESS_AVG_READ_EXECUTION_TIME":
            instance.actual_instance = TimeMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricThresholdView`
        if _data_type == "SERVERLESS_AVG_WRITE_EXECUTION_TIME":
            instance.actual_instance = TimeMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_CONNECTIONS":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_CONNECTIONS_PERCENT":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `DataMetricThresholdView`
        if _data_type == "SERVERLESS_DATA_SIZE_TOTAL":
            instance.actual_instance = DataMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `DataMetricThresholdView`
        if _data_type == "SERVERLESS_NETWORK_BYTES_IN":
            instance.actual_instance = DataMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `DataMetricThresholdView`
        if _data_type == "SERVERLESS_NETWORK_BYTES_OUT":
            instance.actual_instance = DataMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_NETWORK_NUM_REQUESTS":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_CMD":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_DELETE":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_GETMORE":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_INSERT":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_QUERY":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RawMetricThresholdView`
        if _data_type == "SERVERLESS_OPCOUNTER_UPDATE":
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RPUMetricThresholdView`
        if _data_type == "SERVERLESS_TOTAL_READ_UNITS":
            instance.actual_instance = RPUMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `RPUMetricThresholdView`
        if _data_type == "SERVERLESS_TOTAL_WRITE_UNITS":
            instance.actual_instance = RPUMetricThresholdView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricThresholdView`
        if _data_type == "TimeMetricThresholdView":
            instance.actual_instance = TimeMetricThresholdView.from_json(json_str)
            return instance

        # deserialize data into TimeMetricThresholdView
        try:
            instance.actual_instance = TimeMetricThresholdView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into RawMetricThresholdView
        try:
            instance.actual_instance = RawMetricThresholdView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into DataMetricThresholdView
        try:
            instance.actual_instance = DataMetricThresholdView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into RPUMetricThresholdView
        try:
            instance.actual_instance = RPUMetricThresholdView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ServerlessMetricThresholdView with oneOf schemas: DataMetricThresholdView, RPUMetricThresholdView, RawMetricThresholdView, TimeMetricThresholdView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ServerlessMetricThresholdView with oneOf schemas: DataMetricThresholdView, RPUMetricThresholdView, RawMetricThresholdView, TimeMetricThresholdView. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

