# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator
from atlas.models.api_bson_timestamp_view import ApiBSONTimestampView
from atlas.models.disk_backup_base_restore_member import DiskBackupBaseRestoreMember
from atlas.models.link import Link

class DiskBackupRestoreJob(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cancelled: Optional[StrictBool] = Field(None, description="Flag that indicates whether someone canceled this restore job.")
    components: Optional[List[DiskBackupBaseRestoreMember]] = Field(None, description="Information on the restore job for each replica set in the sharded cluster.")
    delivery_type: StrictStr = Field(..., alias="deliveryType", description="Human-readable label that categorizes the restore job to create.")
    delivery_url: Optional[List[StrictStr]] = Field(None, alias="deliveryUrl", description="One or more Uniform Resource Locators (URLs) that point to the compressed snapshot files for manual download. MongoDB Cloud returns this parameter when `\"deliveryType\" : \"download\"`.")
    desired_timestamp: Optional[ApiBSONTimestampView] = Field(None, alias="desiredTimestamp")
    expired: Optional[StrictBool] = Field(None, description="Flag that indicates whether the restore job expired.")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt", description="Date and time when the restore job expires. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    failed: Optional[StrictBool] = Field(None, description="Flag that indicates whether the restore job failed.")
    finished_at: Optional[datetime] = Field(None, alias="finishedAt", description="Date and time when the restore job completed. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal character string that identifies the restore job.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    oplog_inc: Optional[conint(strict=True, ge=1)] = Field(None, alias="oplogInc", description="Oplog operation number from which you want to restore this snapshot. This number represents the second part of an Oplog timestamp. The resource returns this parameter when `\"deliveryType\" : \"pointInTime\"` and **oplogTs** exceeds `0`.")
    oplog_ts: Optional[conint(strict=True, ge=1199145600)] = Field(None, alias="oplogTs", description="Date and time from which you want to restore this snapshot. This parameter expresses this timestamp in the number of seconds that have elapsed since the UNIX epoch. This number represents the first part of an Oplog timestamp. The resource returns this parameter when `\"deliveryType\" : \"pointInTime\"` and **oplogTs** exceeds `0`.")
    point_in_time_utc_seconds: Optional[conint(strict=True, ge=1199145600)] = Field(None, alias="pointInTimeUTCSeconds", description="Date and time from which MongoDB Cloud restored this snapshot. This parameter expresses this timestamp in the number of seconds that have elapsed since the UNIX epoch. The resource returns this parameter when `\"deliveryType\" : \"pointInTime\"` and **pointInTimeUTCSeconds** exceeds `0`.")
    snapshot_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="snapshotId", description="Unique 24-hexadecimal character string that identifies the snapshot.")
    target_cluster_name: constr(strict=True, max_length=64, min_length=1) = Field(..., alias="targetClusterName", description="Human-readable label that identifies the target cluster to which the restore job restores the snapshot. The resource returns this parameter when `\"deliveryType\":` `\"automated\"`.")
    target_group_id: constr(strict=True, max_length=24, min_length=24) = Field(..., alias="targetGroupId", description="Unique 24-hexadecimal digit string that identifies the target project for the specified **targetClusterName**.")
    timestamp: Optional[datetime] = Field(None, description="Date and time when MongoDB Cloud took the snapshot associated with **snapshotId**. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    __properties = ["cancelled", "components", "deliveryType", "deliveryUrl", "desiredTimestamp", "expired", "expiresAt", "failed", "finishedAt", "id", "links", "oplogInc", "oplogTs", "pointInTimeUTCSeconds", "snapshotId", "targetClusterName", "targetGroupId", "timestamp"]

    @validator('delivery_type')
    def delivery_type_validate_enum(cls, v):
        if v not in ('automated', 'download', 'pointInTime'):
            raise ValueError("must validate the enum values ('automated', 'download', 'pointInTime')")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('snapshot_id')
    def snapshot_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('target_cluster_name')
    def target_cluster_name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('target_group_id')
    def target_group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiskBackupRestoreJob:
        """Create an instance of DiskBackupRestoreJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "cancelled",
                            "components",
                            "delivery_url",
                            "expired",
                            "expires_at",
                            "failed",
                            "finished_at",
                            "id",
                            "links",
                            "timestamp",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item in self.components:
                if _item:
                    _items.append(_item.to_dict())
            _dict['components'] = _items
        # override the default output from pydantic by calling `to_dict()` of desired_timestamp
        if self.desired_timestamp:
            _dict['desiredTimestamp'] = self.desired_timestamp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiskBackupRestoreJob:
        """Create an instance of DiskBackupRestoreJob from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DiskBackupRestoreJob.parse_obj(obj)

        _obj = DiskBackupRestoreJob.parse_obj({
            "cancelled": obj.get("cancelled"),
            "components": [DiskBackupBaseRestoreMember.from_dict(_item) for _item in obj.get("components")] if obj.get("components") is not None else None,
            "delivery_type": obj.get("deliveryType"),
            "delivery_url": obj.get("deliveryUrl"),
            "desired_timestamp": ApiBSONTimestampView.from_dict(obj.get("desiredTimestamp")) if obj.get("desiredTimestamp") is not None else None,
            "expired": obj.get("expired"),
            "expires_at": obj.get("expiresAt"),
            "failed": obj.get("failed"),
            "finished_at": obj.get("finishedAt"),
            "id": obj.get("id"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "oplog_inc": obj.get("oplogInc"),
            "oplog_ts": obj.get("oplogTs"),
            "point_in_time_utc_seconds": obj.get("pointInTimeUTCSeconds"),
            "snapshot_id": obj.get("snapshotId"),
            "target_cluster_name": obj.get("targetClusterName"),
            "target_group_id": obj.get("targetGroupId"),
            "timestamp": obj.get("timestamp")
        })
        return _obj

