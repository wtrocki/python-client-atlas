# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from atlas.models.serverless_backup_options import ServerlessBackupOptions
from atlas.models.serverless_provider_settings import ServerlessProviderSettings

class ServerlessInstanceDescriptionCreate(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    name: constr(strict=True, max_length=64, min_length=1) = Field(..., description="Human-readable label that identifies the serverless instance.")
    provider_settings: ServerlessProviderSettings = Field(..., alias="providerSettings")
    serverless_backup_options: Optional[ServerlessBackupOptions] = Field(None, alias="serverlessBackupOptions")
    state_name: Optional[StrictStr] = Field(None, alias="stateName", description="Human-readable label that indicates the current operating condition of the serverless instance.")
    termination_protection_enabled: Optional[StrictBool] = Field(False, alias="terminationProtectionEnabled", description="Flag that indicates whether termination protection is enabled on the serverless instance. If set to `true`, MongoDB Cloud won't delete the serverless instance. If set to `false`, MongoDB Cloud will delete the serverless instance.")
    __properties = ["name", "providerSettings", "serverlessBackupOptions", "stateName", "terminationProtectionEnabled"]

    @validator('name')
    def name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('state_name')
    def state_name_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('IDLE', 'CREATING', 'UPDATING', 'DELETING', 'DELETED', 'REPAIRING'):
            raise ValueError("must validate the enum values ('IDLE', 'CREATING', 'UPDATING', 'DELETING', 'DELETED', 'REPAIRING')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServerlessInstanceDescriptionCreate:
        """Create an instance of ServerlessInstanceDescriptionCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "state_name",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of provider_settings
        if self.provider_settings:
            _dict['providerSettings'] = self.provider_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serverless_backup_options
        if self.serverless_backup_options:
            _dict['serverlessBackupOptions'] = self.serverless_backup_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServerlessInstanceDescriptionCreate:
        """Create an instance of ServerlessInstanceDescriptionCreate from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ServerlessInstanceDescriptionCreate.parse_obj(obj)

        _obj = ServerlessInstanceDescriptionCreate.parse_obj({
            "name": obj.get("name"),
            "provider_settings": ServerlessProviderSettings.from_dict(obj.get("providerSettings")) if obj.get("providerSettings") is not None else None,
            "serverless_backup_options": ServerlessBackupOptions.from_dict(obj.get("serverlessBackupOptions")) if obj.get("serverlessBackupOptions") is not None else None,
            "state_name": obj.get("stateName"),
            "termination_protection_enabled": obj.get("terminationProtectionEnabled") if obj.get("terminationProtectionEnabled") is not None else False
        })
        return _obj

