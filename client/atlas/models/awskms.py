# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class AWSKMS(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    access_key_id: Optional[constr(strict=True, max_length=128, min_length=16)] = Field(None, alias="accessKeyID", description="Unique alphanumeric string that identifies an Identity and Access Management (IAM) access key with permissions required to access your Amazon Web Services (AWS) Customer Master Key (CMK).")
    customer_master_key_id: Optional[constr(strict=True, max_length=2048, min_length=1)] = Field(None, alias="customerMasterKeyID", description="Unique alphanumeric string that identifies the Amazon Web Services (AWS) Customer Master Key (CMK) you used to encrypt and decrypt the MongoDB master keys.")
    enabled: Optional[StrictBool] = Field(None, description="Flag that indicates whether someone enabled encryption at rest for the specified project through Amazon Web Services (AWS) Key Management Service (KMS). To disable encryption at rest using customer key management and remove the configuration details, pass only this parameter with a value of `false`.")
    region: Optional[StrictStr] = Field(None, description=" Physical location where MongoDB Cloud deploys your AWS-hosted MongoDB cluster nodes. The region you choose can affect network latency for clients accessing your databases. When MongoDB Cloud deploys a dedicated cluster, it checks if a VPC or VPC connection exists for that provider and region. If not, MongoDB Cloud creates them as part of the deployment. MongoDB Cloud assigns the VPC a CIDR block. To limit a new VPC peering connection to one CIDR block and region, create the connection first. Deploy the cluster after the connection starts.")
    role_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="roleId", description="Unique 24-hexadecimal digit string that identifies an Amazon Web Services (AWS) Identity and Access Management (IAM) role. This IAM role has the permissions required to manage your AWS customer master key.")
    secret_access_key: Optional[StrictStr] = Field(None, alias="secretAccessKey", description="Human-readable label of the Identity and Access Management (IAM) secret access key with permissions required to access your Amazon Web Services (AWS) customer master key.")
    valid: Optional[StrictBool] = Field(None, description="Flag that indicates whether the Amazon Web Services (AWS) Key Management Service (KMS) encryption key can encrypt and decrypt data.")
    __properties = ["accessKeyID", "customerMasterKeyID", "enabled", "region", "roleId", "secretAccessKey", "valid"]

    @validator('region')
    def region_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('US_GOV_WEST_1', 'US_GOV_EAST_1', 'US_EAST_1', 'US_EAST_2', 'US_WEST_1', 'US_WEST_2', 'CA_CENTRAL_1', 'EU_NORTH_1', 'EU_WEST_1', 'EU_WEST_2', 'EU_WEST_3', 'EU_CENTRAL_1', 'AP_EAST_1', 'AP_NORTHEAST_1', 'AP_NORTHEAST_2', 'AP_NORTHEAST_3', 'AP_SOUTHEAST_1', 'AP_SOUTHEAST_2', 'AP_SOUTHEAST_3', 'AP_SOUTH_1', 'SA_EAST_1', 'CN_NORTH_1', 'CN_NORTHWEST_1', 'ME_SOUTH_1', 'AF_SOUTH_1', 'EU_SOUTH_1', 'GLOBAL'):
            raise ValueError("must validate the enum values ('US_GOV_WEST_1', 'US_GOV_EAST_1', 'US_EAST_1', 'US_EAST_2', 'US_WEST_1', 'US_WEST_2', 'CA_CENTRAL_1', 'EU_NORTH_1', 'EU_WEST_1', 'EU_WEST_2', 'EU_WEST_3', 'EU_CENTRAL_1', 'AP_EAST_1', 'AP_NORTHEAST_1', 'AP_NORTHEAST_2', 'AP_NORTHEAST_3', 'AP_SOUTHEAST_1', 'AP_SOUTHEAST_2', 'AP_SOUTHEAST_3', 'AP_SOUTH_1', 'SA_EAST_1', 'CN_NORTH_1', 'CN_NORTHWEST_1', 'ME_SOUTH_1', 'AF_SOUTH_1', 'EU_SOUTH_1', 'GLOBAL')")
        return v

    @validator('role_id')
    def role_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AWSKMS:
        """Create an instance of AWSKMS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "valid",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AWSKMS:
        """Create an instance of AWSKMS from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AWSKMS.parse_obj(obj)

        _obj = AWSKMS.parse_obj({
            "access_key_id": obj.get("accessKeyID"),
            "customer_master_key_id": obj.get("customerMasterKeyID"),
            "enabled": obj.get("enabled"),
            "region": obj.get("region"),
            "role_id": obj.get("roleId"),
            "secret_access_key": obj.get("secretAccessKey"),
            "valid": obj.get("valid")
        })
        return _obj

