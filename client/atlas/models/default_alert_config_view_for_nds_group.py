# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from atlas.models.link import Link
from atlas.models.matcher_view import MatcherView
from atlas.models.notification_view_for_nds_group import NotificationViewForNdsGroup

class DefaultAlertConfigViewForNdsGroup(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    created: Optional[datetime] = Field(None, description="Date and time when MongoDB Cloud created the alert configuration. This parameter expresses its value in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")
    enabled: Optional[StrictBool] = Field(False, description="Flag that indicates whether someone enabled this alert configuration for the specified project.")
    event_type_name: StrictStr = Field(..., alias="eventTypeName", description="Incident that triggered this alert.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal digit string that identifies the project that owns this alert configuration.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies this alert configuration.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    matchers: Optional[List[MatcherView]] = None
    notifications: Optional[List[NotificationViewForNdsGroup]] = Field(None, description="List that contains the targets that MongoDB Cloud sends notifications.")
    updated: Optional[datetime] = Field(None, description="Date and time when someone last updated this alert configuration. This parameter expresses its value in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")
    __properties = ["created", "enabled", "eventTypeName", "groupId", "id", "links", "matchers", "notifications", "updated"]

    @validator('event_type_name')
    def event_type_name_validate_enum(cls, v):
        if v not in ('CREDIT_CARD_ABOUT_TO_EXPIRE', 'CPS_SNAPSHOT_SUCCESSFUL', 'CPS_SNAPSHOT_FALLBACK_SUCCESSFUL', 'CPS_SNAPSHOT_FALLBACK_FAILED', 'CPS_RESTORE_SUCCESSFUL', 'CPS_EXPORT_SUCCESSFUL', 'CPS_RESTORE_FAILED', 'CPS_EXPORT_FAILED', 'CPS_SNAPSHOT_DOWNLOAD_REQUEST_FAILED', 'FTS_INDEX_DELETION_FAILED', 'FTS_INDEX_BUILD_COMPLETE', 'FTS_INDEX_BUILD_FAILED', 'USERS_WITHOUT_MULTI_FACTOR_AUTH', 'USERS_WITHOUT_MULTIFACTOR_AUTH', 'MAX_M0_CLUSTERS_PER_GROUP_EXCEEDED', 'CLUSTER_INSTANCE_STOP_START', 'CLUSTER_INSTANCE_RESYNC_REQUESTED', 'CLUSTER_INSTANCE_UPDATE_REQUESTED', 'SAMPLE_DATASET_LOAD_REQUESTED', 'TENANT_UPGRADE_TO_SERVERLESS_SUCCESSFUL', 'TENANT_UPGRADE_TO_SERVERLESS_FAILED', 'MAINTENANCE_IN_ADVANCED', 'MAINTENANCE_AUTO_DEFERRED', 'MAINTENANCE_STARTED', 'MAINTENANCE_NO_LONGER_NEEDED', 'ONLINE_ARCHIVE_INSUFFICIENT_INDEXES_CHECK', 'ONLINE_ARCHIVE_MAX_CONSECUTIVE_OFFLOAD_WINDOWS_CHECK', 'JOINED_GROUP', 'REMOVED_FROM_GROUP', 'USER_ROLES_CHANGED_AUDIT'):
            raise ValueError("must validate the enum values ('CREDIT_CARD_ABOUT_TO_EXPIRE', 'CPS_SNAPSHOT_SUCCESSFUL', 'CPS_SNAPSHOT_FALLBACK_SUCCESSFUL', 'CPS_SNAPSHOT_FALLBACK_FAILED', 'CPS_RESTORE_SUCCESSFUL', 'CPS_EXPORT_SUCCESSFUL', 'CPS_RESTORE_FAILED', 'CPS_EXPORT_FAILED', 'CPS_SNAPSHOT_DOWNLOAD_REQUEST_FAILED', 'FTS_INDEX_DELETION_FAILED', 'FTS_INDEX_BUILD_COMPLETE', 'FTS_INDEX_BUILD_FAILED', 'USERS_WITHOUT_MULTI_FACTOR_AUTH', 'USERS_WITHOUT_MULTIFACTOR_AUTH', 'MAX_M0_CLUSTERS_PER_GROUP_EXCEEDED', 'CLUSTER_INSTANCE_STOP_START', 'CLUSTER_INSTANCE_RESYNC_REQUESTED', 'CLUSTER_INSTANCE_UPDATE_REQUESTED', 'SAMPLE_DATASET_LOAD_REQUESTED', 'TENANT_UPGRADE_TO_SERVERLESS_SUCCESSFUL', 'TENANT_UPGRADE_TO_SERVERLESS_FAILED', 'MAINTENANCE_IN_ADVANCED', 'MAINTENANCE_AUTO_DEFERRED', 'MAINTENANCE_STARTED', 'MAINTENANCE_NO_LONGER_NEEDED', 'ONLINE_ARCHIVE_INSUFFICIENT_INDEXES_CHECK', 'ONLINE_ARCHIVE_MAX_CONSECUTIVE_OFFLOAD_WINDOWS_CHECK', 'JOINED_GROUP', 'REMOVED_FROM_GROUP', 'USER_ROLES_CHANGED_AUDIT')")
        return v

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DefaultAlertConfigViewForNdsGroup:
        """Create an instance of DefaultAlertConfigViewForNdsGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created",
                            "group_id",
                            "id",
                            "links",
                            "updated",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matchers (list)
        _items = []
        if self.matchers:
            for _item in self.matchers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['matchers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notifications (list)
        _items = []
        if self.notifications:
            for _item in self.notifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DefaultAlertConfigViewForNdsGroup:
        """Create an instance of DefaultAlertConfigViewForNdsGroup from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DefaultAlertConfigViewForNdsGroup.parse_obj(obj)

        _obj = DefaultAlertConfigViewForNdsGroup.parse_obj({
            "created": obj.get("created"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "event_type_name": obj.get("eventTypeName"),
            "group_id": obj.get("groupId"),
            "id": obj.get("id"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "matchers": [MatcherView.from_dict(_item) for _item in obj.get("matchers")] if obj.get("matchers") is not None else None,
            "notifications": [NotificationViewForNdsGroup.from_dict(_item) for _item in obj.get("notifications")] if obj.get("notifications") is not None else None,
            "updated": obj.get("updated")
        })
        return _obj

