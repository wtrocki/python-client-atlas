# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class ServerlessAzureTenantEndpoint(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="_id", description="Unique 24-hexadecimal digit string that identifies the private endpoint.")
    cloud_provider_endpoint_id: Optional[constr(strict=True)] = Field(None, alias="cloudProviderEndpointId", description="Unique string that identifies the Azure private endpoint's network interface that someone added to this private endpoint service.")
    comment: Optional[constr(strict=True, max_length=80)] = Field(None, description="Human-readable comment associated with the private endpoint.")
    endpoint_service_name: Optional[constr(strict=True)] = Field(None, alias="endpointServiceName", description="Unique string that identifies the Azure private endpoint service. MongoDB Cloud returns null while it creates the endpoint service.")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="Human-readable error message that indicates error condition associated with establishing the private endpoint connection.")
    private_endpoint_ip_address: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="privateEndpointIpAddress", description="IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.")
    private_link_service_resource_id: Optional[StrictStr] = Field(None, alias="privateLinkServiceResourceId", description="Root-relative path that identifies the Azure Private Link Service that MongoDB Cloud manages. MongoDB Cloud returns null while it creates the endpoint service.")
    provider_name: Optional[StrictStr] = Field(None, alias="providerName", description="Human-readable label that identifies the cloud service provider.")
    status: Optional[StrictStr] = Field(None, description="Human-readable label that indicates the current operating status of the private endpoint.")
    __properties = ["_id", "cloudProviderEndpointId", "comment", "endpointServiceName", "errorMessage", "privateEndpointIpAddress", "privateLinkServiceResourceId", "providerName", "status"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('cloud_provider_endpoint_id')
    def cloud_provider_endpoint_id_validate_regular_expression(cls, v):
        if not re.match(r"^\/subscriptions\/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}\/resource[gG]roups\/private[Ll]ink\/providers\/Microsoft\.Network\/privateEndpoints\/[-\w._()]+)$", v):
            raise ValueError(r"must validate the regular expression /^\/subscriptions\/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}\/resource[gG]roups\/private[Ll]ink\/providers\/Microsoft\.Network\/privateEndpoints\/[-\w._()]+)$/")
        return v

    @validator('endpoint_service_name')
    def endpoint_service_name_validate_regular_expression(cls, v):
        if not re.match(r"^pls_[0-9a-f]{24}$", v):
            raise ValueError(r"must validate the regular expression /^pls_[0-9a-f]{24}$/")
        return v

    @validator('private_endpoint_ip_address')
    def private_endpoint_ip_address_validate_regular_expression(cls, v):
        if not re.match(r"^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}|([0-9a-f]{1,4}\:){7}[0-9a-f]{1,4}$", v):
            raise ValueError(r"must validate the regular expression /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)(\.(?!$)|$)){4}|([0-9a-f]{1,4}\:){7}[0-9a-f]{1,4}$/")
        return v

    @validator('provider_name')
    def provider_name_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AZURE'):
            raise ValueError("must validate the enum values ('AZURE')")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('RESERVATION_REQUESTED', 'RESERVED', 'INITIATING', 'AVAILABLE', 'FAILED', 'DELETING'):
            raise ValueError("must validate the enum values ('RESERVATION_REQUESTED', 'RESERVED', 'INITIATING', 'AVAILABLE', 'FAILED', 'DELETING')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServerlessAzureTenantEndpoint:
        """Create an instance of ServerlessAzureTenantEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "cloud_provider_endpoint_id",
                            "comment",
                            "endpoint_service_name",
                            "error_message",
                            "private_endpoint_ip_address",
                            "private_link_service_resource_id",
                            "provider_name",
                            "status",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServerlessAzureTenantEndpoint:
        """Create an instance of ServerlessAzureTenantEndpoint from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ServerlessAzureTenantEndpoint.parse_obj(obj)

        _obj = ServerlessAzureTenantEndpoint.parse_obj({
            "id": obj.get("_id"),
            "cloud_provider_endpoint_id": obj.get("cloudProviderEndpointId"),
            "comment": obj.get("comment"),
            "endpoint_service_name": obj.get("endpointServiceName"),
            "error_message": obj.get("errorMessage"),
            "private_endpoint_ip_address": obj.get("privateEndpointIpAddress"),
            "private_link_service_resource_id": obj.get("privateLinkServiceResourceId"),
            "provider_name": obj.get("providerName"),
            "status": obj.get("status")
        })
        return _obj

