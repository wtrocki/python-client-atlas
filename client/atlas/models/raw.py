# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class Raw(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    t: Optional[StrictStr] = Field(None, alias="_t", description="Unique identifier of event type.")
    alert_config_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="alertConfigId", description="Unique 24-hexadecimal digit string that identifies the alert configuration related to the event.")
    cid: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the project in which the event occurred.")
    cre: Optional[datetime] = Field(None, description="Date and time when this event occurred. This parameter expresses its value in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")
    description: Optional[StrictStr] = Field(None, description="Description of the event.")
    gn: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, description="Human-readable label that identifies the project.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the event.")
    org_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="orgId", description="Unique 24-hexadecimal digit string that identifies the organization to which these events apply.")
    org_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="orgName", description="Human-readable label that identifies the organization that contains the project.")
    severity: Optional[StrictStr] = None
    __properties = ["_t", "alertConfigId", "cid", "cre", "description", "gn", "id", "orgId", "orgName", "severity"]

    @validator('alert_config_id')
    def alert_config_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('cid')
    def cid_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('org_id')
    def org_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('severity')
    def severity_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('INFO', 'WARNING', 'ERROR'):
            raise ValueError("must validate the enum values ('INFO', 'WARNING', 'ERROR')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Raw:
        """Create an instance of Raw from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "alert_config_id",
                            "cid",
                            "cre",
                            "id",
                            "org_id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Raw:
        """Create an instance of Raw from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Raw.parse_obj(obj)

        _obj = Raw.parse_obj({
            "t": obj.get("_t"),
            "alert_config_id": obj.get("alertConfigId"),
            "cid": obj.get("cid"),
            "cre": obj.get("cre"),
            "description": obj.get("description"),
            "gn": obj.get("gn"),
            "id": obj.get("id"),
            "org_id": obj.get("orgId"),
            "org_name": obj.get("orgName"),
            "severity": obj.get("severity")
        })
        return _obj

