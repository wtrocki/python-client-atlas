# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from atlas.models.data_metric_alert_view import DataMetricAlertView
from atlas.models.number_metric_alert_view import NumberMetricAlertView
from atlas.models.raw_metric_alert_view import RawMetricAlertView
from atlas.models.time_metric_alert_view import TimeMetricAlertView
from typing import Any, List
from pydantic import StrictStr, Field

HOSTMETRICALERTVIEW_ONE_OF_SCHEMAS = ["DataMetricAlertView", "NumberMetricAlertView", "RawMetricAlertView", "TimeMetricAlertView"]

class HostMetricAlertView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: RawMetricAlertView
    oneof_schema_1_validator: Optional[RawMetricAlertView] = None
    # data type: TimeMetricAlertView
    oneof_schema_2_validator: Optional[TimeMetricAlertView] = None
    # data type: DataMetricAlertView
    oneof_schema_3_validator: Optional[DataMetricAlertView] = None
    # data type: NumberMetricAlertView
    oneof_schema_4_validator: Optional[NumberMetricAlertView] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(HOSTMETRICALERTVIEW_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: RawMetricAlertView
        if type(v) is not RawMetricAlertView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `RawMetricAlertView`")
        else:
            match += 1

        # validate data type: TimeMetricAlertView
        if type(v) is not TimeMetricAlertView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `TimeMetricAlertView`")
        else:
            match += 1

        # validate data type: DataMetricAlertView
        if type(v) is not DataMetricAlertView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataMetricAlertView`")
        else:
            match += 1

        # validate data type: NumberMetricAlertView
        if type(v) is not NumberMetricAlertView:
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberMetricAlertView`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into HostMetricAlertView with oneOf schemas: DataMetricAlertView, NumberMetricAlertView, RawMetricAlertView, TimeMetricAlertView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into HostMetricAlertView with oneOf schemas: DataMetricAlertView, NumberMetricAlertView, RawMetricAlertView, TimeMetricAlertView. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> HostMetricAlertView:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> HostMetricAlertView:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # use oneOf discriminator to lookup the data type
        _data_type = json.loads(json_str).get("metricName")
        if not _data_type:
            raise ValueError("Failed to lookup data type from the field `metricName` in the input.")

        # check if data type is `RawMetricAlertView`
        if _data_type == "ASSERT_MSG":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "ASSERT_REGULAR":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "ASSERT_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "ASSERT_WARNING":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "AVG_COMMAND_EXECUTION_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "AVG_READ_EXECUTION_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "AVG_WRITE_EXECUTION_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "BACKGROUND_FLUSH_AVG":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "CACHE_BYTES_READ_INTO":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "CACHE_BYTES_WRITTEN_FROM":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "CACHE_USAGE_DIRTY":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "CACHE_USAGE_USED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "COMPUTED_MEMORY":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CONNECTIONS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CONNECTIONS_MAX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CONNECTIONS_PERCENT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CURSORS_TOTAL_CLIENT_CURSORS_SIZE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CURSORS_TOTAL_OPEN":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "CURSORS_TOTAL_TIMED_OUT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "DB_DATA_SIZE_TOTAL":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "DB_DATA_SIZE_TOTAL_WO_SYSTEM":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "DB_INDEX_SIZE_TOTAL":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "DB_STORAGE_TOTAL":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_QUEUE_DEPTH_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_QUEUE_DEPTH_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_QUEUE_DEPTH_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_IOPS_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_IOPS_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_IOPS_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_LATENCY_DATA":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_LATENCY_INDEX":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_READ_LATENCY_JOURNAL":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_SPACE_USED_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_SPACE_USED_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_SPACE_USED_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_UTILIZATION_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_UTILIZATION_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_UTILIZATION_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_IOPS_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_IOPS_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_IOPS_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_LATENCY_DATA":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_LATENCY_INDEX":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "DISK_PARTITION_WRITE_LATENCY_JOURNAL":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DOCUMENT_DELETED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DOCUMENT_INSERTED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DOCUMENT_RETURNED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "DOCUMENT_UPDATED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "DataMetricAlertView":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "EXTRA_INFO_PAGE_FAULTS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_DISK_UTILIZATION":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_JVM_CURRENT_MEMORY":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_JVM_MAX_MEMORY":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_MEMORY_MAPPED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_MEMORY_RESIDENT":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "FTS_MEMORY_VIRTUAL":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "FTS_PROCESS_CPU_KERNEL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "FTS_PROCESS_CPU_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_ACCESSES_NOT_IN_MEMORY":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_LOCK_CURRENT_QUEUE_READERS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_LOCK_CURRENT_QUEUE_TOTAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_LOCK_CURRENT_QUEUE_WRITERS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_LOCK_PERCENTAGE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "INDEX_COUNTERS_BTREE_ACCESSES":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "INDEX_COUNTERS_BTREE_HITS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "INDEX_COUNTERS_BTREE_MISSES":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "INDEX_COUNTERS_BTREE_MISS_RATIO":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "JOURNALING_COMMITS_IN_WRITE_LOCK":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "JOURNALING_MB":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "JOURNALING_WRITE_DATA_FILES_MB":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "LOGICAL_SIZE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_QUEUE_DEPTH_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_QUEUE_DEPTH_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_QUEUE_DEPTH_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_IOPS_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_IOPS_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_IOPS_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_LATENCY_DATA":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_LATENCY_INDEX":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_READ_LATENCY_JOURNAL":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_SPACE_USED_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_SPACE_USED_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_SPACE_USED_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_UTILIZATION_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_UTILIZATION_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_UTILIZATION_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_IOPS_DATA":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_IOPS_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_IOPS_JOURNAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_LATENCY_DATA":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_LATENCY_INDEX":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "MAX_DISK_PARTITION_WRITE_LATENCY_JOURNAL":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_NORMALIZED_SYSTEM_CPU_STEAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_NORMALIZED_SYSTEM_CPU_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SWAP_USAGE_FREE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SWAP_USAGE_USED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SYSTEM_MEMORY_AVAILABLE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MAX_SYSTEM_MEMORY_PERCENT_USED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SYSTEM_MEMORY_USED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SYSTEM_NETWORK_IN":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MAX_SYSTEM_NETWORK_OUT":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MEMORY_MAPPED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MEMORY_RESIDENT":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "MEMORY_VIRTUAL":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_IOWAIT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_IRQ":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_NICE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_SOFTIRQ":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_STEAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_SYSTEM":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "MUNIN_CPU_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "NETWORK_BYTES_IN":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "NETWORK_BYTES_OUT":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "NETWORK_NUM_REQUESTS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "NORMALIZED_FTS_PROCESS_CPU_KERNEL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "NORMALIZED_FTS_PROCESS_CPU_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "NORMALIZED_SYSTEM_CPU_STEAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "NORMALIZED_SYSTEM_CPU_USER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `NumberMetricAlertView`
        if _data_type == "NumberMetricAlertView":
            instance.actual_instance = NumberMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_CMD":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_DELETE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_GETMORE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_INSERT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_QUERY":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_REPL_CMD":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_REPL_DELETE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_REPL_INSERT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_REPL_UPDATE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPCOUNTER_UPDATE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "OPERATIONS_SCAN_AND_ORDER":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "OPLOG_MASTER_LAG_TIME_DIFF":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "OPLOG_MASTER_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "OPLOG_MASTER_TIME_ESTIMATED_TTL":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "OPLOG_RATE_GB_PER_HOUR":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "OPLOG_REPLICATION_LAG_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "OPLOG_SLAVE_LAG_MASTER_TIME":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "QUERY_EXECUTOR_SCANNED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "QUERY_EXECUTOR_SCANNED_OBJECTS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "QUERY_TARGETING_SCANNED_PER_RETURNED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "RESTARTS_IN_LAST_HOUR":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "RawMetricAlertView":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SEARCH_INDEX_SIZE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `NumberMetricAlertView`
        if _data_type == "SEARCH_MAX_NUMBER_OF_LUCENE_DOCS":
            instance.actual_instance = NumberMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_NUMBER_OF_FIELDS_IN_INDEX":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_NUMBER_OF_QUERIES_ERROR":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_NUMBER_OF_QUERIES_SUCCESS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_NUMBER_OF_QUERIES_TOTAL":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_OPCOUNTER_DELETE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_OPCOUNTER_GETMORE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_OPCOUNTER_INSERT":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SEARCH_OPCOUNTER_UPDATE":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "SEARCH_REPLICATION_LAG":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SWAP_USAGE_FREE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SWAP_USAGE_USED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SYSTEM_MEMORY_AVAILABLE":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "SYSTEM_MEMORY_PERCENT_USED":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SYSTEM_MEMORY_USED":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SYSTEM_NETWORK_IN":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `DataMetricAlertView`
        if _data_type == "SYSTEM_NETWORK_OUT":
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "TICKETS_AVAILABLE_READS":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `RawMetricAlertView`
        if _data_type == "TICKETS_AVAILABLE_WRITES":
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            return instance

        # check if data type is `TimeMetricAlertView`
        if _data_type == "TimeMetricAlertView":
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            return instance

        # deserialize data into RawMetricAlertView
        try:
            instance.actual_instance = RawMetricAlertView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into TimeMetricAlertView
        try:
            instance.actual_instance = TimeMetricAlertView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into DataMetricAlertView
        try:
            instance.actual_instance = DataMetricAlertView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into NumberMetricAlertView
        try:
            instance.actual_instance = NumberMetricAlertView.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into HostMetricAlertView with oneOf schemas: DataMetricAlertView, NumberMetricAlertView, RawMetricAlertView, TimeMetricAlertView. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into HostMetricAlertView with oneOf schemas: DataMetricAlertView, NumberMetricAlertView, RawMetricAlertView, TimeMetricAlertView. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

