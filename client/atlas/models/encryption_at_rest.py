# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from atlas.models.awskms import AWSKMS
from atlas.models.azure_key_vault import AzureKeyVault
from atlas.models.google_cloud_kms import GoogleCloudKMS

class EncryptionAtRest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    aws_kms: Optional[AWSKMS] = Field(None, alias="awsKms")
    azure_key_vault: Optional[AzureKeyVault] = Field(None, alias="azureKeyVault")
    google_cloud_kms: Optional[GoogleCloudKMS] = Field(None, alias="googleCloudKms")
    __properties = ["awsKms", "azureKeyVault", "googleCloudKms"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EncryptionAtRest:
        """Create an instance of EncryptionAtRest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of aws_kms
        if self.aws_kms:
            _dict['awsKms'] = self.aws_kms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_key_vault
        if self.azure_key_vault:
            _dict['azureKeyVault'] = self.azure_key_vault.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_cloud_kms
        if self.google_cloud_kms:
            _dict['googleCloudKms'] = self.google_cloud_kms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EncryptionAtRest:
        """Create an instance of EncryptionAtRest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return EncryptionAtRest.parse_obj(obj)

        _obj = EncryptionAtRest.parse_obj({
            "aws_kms": AWSKMS.from_dict(obj.get("awsKms")) if obj.get("awsKms") is not None else None,
            "azure_key_vault": AzureKeyVault.from_dict(obj.get("azureKeyVault")) if obj.get("azureKeyVault") is not None else None,
            "google_cloud_kms": GoogleCloudKMS.from_dict(obj.get("googleCloudKms")) if obj.get("googleCloudKms") is not None else None
        })
        return _obj

