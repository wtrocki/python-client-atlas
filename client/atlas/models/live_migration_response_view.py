# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class LiveMigrationResponseView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="_id", description="Unique 24-hexadecimal digit string that identifies the migration job.")
    lag_time_seconds: Optional[StrictInt] = Field(None, alias="lagTimeSeconds", description="Replication lag between the source and destination clusters. Atlas returns this setting only during an active migration, before the cutover phase.")
    migration_hosts: Optional[List[constr(strict=True)]] = Field(None, alias="migrationHosts", description="List of hosts running MongoDB Agents. These Agents can transfer your MongoDB data between one source and one target cluster.")
    ready_for_cutover: Optional[StrictBool] = Field(None, alias="readyForCutover", description="Flag that indicates the migrated cluster can be cut over to MongoDB Atlas.")
    status: Optional[StrictStr] = Field(None, description="Progress made in migrating one cluster to MongoDB Atlas.  | Status   | Explanation | |----------|-------------| | NEW      | Someone scheduled a local cluster migration to MongoDB Atlas. | | FAILED   | The cluster migration to MongoDB Atlas failed.                | | COMPLETE | The cluster migration to MongoDB Atlas succeeded.             | | EXPIRED  | MongoDB Atlas prepares to begin the cut over of the migrating cluster when source and target clusters have almost synchronized. If `\"readyForCutover\" : true`, this synchronization starts a timer of 120 hours. You can extend this timer. If the timer expires, MongoDB Atlas returns this status. | | WORKING  | The cluster migration to MongoDB Atlas is performing one of the following tasks:<ul><li>Preparing connections to source and target clusters</li><li>Replicating data from source to target</li><li>Verifying MongoDB Atlas connection settings</li><li>Stopping replication after the cut over</li></ul> | ")
    __properties = ["_id", "lagTimeSeconds", "migrationHosts", "readyForCutover", "status"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NEW', 'WORKING', 'FAILED', 'COMPLETE', 'EXPIRED'):
            raise ValueError("must validate the enum values ('NEW', 'WORKING', 'FAILED', 'COMPLETE', 'EXPIRED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LiveMigrationResponseView:
        """Create an instance of LiveMigrationResponseView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "lag_time_seconds",
                            "migration_hosts",
                            "ready_for_cutover",
                            "status",
                          },
                          exclude_none=True)
        # set to None if lag_time_seconds (nullable) is None
        if self.lag_time_seconds is None:
            _dict['lagTimeSeconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LiveMigrationResponseView:
        """Create an instance of LiveMigrationResponseView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return LiveMigrationResponseView.parse_obj(obj)

        _obj = LiveMigrationResponseView.parse_obj({
            "id": obj.get("_id"),
            "lag_time_seconds": obj.get("lagTimeSeconds"),
            "migration_hosts": obj.get("migrationHosts"),
            "ready_for_cutover": obj.get("readyForCutover"),
            "status": obj.get("status")
        })
        return _obj

