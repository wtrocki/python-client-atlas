# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class ApiPrometheusView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    enabled: StrictBool = Field(..., description="Flag that indicates whether someone has activated the Prometheus integration.")
    listen_address: Optional[StrictStr] = Field(':9216', alias="listenAddress", description="Combination of IPv4 address and Internet Assigned Numbers Authority (IANA) port or the IANA port alone to which Prometheus binds to ingest MongoDB metrics.")
    password: Optional[StrictStr] = None
    rate_limit_interval: Optional[StrictInt] = Field(None, alias="rateLimitInterval")
    scheme: StrictStr = Field(..., description="Security Scheme to apply to HyperText Transfer Protocol (HTTP) traffic between Prometheus and MongoDB Cloud.")
    service_discovery: StrictStr = Field(..., alias="serviceDiscovery", description="Desired method to discover the Prometheus service.")
    tls_pem_path: Optional[StrictStr] = Field(None, alias="tlsPemPath", description="Root-relative path to the Transport Layer Security (TLS) Privacy Enhanced Mail (PEM) key and certificate file on the host.")
    type: Optional[StrictStr] = Field(None, description="Human-readable label that identifies the service to which you want to integrate with MongoDB Cloud. The value must match the third-party service integration type.")
    username: StrictStr = Field(..., description="Human-readable label that identifies your Prometheus incoming webhook.")
    __properties = ["enabled", "listenAddress", "password", "rateLimitInterval", "scheme", "serviceDiscovery", "tlsPemPath", "type", "username"]

    @validator('scheme')
    def scheme_validate_enum(cls, v):
        if v not in ('http', 'https'):
            raise ValueError("must validate the enum values ('http', 'https')")
        return v

    @validator('service_discovery')
    def service_discovery_validate_enum(cls, v):
        if v not in ('http', 'file'):
            raise ValueError("must validate the enum values ('http', 'file')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PROMETHEUS'):
            raise ValueError("must validate the enum values ('PROMETHEUS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiPrometheusView:
        """Create an instance of ApiPrometheusView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiPrometheusView:
        """Create an instance of ApiPrometheusView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiPrometheusView.parse_obj(obj)

        _obj = ApiPrometheusView.parse_obj({
            "enabled": obj.get("enabled"),
            "listen_address": obj.get("listenAddress") if obj.get("listenAddress") is not None else ':9216',
            "password": obj.get("password"),
            "rate_limit_interval": obj.get("rateLimitInterval"),
            "scheme": obj.get("scheme"),
            "service_discovery": obj.get("serviceDiscovery"),
            "tls_pem_path": obj.get("tlsPemPath"),
            "type": obj.get("type"),
            "username": obj.get("username")
        })
        return _obj

