# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class TokenFiltersnowballStemming(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    stemmer_name: StrictStr = Field(..., alias="stemmerName", description="Snowball-generated stemmer to use.")
    type: StrictStr = Field(..., description="Human-readable label that identifies this token filter type.")
    __properties = ["stemmerName", "type"]

    @validator('stemmer_name')
    def stemmer_name_validate_enum(cls, v):
        if v not in ('arabic', 'armenian', 'basque', 'catalan', 'danish', 'dutch', 'english', 'finnish', 'french', 'german', 'german2', 'hungarian', 'irish', 'italian', 'kp', 'lithuanian', 'lovins', 'norwegian', 'porter', 'portuguese', 'romanian', 'russian', 'spanish', 'swedish', 'turkish'):
            raise ValueError("must validate the enum values ('arabic', 'armenian', 'basque', 'catalan', 'danish', 'dutch', 'english', 'finnish', 'french', 'german', 'german2', 'hungarian', 'irish', 'italian', 'kp', 'lithuanian', 'lovins', 'norwegian', 'porter', 'portuguese', 'romanian', 'russian', 'spanish', 'swedish', 'turkish')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v not in ('snowballStemming'):
            raise ValueError("must validate the enum values ('snowballStemming')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenFiltersnowballStemming:
        """Create an instance of TokenFiltersnowballStemming from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenFiltersnowballStemming:
        """Create an instance of TokenFiltersnowballStemming from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TokenFiltersnowballStemming.parse_obj(obj)

        _obj = TokenFiltersnowballStemming.parse_obj({
            "stemmer_name": obj.get("stemmerName"),
            "type": obj.get("type")
        })
        return _obj

