# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conint, constr, validator
from atlas.models.link import Link

class UserCert(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[StrictInt] = Field(None, alias="_id", description="Unique 24-hexadecimal character string that identifies this certificate.")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="Date and time when MongoDB Cloud created this certificate. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal character string that identifies the project.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    months_until_expiration: Optional[conint(strict=True, le=24)] = Field(3, alias="monthsUntilExpiration", description="Number of months that the certificate remains valid until it expires.")
    not_after: Optional[datetime] = Field(None, alias="notAfter", description="Date and time when this certificate expires. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    subject: Optional[constr(strict=True)] = Field(None, description="Subject Alternative Name associated with this certificate. This parameter expresses its value as a distinguished name as defined in [RFC 2253](https://tools.ietf.org/html/2253).")
    __properties = ["_id", "createdAt", "groupId", "links", "monthsUntilExpiration", "notAfter", "subject"]

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('subject')
    def subject_validate_regular_expression(cls, v):
        if not re.match(r"^(?:(?<cn>CN=(?<name>[^,]*)),)?(?:(?<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?<domain>(?:DC=[^,]+,?)+)$", v):
            raise ValueError(r"must validate the regular expression /^(?:(?<cn>CN=(?<name>[^,]*)),)?(?:(?<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?<domain>(?:DC=[^,]+,?)+)$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserCert:
        """Create an instance of UserCert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "group_id",
                            "links",
                            "not_after",
                            "subject",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserCert:
        """Create an instance of UserCert from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UserCert.parse_obj(obj)

        _obj = UserCert.parse_obj({
            "id": obj.get("_id"),
            "created_at": obj.get("createdAt"),
            "group_id": obj.get("groupId"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "months_until_expiration": obj.get("monthsUntilExpiration") if obj.get("monthsUntilExpiration") is not None else 3,
            "not_after": obj.get("notAfter"),
            "subject": obj.get("subject")
        })
        return _obj

