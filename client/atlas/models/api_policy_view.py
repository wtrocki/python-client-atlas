# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, constr, validator
from atlas.models.api_policy_item_view import ApiPolicyItemView

class ApiPolicyView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies this backup policy.")
    policy_items: Optional[List[ApiPolicyItemView]] = Field(None, alias="policyItems", description="List that contains the specifications for one policy.")
    __properties = ["id", "policyItems"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiPolicyView:
        """Create an instance of ApiPolicyView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in policy_items (list)
        _items = []
        if self.policy_items:
            for _item in self.policy_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['policyItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiPolicyView:
        """Create an instance of ApiPolicyView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiPolicyView.parse_obj(obj)

        _obj = ApiPolicyView.parse_obj({
            "id": obj.get("id"),
            "policy_items": [ApiPolicyItemView.from_dict(_item) for _item in obj.get("policyItems")] if obj.get("policyItems") is not None else None
        })
        return _obj

