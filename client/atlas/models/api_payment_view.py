# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator

class ApiPaymentView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    amount_billed_cents: Optional[StrictInt] = Field(None, alias="amountBilledCents", description="Sum of services that the specified organization consumed in the period covered in this invoice. This parameter expresses its value in cents (100ths of one US Dollar) and calculates its value as **subtotalCents** + **salesTaxCents** - **startingBalanceCents**.")
    amount_paid_cents: Optional[StrictInt] = Field(None, alias="amountPaidCents", description="Sum that the specified organization paid toward the associated invoice. This parameter expresses its value in cents (100ths of one US Dollar).")
    created: Optional[datetime] = Field(None, description="Date and time when the customer made this payment attempt. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies this payment toward the associated invoice.")
    sales_tax_cents: Optional[StrictInt] = Field(None, alias="salesTaxCents", description="Sum of sales tax applied to this invoice. This parameter expresses its value in cents (100ths of one US Dollar).")
    status_name: Optional[StrictStr] = Field(None, alias="statusName", description="Phase of payment processing for the associated invoice when you made this request.  These phases include:  | Phase Value | Reason | |---|---| | `CANCELLED` | Customer or MongoDB cancelled the payment. | | `ERROR` | Issue arose when attempting to complete payment. | | `FAILED` | MongoDB tried to charge the credit card without success. | | `FAILED_AUTHENTICATION` | Strong Customer Authentication has failed. Confirm that your payment method is authenticated. | | `FORGIVEN` | Customer initiated payment which MongoDB later forgave. | | `INVOICED` | MongoDB issued an invoice that included this line item. | | `NEW` | Customer provided a method of payment, but MongoDB hasn't tried to charge the credit card. | | `PAID` | Customer submitted a successful payment. | | `PARTIAL_PAID` | Customer paid for part of this line item. | ")
    subtotal_cents: Optional[StrictInt] = Field(None, alias="subtotalCents", description="Sum of all positive invoice line items contained in this invoice. This parameter expresses its value in cents (100ths of one US Dollar).")
    updated: Optional[datetime] = Field(None, description="Date and time when the customer made an update to this payment attempt. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    __properties = ["amountBilledCents", "amountPaidCents", "created", "id", "salesTaxCents", "statusName", "subtotalCents", "updated"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('status_name')
    def status_name_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NEW', 'FORGIVEN', 'FAILED', 'PAID', 'PARTIAL_PAID', 'CANCELLED', 'INVOICED', 'ERROR', 'FAILED_AUTHENTICATION', 'PROCESSING', 'PENDING_REVERSAL'):
            raise ValueError("must validate the enum values ('NEW', 'FORGIVEN', 'FAILED', 'PAID', 'PARTIAL_PAID', 'CANCELLED', 'INVOICED', 'ERROR', 'FAILED_AUTHENTICATION', 'PROCESSING', 'PENDING_REVERSAL')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiPaymentView:
        """Create an instance of ApiPaymentView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "amount_billed_cents",
                            "amount_paid_cents",
                            "created",
                            "id",
                            "sales_tax_cents",
                            "subtotal_cents",
                            "updated",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiPaymentView:
        """Create an instance of ApiPaymentView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiPaymentView.parse_obj(obj)

        _obj = ApiPaymentView.parse_obj({
            "amount_billed_cents": obj.get("amountBilledCents"),
            "amount_paid_cents": obj.get("amountPaidCents"),
            "created": obj.get("created"),
            "id": obj.get("id"),
            "sales_tax_cents": obj.get("salesTaxCents"),
            "status_name": obj.get("statusName"),
            "subtotal_cents": obj.get("subtotalCents"),
            "updated": obj.get("updated")
        })
        return _obj

