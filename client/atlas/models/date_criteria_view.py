# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class DateCriteriaView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    date_field: Optional[StrictStr] = Field(None, alias="dateField", description="Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the **expireAfterDays** parameter. Set this parameter when you set `\"criteria.type\" : \"DATE\"`.")
    date_format: Optional[StrictStr] = Field('ISODATE', alias="dateFormat", description="Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when **\"criteria.type\" : \"DATE\"**. You must set **\"criteria.type\" : \"DATE\"** if **\"collectionType\": \"TIMESERIES\"**.")
    expire_after_days: Optional[StrictInt] = Field(None, alias="expireAfterDays", description="Number of days after the value in the **criteria.dateField** when MongoDB Cloud archives data in the specified cluster. Set this parameter when you set **\"criteria.type\" : \"DATE\"**.")
    type: Optional[StrictStr] = Field(None, description="Means by which MongoDB Cloud selects data to archive. Data can be chosen using the age of the data or a MongoDB query. **DATE** selects documents to archive based on a date. **CUSTOM** selects documents to archive based on a custom JSON query. MongoDB Cloud doesn't support **CUSTOM** when `\"collectionType\": \"TIMESERIES\"`.")
    __properties = ["dateField", "dateFormat", "expireAfterDays", "type"]

    @validator('date_format')
    def date_format_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('ISODATE', 'EPOCH_SECONDS', 'EPOCH_MILLIS', 'EPOCH_NANOSECONDS'):
            raise ValueError("must validate the enum values ('ISODATE', 'EPOCH_SECONDS', 'EPOCH_MILLIS', 'EPOCH_NANOSECONDS')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('DATE', 'CUSTOM'):
            raise ValueError("must validate the enum values ('DATE', 'CUSTOM')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateCriteriaView:
        """Create an instance of DateCriteriaView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateCriteriaView:
        """Create an instance of DateCriteriaView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DateCriteriaView.parse_obj(obj)

        _obj = DateCriteriaView.parse_obj({
            "date_field": obj.get("dateField"),
            "date_format": obj.get("dateFormat") if obj.get("dateFormat") is not None else 'ISODATE',
            "expire_after_days": obj.get("expireAfterDays"),
            "type": obj.get("type")
        })
        return _obj

