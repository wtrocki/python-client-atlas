# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, validator
from atlas.models.partition_field import PartitionField

class DLSIngestionSink(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    metadata_provider: Optional[StrictStr] = Field(None, alias="metadataProvider", description="Target cloud provider for this Data Lake Pipeline.")
    metadata_region: Optional[StrictStr] = Field(None, alias="metadataRegion", description="Target cloud provider region for this Data Lake Pipeline.")
    partition_fields: Optional[List[PartitionField]] = Field(None, alias="partitionFields", description="Ordered fields used to physically organize data in the destination.")
    type: Optional[StrictStr] = Field(None, description="Type of ingestion destination of this Data Lake Pipeline.")
    __properties = ["metadataProvider", "metadataRegion", "partitionFields", "type"]

    @validator('metadata_provider')
    def metadata_provider_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AWS'):
            raise ValueError("must validate the enum values ('AWS')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('DLS'):
            raise ValueError("must validate the enum values ('DLS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DLSIngestionSink:
        """Create an instance of DLSIngestionSink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in partition_fields (list)
        _items = []
        if self.partition_fields:
            for _item in self.partition_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['partitionFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DLSIngestionSink:
        """Create an instance of DLSIngestionSink from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DLSIngestionSink.parse_obj(obj)

        _obj = DLSIngestionSink.parse_obj({
            "metadata_provider": obj.get("metadataProvider"),
            "metadata_region": obj.get("metadataRegion"),
            "partition_fields": [PartitionField.from_dict(_item) for _item in obj.get("partitionFields")] if obj.get("partitionFields") is not None else None,
            "type": obj.get("type")
        })
        return _obj

