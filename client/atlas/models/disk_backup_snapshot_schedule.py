# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist, constr, validator
from atlas.models.api_delete_copied_backups_view import ApiDeleteCopiedBackupsView
from atlas.models.api_policy_view import ApiPolicyView
from atlas.models.auto_export_policy_view import AutoExportPolicyView
from atlas.models.disk_backup_copy_setting import DiskBackupCopySetting
from atlas.models.link import Link

class DiskBackupSnapshotSchedule(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    auto_export_enabled: Optional[StrictBool] = Field(None, alias="autoExportEnabled", description="Flag that indicates whether MongoDB Cloud automatically exports cloud backup snapshots to the AWS bucket.")
    cluster_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="clusterId", description="Unique 24-hexadecimal digit string that identifies the cluster with the snapshot you want to return.")
    cluster_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="clusterName", description="Human-readable label that identifies the cluster with the snapshot you want to return.")
    copy_settings: Optional[List[DiskBackupCopySetting]] = Field(None, alias="copySettings", description="List that contains a document for each copy setting item in the desired backup policy.")
    delete_copied_backups: Optional[List[ApiDeleteCopiedBackupsView]] = Field(None, alias="deleteCopiedBackups", description="List that contains a document for each deleted copy setting whose backup copies you want to delete.")
    export: Optional[AutoExportPolicyView] = None
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    next_snapshot: Optional[datetime] = Field(None, alias="nextSnapshot", description="Date and time when MongoDB Cloud takes the next snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    policies: Optional[conlist(ApiPolicyView, max_items=1)] = Field(None, description="Rules set for this backup schedule.")
    reference_hour_of_day: Optional[StrictInt] = Field(None, alias="referenceHourOfDay", description="Hour of day in Coordinated Universal Time (UTC) that represents when MongoDB Cloud takes the snapshot.")
    reference_minute_of_hour: Optional[StrictInt] = Field(None, alias="referenceMinuteOfHour", description="Minute of the **referenceHourOfDay** that represents when MongoDB Cloud takes the snapshot.")
    restore_window_days: Optional[StrictInt] = Field(None, alias="restoreWindowDays", description="Number of previous days that you can restore back to with Continuous Cloud Backup accuracy. You must specify a positive, non-zero integer. This parameter applies to continuous cloud backups only.")
    update_snapshots: Optional[StrictBool] = Field(None, alias="updateSnapshots", description="Flag that indicates whether to apply the retention changes in the updated backup policy to snapshots that MongoDB Cloud took previously.")
    use_org_and_group_names_in_export_prefix: Optional[StrictBool] = Field(None, alias="useOrgAndGroupNamesInExportPrefix", description="Flag that indicates whether to use organization and project names instead of organization and project UUIDs in the path to the metadata files that MongoDB Cloud uploads to your AWS bucket.")
    __properties = ["autoExportEnabled", "clusterId", "clusterName", "copySettings", "deleteCopiedBackups", "export", "links", "nextSnapshot", "policies", "referenceHourOfDay", "referenceMinuteOfHour", "restoreWindowDays", "updateSnapshots", "useOrgAndGroupNamesInExportPrefix"]

    @validator('cluster_id')
    def cluster_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('cluster_name')
    def cluster_name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiskBackupSnapshotSchedule:
        """Create an instance of DiskBackupSnapshotSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "cluster_id",
                            "cluster_name",
                            "links",
                            "next_snapshot",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in copy_settings (list)
        _items = []
        if self.copy_settings:
            for _item in self.copy_settings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['copySettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in delete_copied_backups (list)
        _items = []
        if self.delete_copied_backups:
            for _item in self.delete_copied_backups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deleteCopiedBackups'] = _items
        # override the default output from pydantic by calling `to_dict()` of export
        if self.export:
            _dict['export'] = self.export.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item in self.policies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiskBackupSnapshotSchedule:
        """Create an instance of DiskBackupSnapshotSchedule from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DiskBackupSnapshotSchedule.parse_obj(obj)

        _obj = DiskBackupSnapshotSchedule.parse_obj({
            "auto_export_enabled": obj.get("autoExportEnabled"),
            "cluster_id": obj.get("clusterId"),
            "cluster_name": obj.get("clusterName"),
            "copy_settings": [DiskBackupCopySetting.from_dict(_item) for _item in obj.get("copySettings")] if obj.get("copySettings") is not None else None,
            "delete_copied_backups": [ApiDeleteCopiedBackupsView.from_dict(_item) for _item in obj.get("deleteCopiedBackups")] if obj.get("deleteCopiedBackups") is not None else None,
            "export": AutoExportPolicyView.from_dict(obj.get("export")) if obj.get("export") is not None else None,
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "next_snapshot": obj.get("nextSnapshot"),
            "policies": [ApiPolicyView.from_dict(_item) for _item in obj.get("policies")] if obj.get("policies") is not None else None,
            "reference_hour_of_day": obj.get("referenceHourOfDay"),
            "reference_minute_of_hour": obj.get("referenceMinuteOfHour"),
            "restore_window_days": obj.get("restoreWindowDays"),
            "update_snapshots": obj.get("updateSnapshots"),
            "use_org_and_group_names_in_export_prefix": obj.get("useOrgAndGroupNamesInExportPrefix")
        })
        return _obj

