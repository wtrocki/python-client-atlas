# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class PrivateNetworkEndpointIdEntry(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    comment: Optional[StrictStr] = Field(None, description="Human-readable string to associate with this private endpoint.")
    endpoint_id: constr(strict=True, max_length=22, min_length=22) = Field(..., alias="endpointId", description="Unique 22-character alphanumeric string that identifies the private endpoint.")
    provider: Optional[StrictStr] = Field('AWS', description="Human-readable label that identifies the cloud service provider. Atlas Data Lake supports Amazon Web Services only.")
    type: Optional[StrictStr] = Field('DATA_LAKE', description="Human-readable label that identifies the resource type associated with this private endpoint.")
    __properties = ["comment", "endpointId", "provider", "type"]

    @validator('endpoint_id')
    def endpoint_id_validate_regular_expression(cls, v):
        if not re.match(r"^vpce-[0-9a-f]{17}$", v):
            raise ValueError(r"must validate the regular expression /^vpce-[0-9a-f]{17}$/")
        return v

    @validator('provider')
    def provider_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('AWS'):
            raise ValueError("must validate the enum values ('AWS')")
        return v

    @validator('type')
    def type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('DATA_LAKE'):
            raise ValueError("must validate the enum values ('DATA_LAKE')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PrivateNetworkEndpointIdEntry:
        """Create an instance of PrivateNetworkEndpointIdEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PrivateNetworkEndpointIdEntry:
        """Create an instance of PrivateNetworkEndpointIdEntry from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PrivateNetworkEndpointIdEntry.parse_obj(obj)

        _obj = PrivateNetworkEndpointIdEntry.parse_obj({
            "comment": obj.get("comment"),
            "endpoint_id": obj.get("endpointId"),
            "provider": obj.get("provider") if obj.get("provider") is not None else 'AWS',
            "type": obj.get("type") if obj.get("type") is not None else 'DATA_LAKE'
        })
        return _obj

