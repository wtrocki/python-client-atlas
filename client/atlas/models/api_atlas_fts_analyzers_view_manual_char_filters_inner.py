# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from atlas.models.char_filterhtml_strip import CharFilterhtmlStrip
from atlas.models.char_filtericu_normalize import CharFiltericuNormalize
from atlas.models.char_filtermapping import CharFiltermapping
from atlas.models.char_filterpersian import CharFilterpersian
from typing import Any, List
from pydantic import StrictStr, Field

APIATLASFTSANALYZERSVIEWMANUALCHARFILTERSINNER_ONE_OF_SCHEMAS = ["CharFilterhtmlStrip", "CharFiltericuNormalize", "CharFiltermapping", "CharFilterpersian"]

class ApiAtlasFTSAnalyzersViewManualCharFiltersInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    # data type: CharFilterhtmlStrip
    oneof_schema_1_validator: Optional[CharFilterhtmlStrip] = None
    # data type: CharFiltericuNormalize
    oneof_schema_2_validator: Optional[CharFiltericuNormalize] = None
    # data type: CharFiltermapping
    oneof_schema_3_validator: Optional[CharFiltermapping] = None
    # data type: CharFilterpersian
    oneof_schema_4_validator: Optional[CharFilterpersian] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(APIATLASFTSANALYZERSVIEWMANUALCHARFILTERSINNER_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = cls()
        error_messages = []
        match = 0
        # validate data type: CharFilterhtmlStrip
        if type(v) is not CharFilterhtmlStrip:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CharFilterhtmlStrip`")
        else:
            match += 1

        # validate data type: CharFiltericuNormalize
        if type(v) is not CharFiltericuNormalize:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CharFiltericuNormalize`")
        else:
            match += 1

        # validate data type: CharFiltermapping
        if type(v) is not CharFiltermapping:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CharFiltermapping`")
        else:
            match += 1

        # validate data type: CharFilterpersian
        if type(v) is not CharFilterpersian:
            error_messages.append(f"Error! Input type `{type(v)}` is not `CharFilterpersian`")
        else:
            match += 1

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ApiAtlasFTSAnalyzersViewManualCharFiltersInner with oneOf schemas: CharFilterhtmlStrip, CharFiltericuNormalize, CharFiltermapping, CharFilterpersian. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ApiAtlasFTSAnalyzersViewManualCharFiltersInner with oneOf schemas: CharFilterhtmlStrip, CharFiltericuNormalize, CharFiltermapping, CharFilterpersian. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ApiAtlasFTSAnalyzersViewManualCharFiltersInner:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ApiAtlasFTSAnalyzersViewManualCharFiltersInner:
        """Returns the object represented by the json string"""
        instance = cls()
        error_messages = []
        match = 0

        # deserialize data into CharFilterhtmlStrip
        try:
            instance.actual_instance = CharFilterhtmlStrip.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into CharFiltericuNormalize
        try:
            instance.actual_instance = CharFiltericuNormalize.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into CharFiltermapping
        try:
            instance.actual_instance = CharFiltermapping.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))
        # deserialize data into CharFilterpersian
        try:
            instance.actual_instance = CharFilterpersian.from_json(json_str)
            match += 1
        except ValidationError as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ApiAtlasFTSAnalyzersViewManualCharFiltersInner with oneOf schemas: CharFilterhtmlStrip, CharFiltericuNormalize, CharFiltermapping, CharFilterpersian. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ApiAtlasFTSAnalyzersViewManualCharFiltersInner with oneOf schemas: CharFilterhtmlStrip, CharFiltericuNormalize, CharFiltermapping, CharFilterpersian. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_json()
        else:
            return "null"

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is not None:
            return self.actual_instance.to_dict()
        else:
            return dict()

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

