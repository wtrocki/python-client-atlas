# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, constr, validator
from atlas.models.api_fts_metric_view import ApiFTSMetricView
from atlas.models.link import Link

class ApiFTSMetricsView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    group_id: constr(strict=True, max_length=24, min_length=24) = Field(..., alias="groupId", description="Unique 24-hexadecimal digit string that identifies the project.")
    hardware_metrics: Optional[List[ApiFTSMetricView]] = Field(None, alias="hardwareMetrics", description="List that contains all host compute, memory, and storage utilization dedicated to Atlas Search when MongoDB Atlas received this request.")
    index_metrics: Optional[List[ApiFTSMetricView]] = Field(None, alias="indexMetrics", description="List that contains all performance and utilization measurements that Atlas Search index performed by the time MongoDB Atlas received this request.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    process_id: constr(strict=True) = Field(..., alias="processId", description="Hostname and port that identifies the process.")
    status_metrics: Optional[List[ApiFTSMetricView]] = Field(None, alias="statusMetrics", description="List that contains all available Atlas Search status metrics when MongoDB Atlas received this request.")
    __properties = ["groupId", "hardwareMetrics", "indexMetrics", "links", "processId", "statusMetrics"]

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('process_id')
    def process_id_validate_regular_expression(cls, v):
        if not re.match(r"^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$", v):
            raise ValueError(r"must validate the regular expression /^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiFTSMetricsView:
        """Create an instance of ApiFTSMetricsView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "group_id",
                            "hardware_metrics",
                            "index_metrics",
                            "links",
                            "process_id",
                            "status_metrics",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in hardware_metrics (list)
        _items = []
        if self.hardware_metrics:
            for _item in self.hardware_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hardwareMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in index_metrics (list)
        _items = []
        if self.index_metrics:
            for _item in self.index_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['indexMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in status_metrics (list)
        _items = []
        if self.status_metrics:
            for _item in self.status_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statusMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiFTSMetricsView:
        """Create an instance of ApiFTSMetricsView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiFTSMetricsView.parse_obj(obj)

        _obj = ApiFTSMetricsView.parse_obj({
            "group_id": obj.get("groupId"),
            "hardware_metrics": [ApiFTSMetricView.from_dict(_item) for _item in obj.get("hardwareMetrics")] if obj.get("hardwareMetrics") is not None else None,
            "index_metrics": [ApiFTSMetricView.from_dict(_item) for _item in obj.get("indexMetrics")] if obj.get("indexMetrics") is not None else None,
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "process_id": obj.get("processId"),
            "status_metrics": [ApiFTSMetricView.from_dict(_item) for _item in obj.get("statusMetrics")] if obj.get("statusMetrics") is not None else None
        })
        return _obj

