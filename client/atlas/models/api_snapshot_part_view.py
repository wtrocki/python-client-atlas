# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, constr, validator

class ApiSnapshotPartView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cluster_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="clusterId", description="Unique 24-hexadecimal digit string that identifies the cluster with the snapshots you want to return.")
    compression_setting: Optional[StrictStr] = Field(None, alias="compressionSetting", description="Human-readable label that identifies the method of compression for the snapshot.")
    data_size_bytes: Optional[StrictInt] = Field(None, alias="dataSizeBytes", description="Total size of the data stored on each node in the cluster. This parameter expresses its value in bytes.")
    encryption_enabled: Optional[StrictBool] = Field(None, alias="encryptionEnabled", description="Flag that indicates whether someone encrypted this snapshot.")
    file_size_bytes: Optional[StrictInt] = Field(None, alias="fileSizeBytes", description="Number that indicates the total size of the data files in bytes.")
    master_key_uuid: Optional[StrictStr] = Field(None, alias="masterKeyUUID", description="Unique string that identifies the Key Management Interoperability (KMIP) master key used to encrypt the snapshot data. The resource returns this parameter when `\"parts.encryptionEnabled\" : true`.")
    mongod_version: Optional[constr(strict=True)] = Field(None, alias="mongodVersion", description="Number that indicates the version of MongoDB that the replica set primary ran when MongoDB Cloud created the snapshot.")
    replica_set_name: Optional[StrictStr] = Field(None, alias="replicaSetName", description="Human-readable label that identifies the replica set.")
    storage_size_bytes: Optional[StrictInt] = Field(None, alias="storageSizeBytes", description="Number that indicates the total size of space allocated for document storage.")
    type_name: Optional[StrictStr] = Field(None, alias="typeName", description="Human-readable label that identifies the type of server from which MongoDB Cloud took this snapshot.")
    __properties = ["clusterId", "compressionSetting", "dataSizeBytes", "encryptionEnabled", "fileSizeBytes", "masterKeyUUID", "mongodVersion", "replicaSetName", "storageSizeBytes", "typeName"]

    @validator('cluster_id')
    def cluster_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('compression_setting')
    def compression_setting_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NONE', 'GZIP'):
            raise ValueError("must validate the enum values ('NONE', 'GZIP')")
        return v

    @validator('mongod_version')
    def mongod_version_validate_regular_expression(cls, v):
        if not re.match(r"([\d]+\.[\d]+\.[\d]+)", v):
            raise ValueError(r"must validate the regular expression /([\d]+\.[\d]+\.[\d]+)/")
        return v

    @validator('type_name')
    def type_name_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('REPLICA_SET', 'CONFIG_SERVER', 'CONFIG_SERVER_REPLICA_SET'):
            raise ValueError("must validate the enum values ('REPLICA_SET', 'CONFIG_SERVER', 'CONFIG_SERVER_REPLICA_SET')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiSnapshotPartView:
        """Create an instance of ApiSnapshotPartView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "cluster_id",
                            "compression_setting",
                            "data_size_bytes",
                            "encryption_enabled",
                            "file_size_bytes",
                            "master_key_uuid",
                            "mongod_version",
                            "replica_set_name",
                            "storage_size_bytes",
                            "type_name",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiSnapshotPartView:
        """Create an instance of ApiSnapshotPartView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiSnapshotPartView.parse_obj(obj)

        _obj = ApiSnapshotPartView.parse_obj({
            "cluster_id": obj.get("clusterId"),
            "compression_setting": obj.get("compressionSetting"),
            "data_size_bytes": obj.get("dataSizeBytes"),
            "encryption_enabled": obj.get("encryptionEnabled"),
            "file_size_bytes": obj.get("fileSizeBytes"),
            "master_key_uuid": obj.get("masterKeyUUID"),
            "mongod_version": obj.get("mongodVersion"),
            "replica_set_name": obj.get("replicaSetName"),
            "storage_size_bytes": obj.get("storageSizeBytes"),
            "type_name": obj.get("typeName")
        })
        return _obj

