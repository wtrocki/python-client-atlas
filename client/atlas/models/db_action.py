# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, validator
from atlas.models.db_resource import DBResource

class DBAction(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    action: StrictStr = Field(..., description="Human-readable label that identifies the privilege action.")
    resources: Optional[List[DBResource]] = Field(None, description="List of resources on which you grant the action.")
    __properties = ["action", "resources"]

    @validator('action')
    def action_validate_enum(cls, v):
        if v not in ('FIND', 'INSERT', 'REMOVE', 'UPDATE', 'BYPASS_DOCUMENT_VALIDATION', 'USE_UUID', 'KILL_OP', 'CREATE_COLLECTION', 'CREATE_INDEX', 'DROP_COLLECTION', 'ENABLE_PROFILER', 'CHANGE_STREAM', 'COLL_MOD', 'COMPACT', 'CONVERT_TO_CAPPED', 'DROP_DATABASE', 'DROP_INDEX', 'RE_INDEX', 'RENAME_COLLECTION_SAME_DB', 'SET_USER_WRITE_BLOCK', 'BYPASS_USER_WRITE_BLOCK', 'LIST_SESSIONS', 'KILL_ANY_SESSION', 'COLL_STATS', 'CONN_POOL_STATS', 'DB_HASH', 'DB_STATS', 'GET_CMD_LINE_OPTS', 'GET_LOG', 'GET_PARAMETER', 'GET_SHARD_MAP', 'HOST_INFO', 'IN_PROG', 'LIST_DATABASES', 'LIST_COLLECTIONS', 'LIST_INDEXES', 'LIST_SHARDS', 'NET_STAT', 'REPL_SET_GET_CONFIG', 'REPL_SET_GET_STATUS', 'SERVER_STATUS', 'VALIDATE', 'SHARDING_STATE', 'TOP', 'SQL_GET_SCHEMA', 'SQL_SET_SCHEMA', 'VIEW_ALL_HISTORY', 'OUT_TO_S3', 'STORAGE_GET_CONFIG', 'STORAGE_SET_CONFIG', 'FLUSH_ROUTER_CONFIG'):
            raise ValueError("must validate the enum values ('FIND', 'INSERT', 'REMOVE', 'UPDATE', 'BYPASS_DOCUMENT_VALIDATION', 'USE_UUID', 'KILL_OP', 'CREATE_COLLECTION', 'CREATE_INDEX', 'DROP_COLLECTION', 'ENABLE_PROFILER', 'CHANGE_STREAM', 'COLL_MOD', 'COMPACT', 'CONVERT_TO_CAPPED', 'DROP_DATABASE', 'DROP_INDEX', 'RE_INDEX', 'RENAME_COLLECTION_SAME_DB', 'SET_USER_WRITE_BLOCK', 'BYPASS_USER_WRITE_BLOCK', 'LIST_SESSIONS', 'KILL_ANY_SESSION', 'COLL_STATS', 'CONN_POOL_STATS', 'DB_HASH', 'DB_STATS', 'GET_CMD_LINE_OPTS', 'GET_LOG', 'GET_PARAMETER', 'GET_SHARD_MAP', 'HOST_INFO', 'IN_PROG', 'LIST_DATABASES', 'LIST_COLLECTIONS', 'LIST_INDEXES', 'LIST_SHARDS', 'NET_STAT', 'REPL_SET_GET_CONFIG', 'REPL_SET_GET_STATUS', 'SERVER_STATUS', 'VALIDATE', 'SHARDING_STATE', 'TOP', 'SQL_GET_SCHEMA', 'SQL_SET_SCHEMA', 'VIEW_ALL_HISTORY', 'OUT_TO_S3', 'STORAGE_GET_CONFIG', 'STORAGE_SET_CONFIG', 'FLUSH_ROUTER_CONFIG')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DBAction:
        """Create an instance of DBAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DBAction:
        """Create an instance of DBAction from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DBAction.parse_obj(obj)

        _obj = DBAction.parse_obj({
            "action": obj.get("action"),
            "resources": [DBResource.from_dict(_item) for _item in obj.get("resources")] if obj.get("resources") is not None else None
        })
        return _obj

