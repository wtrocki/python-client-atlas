# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class SampleDatasetStatus(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="_id", description="Unique 24-hexadecimal character string that identifies this sample dataset.")
    cluster_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="clusterName", description="Human-readable label that identifies the cluster into which you loaded the sample dataset.")
    complete_date: Optional[datetime] = Field(None, alias="completeDate", description="Date and time when the sample dataset load job completed. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.")
    create_date: Optional[datetime] = Field(None, alias="createDate", description="Date and time when you started the sample dataset load job. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="Details of the error returned when MongoDB Cloud loads the sample dataset. This endpoint returns null if state has a value other than FAILED.")
    state: Optional[StrictStr] = Field(None, description="Status of the sample dataset load job.")
    __properties = ["_id", "clusterName", "completeDate", "createDate", "errorMessage", "state"]

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('cluster_name')
    def cluster_name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('state')
    def state_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('WORKING', 'FAILED', 'COMPLETED'):
            raise ValueError("must validate the enum values ('WORKING', 'FAILED', 'COMPLETED')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SampleDatasetStatus:
        """Create an instance of SampleDatasetStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "cluster_name",
                            "complete_date",
                            "create_date",
                            "error_message",
                            "state",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SampleDatasetStatus:
        """Create an instance of SampleDatasetStatus from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SampleDatasetStatus.parse_obj(obj)

        _obj = SampleDatasetStatus.parse_obj({
            "id": obj.get("_id"),
            "cluster_name": obj.get("clusterName"),
            "complete_date": obj.get("completeDate"),
            "create_date": obj.get("createDate"),
            "error_message": obj.get("errorMessage"),
            "state": obj.get("state")
        })
        return _obj

