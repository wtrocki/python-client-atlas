# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from atlas.models.link import Link

class TenantRestore(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cluster_name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, alias="clusterName", description="Human-readable label that identifies the source cluster.")
    delivery_type: Optional[StrictStr] = Field(None, alias="deliveryType", description="Means by which this resource returns the snapshot to the requesting MongoDB Cloud user.")
    expiration_date: Optional[datetime] = Field(None, alias="expirationDate", description="Date and time when the download link no longer works. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the restore job.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    project_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="projectId", description="Unique 24-hexadecimal digit string that identifies the project from which the restore job originated.")
    restore_finished_date: Optional[datetime] = Field(None, alias="restoreFinishedDate", description="Date and time when MongoDB Cloud completed writing this snapshot. MongoDB Cloud changes the status of the restore job to `CLOSED`. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    restore_scheduled_date: Optional[datetime] = Field(None, alias="restoreScheduledDate", description="Date and time when MongoDB Cloud will restore this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    snapshot_finished_date: Optional[datetime] = Field(None, alias="snapshotFinishedDate", description="Date and time when MongoDB Cloud completed writing this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    snapshot_id: constr(strict=True, max_length=24, min_length=24) = Field(..., alias="snapshotId", description="Unique 24-hexadecimal digit string that identifies the snapshot to restore.")
    snapshot_url: Optional[StrictStr] = Field(None, alias="snapshotUrl", description="Internet address from which you can download the compressed snapshot files. The resource returns this parameter when  `\"deliveryType\" : \"DOWNLOAD\"`.")
    status: Optional[StrictStr] = Field(None, description="Phase of the restore workflow for this job at the time this resource made this request.")
    target_deployment_item_name: constr(strict=True, max_length=64, min_length=1) = Field(..., alias="targetDeploymentItemName", description="Human-readable label that identifies the cluster on the target project to which you want to restore the snapshot. You can restore the snapshot to a cluster tier *M2* or greater.")
    target_project_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="targetProjectId", description="Unique 24-hexadecimal digit string that identifies the project that contains the cluster to which you want to restore the snapshot.")
    __properties = ["clusterName", "deliveryType", "expirationDate", "id", "links", "projectId", "restoreFinishedDate", "restoreScheduledDate", "snapshotFinishedDate", "snapshotId", "snapshotUrl", "status", "targetDeploymentItemName", "targetProjectId"]

    @validator('cluster_name')
    def cluster_name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('delivery_type')
    def delivery_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('RESTORE', 'DOWNLOAD'):
            raise ValueError("must validate the enum values ('RESTORE', 'DOWNLOAD')")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('project_id')
    def project_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('snapshot_id')
    def snapshot_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('PENDING', 'QUEUED', 'RUNNING', 'FAILED', 'COMPLETED'):
            raise ValueError("must validate the enum values ('PENDING', 'QUEUED', 'RUNNING', 'FAILED', 'COMPLETED')")
        return v

    @validator('target_deployment_item_name')
    def target_deployment_item_name_validate_regular_expression(cls, v):
        if not re.match(r"^[\p{L}\p{N}\-_.(),:&@+\']{1,64}$", v):
            raise ValueError(r"must validate the regular expression /^[\p{L}\p{N}\-_.(),:&@+']{1,64}$/")
        return v

    @validator('target_project_id')
    def target_project_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TenantRestore:
        """Create an instance of TenantRestore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "cluster_name",
                            "delivery_type",
                            "expiration_date",
                            "id",
                            "links",
                            "project_id",
                            "restore_finished_date",
                            "restore_scheduled_date",
                            "snapshot_finished_date",
                            "snapshot_url",
                            "status",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TenantRestore:
        """Create an instance of TenantRestore from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TenantRestore.parse_obj(obj)

        _obj = TenantRestore.parse_obj({
            "cluster_name": obj.get("clusterName"),
            "delivery_type": obj.get("deliveryType"),
            "expiration_date": obj.get("expirationDate"),
            "id": obj.get("id"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "project_id": obj.get("projectId"),
            "restore_finished_date": obj.get("restoreFinishedDate"),
            "restore_scheduled_date": obj.get("restoreScheduledDate"),
            "snapshot_finished_date": obj.get("snapshotFinishedDate"),
            "snapshot_id": obj.get("snapshotId"),
            "snapshot_url": obj.get("snapshotUrl"),
            "status": obj.get("status"),
            "target_deployment_item_name": obj.get("targetDeploymentItemName"),
            "target_project_id": obj.get("targetProjectId")
        })
        return _obj

