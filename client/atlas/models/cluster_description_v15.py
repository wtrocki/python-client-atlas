# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, constr, validator
from atlas.models.bi_connector import BiConnector
from atlas.models.cluster_description_connection_strings import ClusterDescriptionConnectionStrings
from atlas.models.link import Link
from atlas.models.nds_label import NDSLabel
from atlas.models.replication_spec import ReplicationSpec

class ClusterDescriptionV15(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    backup_enabled: Optional[StrictBool] = Field(False, alias="backupEnabled", description="Flag that indicates whether the cluster can perform backups. If set to `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters. Backup uses [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/) for dedicated clusters and [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/) for tenant clusters. If set to `false`, the cluster doesn't use backups.")
    bi_connector: Optional[BiConnector] = Field(None, alias="biConnector")
    cluster_type: Optional[StrictStr] = Field(None, alias="clusterType", description="Configuration of nodes that comprise the cluster.")
    connection_strings: Optional[ClusterDescriptionConnectionStrings] = Field(None, alias="connectionStrings")
    create_date: Optional[datetime] = Field(None, alias="createDate", description="Date and time when MongoDB Cloud created this cluster. This parameter expresses its value in ISO 8601 format in UTC.")
    disk_size_gb: Optional[confloat(le=4096, ge=10, strict=True)] = Field(None, alias="diskSizeGB", description="Storage capacity that the host's root volume possesses expressed in gigabytes. Increase this number to add capacity. MongoDB Cloud requires this parameter if you set **replicationSpecs**. If you specify a disk size below the minimum (10 GB), this parameter defaults to the minimum disk size value. Storage charge calculations depend on whether you choose the default value or a custom value.  The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require more storage space, consider upgrading your cluster to a higher tier.")
    encryption_at_rest_provider: Optional[StrictStr] = Field(None, alias="encryptionAtRestProvider", description="Cloud service provider that manages your customer keys to provide an additional layer of encryption at rest for the cluster. To enable customer key management for encryption at rest, the cluster **replicationSpecs[n].regionConfigs[m].{type}Specs.instanceSize** setting must be `M10` or higher and `\"backupEnabled\" : false` or omitted entirely.")
    group_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="groupId", description="Unique 24-hexadecimal character string that identifies the project.")
    id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, description="Unique 24-hexadecimal digit string that identifies the replication object for a zone in a Global Cluster. If you include existing zones in the request, you must specify this parameter. If you add a new zone to an existing Global Cluster, you may specify this parameter. The request deletes any existing zones in a Global Cluster that you exclude from the request.")
    labels: Optional[List[NDSLabel]] = Field(None, description="Collection of key-value pairs between 1 to 255 characters in length that tag and categorize the cluster. The MongoDB Cloud console doesn't display your labels.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    mongo_db_major_version: Optional[StrictStr] = Field('5.0', alias="mongoDBMajorVersion", description="Major MongoDB version of the cluster. MongoDB Cloud deploys the cluster with the latest stable release of the specified version.")
    mongo_db_version: Optional[constr(strict=True)] = Field(None, alias="mongoDBVersion", description="Version of MongoDB that the cluster runs.")
    name: Optional[constr(strict=True, max_length=64, min_length=1)] = Field(None, description="Human-readable label that identifies the advanced cluster.")
    paused: Optional[StrictBool] = Field(None, description="Flag that indicates whether the cluster is paused.")
    pit_enabled: Optional[StrictBool] = Field(None, alias="pitEnabled", description="Flag that indicates whether the cluster uses continuous cloud backups.")
    replication_specs: Optional[List[ReplicationSpec]] = Field(None, alias="replicationSpecs", description="List of settings that configure your cluster regions. For Global Clusters, each object in the array represents a zone where your clusters nodes deploy. For non-Global sharded clusters and replica sets, this array has one object representing where your clusters nodes deploy.")
    root_cert_type: Optional[StrictStr] = Field('ISRGROOTX1', alias="rootCertType", description="Root Certificate Authority that MongoDB Cloud cluster uses. MongoDB Cloud supports Internet Security Research Group.")
    state_name: Optional[StrictStr] = Field(None, alias="stateName", description="Human-readable label that indicates the current operating condition of this cluster.")
    termination_protection_enabled: Optional[StrictBool] = Field(False, alias="terminationProtectionEnabled", description="Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.")
    version_release_system: Optional[StrictStr] = Field('LTS', alias="versionReleaseSystem", description="Method by which the cluster maintains the MongoDB versions. If value is `CONTINUOUS`, you must not specify **mongoDBMajorVersion**.")
    __properties = ["backupEnabled", "biConnector", "clusterType", "connectionStrings", "createDate", "diskSizeGB", "encryptionAtRestProvider", "groupId", "id", "labels", "links", "mongoDBMajorVersion", "mongoDBVersion", "name", "paused", "pitEnabled", "replicationSpecs", "rootCertType", "stateName", "terminationProtectionEnabled", "versionReleaseSystem"]

    @validator('cluster_type')
    def cluster_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('REPLICASET', 'SHARDED', 'GEOSHARDED'):
            raise ValueError("must validate the enum values ('REPLICASET', 'SHARDED', 'GEOSHARDED')")
        return v

    @validator('encryption_at_rest_provider')
    def encryption_at_rest_provider_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('NONE', 'AWS', 'AZURE', 'GCP'):
            raise ValueError("must validate the enum values ('NONE', 'AWS', 'AZURE', 'GCP')")
        return v

    @validator('group_id')
    def group_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('id')
    def id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    @validator('mongo_db_major_version')
    def mongo_db_major_version_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('4.2', '4.4', '5.0', '6.0'):
            raise ValueError("must validate the enum values ('4.2', '4.4', '5.0', '6.0')")
        return v

    @validator('mongo_db_version')
    def mongo_db_version_validate_regular_expression(cls, v):
        if not re.match(r"([\d]+\.[\d]+\.[\d]+)", v):
            raise ValueError(r"must validate the regular expression /([\d]+\.[\d]+\.[\d]+)/")
        return v

    @validator('name')
    def name_validate_regular_expression(cls, v):
        if not re.match(r"^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$", v):
            raise ValueError(r"must validate the regular expression /^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$/")
        return v

    @validator('root_cert_type')
    def root_cert_type_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('ISRGROOTX1'):
            raise ValueError("must validate the enum values ('ISRGROOTX1')")
        return v

    @validator('state_name')
    def state_name_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('IDLE', 'CREATING', 'UPDATING', 'DELETING', 'DELETED', 'REPAIRING'):
            raise ValueError("must validate the enum values ('IDLE', 'CREATING', 'UPDATING', 'DELETING', 'DELETED', 'REPAIRING')")
        return v

    @validator('version_release_system')
    def version_release_system_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('LTS', 'CONTINUOUS'):
            raise ValueError("must validate the enum values ('LTS', 'CONTINUOUS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterDescriptionV15:
        """Create an instance of ClusterDescriptionV15 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "create_date",
                            "group_id",
                            "id",
                            "links",
                            "mongo_db_version",
                            "state_name",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bi_connector
        if self.bi_connector:
            _dict['biConnector'] = self.bi_connector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection_strings
        if self.connection_strings:
            _dict['connectionStrings'] = self.connection_strings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in replication_specs (list)
        _items = []
        if self.replication_specs:
            for _item in self.replication_specs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['replicationSpecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterDescriptionV15:
        """Create an instance of ClusterDescriptionV15 from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ClusterDescriptionV15.parse_obj(obj)

        _obj = ClusterDescriptionV15.parse_obj({
            "backup_enabled": obj.get("backupEnabled") if obj.get("backupEnabled") is not None else False,
            "bi_connector": BiConnector.from_dict(obj.get("biConnector")) if obj.get("biConnector") is not None else None,
            "cluster_type": obj.get("clusterType"),
            "connection_strings": ClusterDescriptionConnectionStrings.from_dict(obj.get("connectionStrings")) if obj.get("connectionStrings") is not None else None,
            "create_date": obj.get("createDate"),
            "disk_size_gb": obj.get("diskSizeGB"),
            "encryption_at_rest_provider": obj.get("encryptionAtRestProvider"),
            "group_id": obj.get("groupId"),
            "id": obj.get("id"),
            "labels": [NDSLabel.from_dict(_item) for _item in obj.get("labels")] if obj.get("labels") is not None else None,
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "mongo_db_major_version": obj.get("mongoDBMajorVersion") if obj.get("mongoDBMajorVersion") is not None else '5.0',
            "mongo_db_version": obj.get("mongoDBVersion"),
            "name": obj.get("name"),
            "paused": obj.get("paused"),
            "pit_enabled": obj.get("pitEnabled"),
            "replication_specs": [ReplicationSpec.from_dict(_item) for _item in obj.get("replicationSpecs")] if obj.get("replicationSpecs") is not None else None,
            "root_cert_type": obj.get("rootCertType") if obj.get("rootCertType") is not None else 'ISRGROOTX1',
            "state_name": obj.get("stateName"),
            "termination_protection_enabled": obj.get("terminationProtectionEnabled") if obj.get("terminationProtectionEnabled") is not None else False,
            "version_release_system": obj.get("versionReleaseSystem") if obj.get("versionReleaseSystem") is not None else 'LTS'
        })
        return _obj

