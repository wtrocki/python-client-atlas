# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr
from atlas.models.cluster_description_connection_strings_private_endpoint import ClusterDescriptionConnectionStringsPrivateEndpoint

class ClusterDescriptionConnectionStrings(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    aws_private_link: Optional[Dict[str, StrictStr]] = Field(None, alias="awsPrivateLink", description="Private endpoint-aware connection strings that use AWS-hosted clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an Amazon Web Services (AWS) interface endpoint. Each value identifies the related `mongodb://` connection string that you use to connect to MongoDB Cloud through the interface endpoint that the key names.")
    aws_private_link_srv: Optional[Dict[str, StrictStr]] = Field(None, alias="awsPrivateLinkSrv", description="Private endpoint-aware connection strings that use AWS-hosted clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an Amazon Web Services (AWS) interface endpoint. Each value identifies the related `mongodb://` connection string that you use to connect to Atlas through the interface endpoint that the key names.")
    private: Optional[StrictStr] = Field(None, description="Network peering connection strings for each interface Virtual Private Cloud (VPC) endpoint that you configured to connect to this cluster. This connection string uses the `mongodb+srv://` protocol. The resource returns this parameter once someone creates a network peering connection to this cluster. This protocol tells the application to look up the host seed list in the Domain Name System (DNS). This list synchronizes with the nodes in a cluster. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn't, use connectionStrings.private. For Amazon Web Services (AWS) clusters, this resource returns this parameter only if you enable custom DNS.")
    private_endpoint: Optional[List[ClusterDescriptionConnectionStringsPrivateEndpoint]] = Field(None, alias="privateEndpoint", description="List of private endpoint-aware connection strings that you can use to connect to this cluster through a private endpoint. This parameter returns only if you deployed a private endpoint to all regions to which you deployed this clusters' nodes.")
    private_srv: Optional[StrictStr] = Field(None, alias="privateSrv", description="Network peering connection strings for each interface Virtual Private Cloud (VPC) endpoint that you configured to connect to this cluster. This connection string uses the `mongodb+srv://` protocol. The resource returns this parameter when someone creates a network peering connection to this cluster. This protocol tells the application to look up the host seed list in the Domain Name System (DNS). This list synchronizes with the nodes in a cluster. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to append the seed list or change the Uniform Resource Identifier (URI) if the nodes change. Use this Uniform Resource Identifier (URI) format if your driver supports it. If it doesn't, use `connectionStrings.private`. For Amazon Web Services (AWS) clusters, this parameter returns only if you [enable custom DNS](https://docs.atlas.mongodb.com/reference/api/aws-custom-dns-update/).")
    standard: Optional[StrictStr] = Field(None, description="Public connection string that you can use to connect to this cluster. This connection string uses the `mongodb://` protocol.")
    standard_srv: Optional[StrictStr] = Field(None, alias="standardSrv", description="Public connection string that you can use to connect to this cluster. This connection string uses the `mongodb+srv://` protocol.")
    __properties = ["awsPrivateLink", "awsPrivateLinkSrv", "private", "privateEndpoint", "privateSrv", "standard", "standardSrv"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterDescriptionConnectionStrings:
        """Create an instance of ClusterDescriptionConnectionStrings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "aws_private_link",
                            "aws_private_link_srv",
                            "private",
                            "private_endpoint",
                            "private_srv",
                            "standard",
                            "standard_srv",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in private_endpoint (list)
        _items = []
        if self.private_endpoint:
            for _item in self.private_endpoint:
                if _item:
                    _items.append(_item.to_dict())
            _dict['privateEndpoint'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterDescriptionConnectionStrings:
        """Create an instance of ClusterDescriptionConnectionStrings from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ClusterDescriptionConnectionStrings.parse_obj(obj)

        _obj = ClusterDescriptionConnectionStrings.parse_obj({
            "aws_private_link": obj.get("awsPrivateLink"),
            "aws_private_link_srv": obj.get("awsPrivateLinkSrv"),
            "private": obj.get("private"),
            "private_endpoint": [ClusterDescriptionConnectionStringsPrivateEndpoint.from_dict(_item) for _item in obj.get("privateEndpoint")] if obj.get("privateEndpoint") is not None else None,
            "private_srv": obj.get("privateSrv"),
            "standard": obj.get("standard"),
            "standard_srv": obj.get("standardSrv")
        })
        return _obj

