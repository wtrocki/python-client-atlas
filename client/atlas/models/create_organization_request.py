# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator
from atlas.models.api_create_api_key_view import ApiCreateApiKeyView

class CreateOrganizationRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    api_key: Optional[ApiCreateApiKeyView] = Field(None, alias="apiKey")
    name: constr(strict=True, max_length=64, min_length=1) = Field(..., description="Human-readable label that identifies the organization.")
    org_owner_id: Optional[constr(strict=True, max_length=24, min_length=24)] = Field(None, alias="orgOwnerId", description="Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key. This is required if you call the Admin API endpoint directly, but not required when you call through the Atlas CLI.")
    __properties = ["apiKey", "name", "orgOwnerId"]

    @validator('name')
    def name_validate_regular_expression(cls, v):
        if not re.match(r"^[\p{L}\p{N}\-_.(),:&@+\']{1,64}$", v):
            raise ValueError(r"must validate the regular expression /^[\p{L}\p{N}\-_.(),:&@+']{1,64}$/")
        return v

    @validator('org_owner_id')
    def org_owner_id_validate_regular_expression(cls, v):
        if not re.match(r"^([a-f0-9]{24})$", v):
            raise ValueError(r"must validate the regular expression /^([a-f0-9]{24})$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateOrganizationRequest:
        """Create an instance of CreateOrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of api_key
        if self.api_key:
            _dict['apiKey'] = self.api_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateOrganizationRequest:
        """Create an instance of CreateOrganizationRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CreateOrganizationRequest.parse_obj(obj)

        _obj = CreateOrganizationRequest.parse_obj({
            "api_key": ApiCreateApiKeyView.from_dict(obj.get("apiKey")) if obj.get("apiKey") is not None else None,
            "name": obj.get("name"),
            "org_owner_id": obj.get("orgOwnerId")
        })
        return _obj

