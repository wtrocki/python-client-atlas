# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, constr
from atlas.models.collation import Collation
from atlas.models.index_options import IndexOptions

class ApiIndexRequestView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    collation: Optional[Collation] = None
    collection: StrictStr = Field(..., description="Human-readable label of the collection for which MongoDB Cloud creates an index.")
    db: StrictStr = Field(..., description="Human-readable label of the database that holds the collection on which MongoDB Cloud creates an index.")
    keys: Optional[List[Dict[str, constr(strict=True)]]] = Field(None, description="List that contains one or more objects that describe the parameters that you want to index.")
    options: Optional[IndexOptions] = None
    __properties = ["collation", "collection", "db", "keys", "options"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiIndexRequestView:
        """Create an instance of ApiIndexRequestView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of collation
        if self.collation:
            _dict['collation'] = self.collation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiIndexRequestView:
        """Create an instance of ApiIndexRequestView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiIndexRequestView.parse_obj(obj)

        _obj = ApiIndexRequestView.parse_obj({
            "collation": Collation.from_dict(obj.get("collation")) if obj.get("collation") is not None else None,
            "collection": obj.get("collection"),
            "db": obj.get("db"),
            "keys": obj.get("keys"),
            "options": IndexOptions.from_dict(obj.get("options")) if obj.get("options") is not None else None
        })
        return _obj

