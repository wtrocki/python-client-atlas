# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, conint, constr, validator
from atlas.models.link import Link

class ApiUserAccessListView(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cidr_block: Optional[constr(strict=True)] = Field(None, alias="cidrBlock", description="Range of network addresses that you want to add to the access list for the API key. This parameter requires the range to be expressed in classless inter-domain routing (CIDR) notation of Internet Protocol version 4 or version 6 addresses. You can set a value for this parameter or **ipAddress** but not both in the same request.")
    count: Optional[conint(strict=True, ge=1)] = Field(None, description="Total number of requests that have originated from the Internet Protocol (IP) address given as the value of the *lastUsedAddress* parameter.")
    created: Optional[datetime] = Field(None, description="Date and time when someone added the network addresses to the specified API access list. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    ip_address: Optional[constr(strict=True)] = Field(None, alias="ipAddress", description="Network address that you want to add to the access list for the API key. This parameter requires the address to be expressed as one Internet Protocol version 4 or version 6 address. You can set a value for this parameter or **cidrBlock** but not both in the same request.")
    last_used: Optional[datetime] = Field(None, alias="lastUsed", description="Date and time when MongoDB Cloud received the most recent request that originated from this Internet Protocol version 4 or version 6 address. The resource returns this parameter when at least one request has originated from this IP address. MongoDB Cloud updates this parameter each time a client accesses the permitted resource. This parameter expresses its value in the ISO 8601 timestamp format in UTC.")
    last_used_address: Optional[constr(strict=True)] = Field(None, alias="lastUsedAddress", description="Network address that issued the most recent request to the API. This parameter requires the address to be expressed as one Internet Protocol version 4 or version 6 address. The resource returns this parameter after this IP address made at least one request.")
    links: Optional[List[Link]] = Field(None, description="List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.")
    __properties = ["cidrBlock", "count", "created", "ipAddress", "lastUsed", "lastUsedAddress", "links"]

    @validator('cidr_block')
    def cidr_block_validate_regular_expression(cls, v):
        if not re.match(r"^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))((%2[fF]|\/)[0-9]{1,3})+$", v):
            raise ValueError(r"must validate the regular expression /^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))((%2[fF]|\/)[0-9]{1,3})+$/")
        return v

    @validator('ip_address')
    def ip_address_validate_regular_expression(cls, v):
        if not re.match(r"^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))$", v):
            raise ValueError(r"must validate the regular expression /^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))$/")
        return v

    @validator('last_used_address')
    def last_used_address_validate_regular_expression(cls, v):
        if not re.match(r"^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))$", v):
            raise ValueError(r"must validate the regular expression /^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiUserAccessListView:
        """Create an instance of ApiUserAccessListView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "count",
                            "created",
                            "last_used",
                            "last_used_address",
                            "links",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiUserAccessListView:
        """Create an instance of ApiUserAccessListView from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ApiUserAccessListView.parse_obj(obj)

        _obj = ApiUserAccessListView.parse_obj({
            "cidr_block": obj.get("cidrBlock"),
            "count": obj.get("count"),
            "created": obj.get("created"),
            "ip_address": obj.get("ipAddress"),
            "last_used": obj.get("lastUsed"),
            "last_used_address": obj.get("lastUsedAddress"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj

