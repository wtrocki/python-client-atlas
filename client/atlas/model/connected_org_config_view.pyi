# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ConnectedOrgConfigView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "domainRestrictionEnabled",
            "orgId",
            "identityProviderId",
        }
        
        class properties:
            domainRestrictionEnabled = schemas.BoolSchema
            
            
            class identityProviderId(
                schemas.StrSchema
            ):
                pass
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            
            
            class domainAllowList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domainAllowList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class postAuthRoleGrants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def GLOBAL_AUTOMATION_ADMIN(cls):
                            return cls("GLOBAL_AUTOMATION_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_BACKUP_ADMIN(cls):
                            return cls("GLOBAL_BACKUP_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_METERING_USER(cls):
                            return cls("GLOBAL_METERING_USER")
                        
                        @schemas.classproperty
                        def GLOBAL_METRICS_INTERNAL_USER(cls):
                            return cls("GLOBAL_METRICS_INTERNAL_USER")
                        
                        @schemas.classproperty
                        def GLOBAL_MONITORING_ADMIN(cls):
                            return cls("GLOBAL_MONITORING_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_OWNER(cls):
                            return cls("GLOBAL_OWNER")
                        
                        @schemas.classproperty
                        def GLOBAL_READ_ONLY(cls):
                            return cls("GLOBAL_READ_ONLY")
                        
                        @schemas.classproperty
                        def GLOBAL_USER_ADMIN(cls):
                            return cls("GLOBAL_USER_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_USER_READ_ONLY(cls):
                            return cls("GLOBAL_USER_READ_ONLY")
                        
                        @schemas.classproperty
                        def GLOBAL_ACCOUNT_SUSPENSION_ADMIN(cls):
                            return cls("GLOBAL_ACCOUNT_SUSPENSION_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_BILLING_ADMIN(cls):
                            return cls("GLOBAL_BILLING_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_LEGAL_ADMIN(cls):
                            return cls("GLOBAL_LEGAL_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_FEATURE_FLAG_ADMIN(cls):
                            return cls("GLOBAL_FEATURE_FLAG_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_ATLAS_TSE(cls):
                            return cls("GLOBAL_ATLAS_TSE")
                        
                        @schemas.classproperty
                        def GLOBAL_ATLAS_OPERATOR(cls):
                            return cls("GLOBAL_ATLAS_OPERATOR")
                        
                        @schemas.classproperty
                        def GLOBAL_ATLAS_MONGODB_ROLLOUT_ADMIN(cls):
                            return cls("GLOBAL_ATLAS_MONGODB_ROLLOUT_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_ATLAS_ADMIN(cls):
                            return cls("GLOBAL_ATLAS_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_STITCH_ADMIN(cls):
                            return cls("GLOBAL_STITCH_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_CHARTS_ADMIN(cls):
                            return cls("GLOBAL_CHARTS_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_EXPERIMENT_ASSIGNMENT_USER(cls):
                            return cls("GLOBAL_EXPERIMENT_ASSIGNMENT_USER")
                        
                        @schemas.classproperty
                        def GLOBAL_STITCH_INTERNAL_ADMIN(cls):
                            return cls("GLOBAL_STITCH_INTERNAL_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_BAAS_FEATURE_ADMIN(cls):
                            return cls("GLOBAL_BAAS_FEATURE_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_SECURITY_ADMIN(cls):
                            return cls("GLOBAL_SECURITY_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_QUERY_ENGINE_INTERNAL_ADMIN(cls):
                            return cls("GLOBAL_QUERY_ENGINE_INTERNAL_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_PROACTIVE_SUPPORT_ADMIN(cls):
                            return cls("GLOBAL_PROACTIVE_SUPPORT_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_INFRASTRUCTURE_INTERNAL_ADMIN(cls):
                            return cls("GLOBAL_INFRASTRUCTURE_INTERNAL_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_SALESFORCE_ADMIN(cls):
                            return cls("GLOBAL_SALESFORCE_ADMIN")
                        
                        @schemas.classproperty
                        def GLOBAL_SALESFORCE_READ_ONLY(cls):
                            return cls("GLOBAL_SALESFORCE_READ_ONLY")
                        
                        @schemas.classproperty
                        def GLOBAL_APP_SERVICES_CLUSTER_DEBUG_DATA_ACCESS(cls):
                            return cls("GLOBAL_APP_SERVICES_CLUSTER_DEBUG_DATA_ACCESS")
                        
                        @schemas.classproperty
                        def ORG_MEMBER(cls):
                            return cls("ORG_MEMBER")
                        
                        @schemas.classproperty
                        def ORG_READ_ONLY(cls):
                            return cls("ORG_READ_ONLY")
                        
                        @schemas.classproperty
                        def ORG_BILLING_ADMIN(cls):
                            return cls("ORG_BILLING_ADMIN")
                        
                        @schemas.classproperty
                        def ORG_GROUP_CREATOR(cls):
                            return cls("ORG_GROUP_CREATOR")
                        
                        @schemas.classproperty
                        def ORG_OWNER(cls):
                            return cls("ORG_OWNER")
                        
                        @schemas.classproperty
                        def ORG_TEAM_MEMBERS_ADMIN(cls):
                            return cls("ORG_TEAM_MEMBERS_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_AUTOMATION_ADMIN(cls):
                            return cls("GROUP_AUTOMATION_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_BACKUP_ADMIN(cls):
                            return cls("GROUP_BACKUP_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_MONITORING_ADMIN(cls):
                            return cls("GROUP_MONITORING_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_OWNER(cls):
                            return cls("GROUP_OWNER")
                        
                        @schemas.classproperty
                        def GROUP_READ_ONLY(cls):
                            return cls("GROUP_READ_ONLY")
                        
                        @schemas.classproperty
                        def GROUP_USER_ADMIN(cls):
                            return cls("GROUP_USER_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_BILLING_ADMIN(cls):
                            return cls("GROUP_BILLING_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_ADMIN(cls):
                            return cls("GROUP_DATA_ACCESS_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_READ_ONLY(cls):
                            return cls("GROUP_DATA_ACCESS_READ_ONLY")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_READ_WRITE(cls):
                            return cls("GROUP_DATA_ACCESS_READ_WRITE")
                        
                        @schemas.classproperty
                        def GROUP_CHARTS_ADMIN(cls):
                            return cls("GROUP_CHARTS_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_CLUSTER_MANAGER(cls):
                            return cls("GROUP_CLUSTER_MANAGER")
                        
                        @schemas.classproperty
                        def GROUP_SEARCH_INDEX_EDITOR(cls):
                            return cls("GROUP_SEARCH_INDEX_EDITOR")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'postAuthRoleGrants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class roleMappings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RoleMappingView']:
                        return RoleMappingView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RoleMappingView'], typing.List['RoleMappingView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roleMappings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RoleMappingView':
                    return super().__getitem__(i)
            
            
            class userConflicts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FederatedUserView']:
                        return FederatedUserView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FederatedUserView'], typing.List['FederatedUserView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userConflicts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FederatedUserView':
                    return super().__getitem__(i)
            __annotations__ = {
                "domainRestrictionEnabled": domainRestrictionEnabled,
                "identityProviderId": identityProviderId,
                "orgId": orgId,
                "domainAllowList": domainAllowList,
                "postAuthRoleGrants": postAuthRoleGrants,
                "roleMappings": roleMappings,
                "userConflicts": userConflicts,
            }
    
    domainRestrictionEnabled: MetaOapg.properties.domainRestrictionEnabled
    orgId: MetaOapg.properties.orgId
    identityProviderId: MetaOapg.properties.identityProviderId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainRestrictionEnabled"]) -> MetaOapg.properties.domainRestrictionEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityProviderId"]) -> MetaOapg.properties.identityProviderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domainAllowList"]) -> MetaOapg.properties.domainAllowList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postAuthRoleGrants"]) -> MetaOapg.properties.postAuthRoleGrants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleMappings"]) -> MetaOapg.properties.roleMappings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userConflicts"]) -> MetaOapg.properties.userConflicts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domainRestrictionEnabled", "identityProviderId", "orgId", "domainAllowList", "postAuthRoleGrants", "roleMappings", "userConflicts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainRestrictionEnabled"]) -> MetaOapg.properties.domainRestrictionEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityProviderId"]) -> MetaOapg.properties.identityProviderId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domainAllowList"]) -> typing.Union[MetaOapg.properties.domainAllowList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postAuthRoleGrants"]) -> typing.Union[MetaOapg.properties.postAuthRoleGrants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleMappings"]) -> typing.Union[MetaOapg.properties.roleMappings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userConflicts"]) -> typing.Union[MetaOapg.properties.userConflicts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domainRestrictionEnabled", "identityProviderId", "orgId", "domainAllowList", "postAuthRoleGrants", "roleMappings", "userConflicts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        domainRestrictionEnabled: typing.Union[MetaOapg.properties.domainRestrictionEnabled, bool, ],
        orgId: typing.Union[MetaOapg.properties.orgId, str, ],
        identityProviderId: typing.Union[MetaOapg.properties.identityProviderId, str, ],
        domainAllowList: typing.Union[MetaOapg.properties.domainAllowList, list, tuple, schemas.Unset] = schemas.unset,
        postAuthRoleGrants: typing.Union[MetaOapg.properties.postAuthRoleGrants, list, tuple, schemas.Unset] = schemas.unset,
        roleMappings: typing.Union[MetaOapg.properties.roleMappings, list, tuple, schemas.Unset] = schemas.unset,
        userConflicts: typing.Union[MetaOapg.properties.userConflicts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectedOrgConfigView':
        return super().__new__(
            cls,
            *_args,
            domainRestrictionEnabled=domainRestrictionEnabled,
            orgId=orgId,
            identityProviderId=identityProviderId,
            domainAllowList=domainAllowList,
            postAuthRoleGrants=postAuthRoleGrants,
            roleMappings=roleMappings,
            userConflicts=userConflicts,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.federated_user_view import FederatedUserView
from atlas.model.role_mapping_view import RoleMappingView
