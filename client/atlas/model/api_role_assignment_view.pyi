# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiRoleAssignmentView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    MongoDB Cloud user's roles and the corresponding organization or project to which that role applies. Each role can apply to one organization or one project but not both.
    """


    class MetaOapg:
        
        class properties:
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            
            
            class roleName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ORG_OWNER(cls):
                    return cls("ORG_OWNER")
                
                @schemas.classproperty
                def ORG_MEMBER(cls):
                    return cls("ORG_MEMBER")
                
                @schemas.classproperty
                def ORG_GROUP_CREATOR(cls):
                    return cls("ORG_GROUP_CREATOR")
                
                @schemas.classproperty
                def ORG_BILLING_ADMIN(cls):
                    return cls("ORG_BILLING_ADMIN")
                
                @schemas.classproperty
                def ORG_READ_ONLY(cls):
                    return cls("ORG_READ_ONLY")
                
                @schemas.classproperty
                def GROUP_CLUSTER_MANAGER(cls):
                    return cls("GROUP_CLUSTER_MANAGER")
                
                @schemas.classproperty
                def GROUP_DATA_ACCESS_ADMIN(cls):
                    return cls("GROUP_DATA_ACCESS_ADMIN")
                
                @schemas.classproperty
                def GROUP_DATA_ACCESS_READ_ONLY(cls):
                    return cls("GROUP_DATA_ACCESS_READ_ONLY")
                
                @schemas.classproperty
                def GROUP_DATA_ACCESS_READ_WRITE(cls):
                    return cls("GROUP_DATA_ACCESS_READ_WRITE")
                
                @schemas.classproperty
                def GROUP_OWNER(cls):
                    return cls("GROUP_OWNER")
                
                @schemas.classproperty
                def GROUP_READ_ONLY(cls):
                    return cls("GROUP_READ_ONLY")
                
                @schemas.classproperty
                def GROUP_SEARCH_INDEX_EDITOR(cls):
                    return cls("GROUP_SEARCH_INDEX_EDITOR")
            __annotations__ = {
                "groupId": groupId,
                "orgId": orgId,
                "roleName": roleName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleName"]) -> MetaOapg.properties.roleName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["groupId", "orgId", "roleName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleName"]) -> typing.Union[MetaOapg.properties.roleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["groupId", "orgId", "roleName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        roleName: typing.Union[MetaOapg.properties.roleName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiRoleAssignmentView':
        return super().__new__(
            cls,
            *_args,
            groupId=groupId,
            orgId=orgId,
            roleName=roleName,
            _configuration=_configuration,
            **kwargs,
        )
