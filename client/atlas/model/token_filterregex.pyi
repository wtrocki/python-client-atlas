# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class TokenFilterregex(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Filter that applies a regular expression to each token, replacing matches with a specified string.
    """


    class MetaOapg:
        required = {
            "pattern",
            "type",
            "matches",
            "replacement",
        }
        
        class properties:
            
            
            class matches(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
                
                @schemas.classproperty
                def FIRST(cls):
                    return cls("first")
            pattern = schemas.StrSchema
            replacement = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def REGEX(cls):
                    return cls("regex")
            __annotations__ = {
                "matches": matches,
                "pattern": pattern,
                "replacement": replacement,
                "type": type,
            }
    
    pattern: MetaOapg.properties.pattern
    type: MetaOapg.properties.type
    matches: MetaOapg.properties.matches
    replacement: MetaOapg.properties.replacement
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matches"]) -> MetaOapg.properties.matches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern"]) -> MetaOapg.properties.pattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replacement"]) -> MetaOapg.properties.replacement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["matches", "pattern", "replacement", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matches"]) -> MetaOapg.properties.matches: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern"]) -> MetaOapg.properties.pattern: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replacement"]) -> MetaOapg.properties.replacement: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["matches", "pattern", "replacement", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pattern: typing.Union[MetaOapg.properties.pattern, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        matches: typing.Union[MetaOapg.properties.matches, str, ],
        replacement: typing.Union[MetaOapg.properties.replacement, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenFilterregex':
        return super().__new__(
            cls,
            *_args,
            pattern=pattern,
            type=type,
            matches=matches,
            replacement=replacement,
            _configuration=_configuration,
            **kwargs,
        )
