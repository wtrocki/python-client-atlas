# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ClusterDescriptionConnectionStrings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Collection of Uniform Resource Locators that point to the MongoDB database.
    """


    class MetaOapg:
        
        class properties:
            
            
            class awsPrivateLink(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'awsPrivateLink':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class awsPrivateLinkSrv(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'awsPrivateLinkSrv':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            private = schemas.StrSchema
            
            
            class privateEndpoint(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ClusterDescriptionConnectionStringsPrivateEndpoint']:
                        return ClusterDescriptionConnectionStringsPrivateEndpoint
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ClusterDescriptionConnectionStringsPrivateEndpoint'], typing.List['ClusterDescriptionConnectionStringsPrivateEndpoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'privateEndpoint':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ClusterDescriptionConnectionStringsPrivateEndpoint':
                    return super().__getitem__(i)
            privateSrv = schemas.StrSchema
            standard = schemas.StrSchema
            standardSrv = schemas.StrSchema
            __annotations__ = {
                "awsPrivateLink": awsPrivateLink,
                "awsPrivateLinkSrv": awsPrivateLinkSrv,
                "private": private,
                "privateEndpoint": privateEndpoint,
                "privateSrv": privateSrv,
                "standard": standard,
                "standardSrv": standardSrv,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awsPrivateLink"]) -> MetaOapg.properties.awsPrivateLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awsPrivateLinkSrv"]) -> MetaOapg.properties.awsPrivateLinkSrv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateEndpoint"]) -> MetaOapg.properties.privateEndpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateSrv"]) -> MetaOapg.properties.privateSrv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standard"]) -> MetaOapg.properties.standard: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standardSrv"]) -> MetaOapg.properties.standardSrv: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["awsPrivateLink", "awsPrivateLinkSrv", "private", "privateEndpoint", "privateSrv", "standard", "standardSrv", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awsPrivateLink"]) -> typing.Union[MetaOapg.properties.awsPrivateLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awsPrivateLinkSrv"]) -> typing.Union[MetaOapg.properties.awsPrivateLinkSrv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateEndpoint"]) -> typing.Union[MetaOapg.properties.privateEndpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateSrv"]) -> typing.Union[MetaOapg.properties.privateSrv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standard"]) -> typing.Union[MetaOapg.properties.standard, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standardSrv"]) -> typing.Union[MetaOapg.properties.standardSrv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["awsPrivateLink", "awsPrivateLinkSrv", "private", "privateEndpoint", "privateSrv", "standard", "standardSrv", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        awsPrivateLink: typing.Union[MetaOapg.properties.awsPrivateLink, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        awsPrivateLinkSrv: typing.Union[MetaOapg.properties.awsPrivateLinkSrv, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        private: typing.Union[MetaOapg.properties.private, str, schemas.Unset] = schemas.unset,
        privateEndpoint: typing.Union[MetaOapg.properties.privateEndpoint, list, tuple, schemas.Unset] = schemas.unset,
        privateSrv: typing.Union[MetaOapg.properties.privateSrv, str, schemas.Unset] = schemas.unset,
        standard: typing.Union[MetaOapg.properties.standard, str, schemas.Unset] = schemas.unset,
        standardSrv: typing.Union[MetaOapg.properties.standardSrv, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClusterDescriptionConnectionStrings':
        return super().__new__(
            cls,
            *_args,
            awsPrivateLink=awsPrivateLink,
            awsPrivateLinkSrv=awsPrivateLinkSrv,
            private=private,
            privateEndpoint=privateEndpoint,
            privateSrv=privateSrv,
            standard=standard,
            standardSrv=standardSrv,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.cluster_description_connection_strings_private_endpoint import ClusterDescriptionConnectionStringsPrivateEndpoint
