# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiHostViewAtlas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            created = schemas.DateTimeSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class hostname(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            lastPing = schemas.DateTimeSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LinkAtlas']:
                        return LinkAtlas
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LinkAtlas'], typing.List['LinkAtlas']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LinkAtlas':
                    return super().__getitem__(i)
            port = schemas.Int32Schema
            replicaSetName = schemas.StrSchema
            
            
            class typeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def REPLICA_PRIMARY(cls):
                    return cls("REPLICA_PRIMARY")
                
                @schemas.classproperty
                def REPLICA_SECONDARY(cls):
                    return cls("REPLICA_SECONDARY")
                
                @schemas.classproperty
                def RECOVERING(cls):
                    return cls("RECOVERING")
                
                @schemas.classproperty
                def SHARD_MONGOS(cls):
                    return cls("SHARD_MONGOS")
                
                @schemas.classproperty
                def SHARD_CONFIG(cls):
                    return cls("SHARD_CONFIG")
                
                @schemas.classproperty
                def SHARD_STANDALONE(cls):
                    return cls("SHARD_STANDALONE")
                
                @schemas.classproperty
                def SHARD_PRIMARY(cls):
                    return cls("SHARD_PRIMARY")
                
                @schemas.classproperty
                def SHARD_SECONDARY(cls):
                    return cls("SHARD_SECONDARY")
                
                @schemas.classproperty
                def NO_DATA(cls):
                    return cls("NO_DATA")
            userAlias = schemas.StrSchema
            
            
            class version(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "created": created,
                "groupId": groupId,
                "hostname": hostname,
                "id": id,
                "lastPing": lastPing,
                "links": links,
                "port": port,
                "replicaSetName": replicaSetName,
                "typeName": typeName,
                "userAlias": userAlias,
                "version": version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastPing"]) -> MetaOapg.properties.lastPing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicaSetName"]) -> MetaOapg.properties.replicaSetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeName"]) -> MetaOapg.properties.typeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAlias"]) -> MetaOapg.properties.userAlias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "groupId", "hostname", "id", "lastPing", "links", "port", "replicaSetName", "typeName", "userAlias", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastPing"]) -> typing.Union[MetaOapg.properties.lastPing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicaSetName"]) -> typing.Union[MetaOapg.properties.replicaSetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeName"]) -> typing.Union[MetaOapg.properties.typeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAlias"]) -> typing.Union[MetaOapg.properties.userAlias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "groupId", "hostname", "id", "lastPing", "links", "port", "replicaSetName", "typeName", "userAlias", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lastPing: typing.Union[MetaOapg.properties.lastPing, str, datetime, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replicaSetName: typing.Union[MetaOapg.properties.replicaSetName, str, schemas.Unset] = schemas.unset,
        typeName: typing.Union[MetaOapg.properties.typeName, str, schemas.Unset] = schemas.unset,
        userAlias: typing.Union[MetaOapg.properties.userAlias, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiHostViewAtlas':
        return super().__new__(
            cls,
            *_args,
            created=created,
            groupId=groupId,
            hostname=hostname,
            id=id,
            lastPing=lastPing,
            links=links,
            port=port,
            replicaSetName=replicaSetName,
            typeName=typeName,
            userAlias=userAlias,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link_atlas import LinkAtlas
