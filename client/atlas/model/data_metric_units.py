# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataMetricUnits(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Element used to express the quantity. This can be an element of time, storage capacity, and the like.
    """


    class MetaOapg:
        enum_value_to_name = {
            "BITS": "BITS",
            "KILOBITS": "KILOBITS",
            "MEGABITS": "MEGABITS",
            "GIGABITS": "GIGABITS",
            "BYTES": "BYTES",
            "KILOBYTES": "KILOBYTES",
            "MEGABYTES": "MEGABYTES",
            "GIGABYTES": "GIGABYTES",
            "TERABYTES": "TERABYTES",
            "PETABYTES": "PETABYTES",
        }
    
    @schemas.classproperty
    def BITS(cls):
        return cls("BITS")
    
    @schemas.classproperty
    def KILOBITS(cls):
        return cls("KILOBITS")
    
    @schemas.classproperty
    def MEGABITS(cls):
        return cls("MEGABITS")
    
    @schemas.classproperty
    def GIGABITS(cls):
        return cls("GIGABITS")
    
    @schemas.classproperty
    def BYTES(cls):
        return cls("BYTES")
    
    @schemas.classproperty
    def KILOBYTES(cls):
        return cls("KILOBYTES")
    
    @schemas.classproperty
    def MEGABYTES(cls):
        return cls("MEGABYTES")
    
    @schemas.classproperty
    def GIGABYTES(cls):
        return cls("GIGABYTES")
    
    @schemas.classproperty
    def TERABYTES(cls):
        return cls("TERABYTES")
    
    @schemas.classproperty
    def PETABYTES(cls):
        return cls("PETABYTES")
