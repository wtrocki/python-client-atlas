# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class OnlineArchive(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "criteria",
        }
        
        class properties:
        
            @staticmethod
            def criteria() -> typing.Type['CriteriaView']:
                return CriteriaView
            
            
            class _id(
                schemas.StrSchema
            ):
                pass
            
            
            class clusterName(
                schemas.StrSchema
            ):
                pass
            collName = schemas.StrSchema
            
            
            class collectionType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TIMESERIES(cls):
                    return cls("TIMESERIES")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("STANDARD")
            dbName = schemas.StrSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class partitionFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PartitionFieldView']:
                        return PartitionFieldView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PartitionFieldView'], typing.List['PartitionFieldView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partitionFields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PartitionFieldView':
                    return super().__getitem__(i)
        
            @staticmethod
            def schedule() -> typing.Type['OnlineArchiveSchedule']:
                return OnlineArchiveSchedule
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def PAUSING(cls):
                    return cls("PAUSING")
                
                @schemas.classproperty
                def PAUSED(cls):
                    return cls("PAUSED")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
                
                @schemas.classproperty
                def ORPHANED(cls):
                    return cls("ORPHANED")
            __annotations__ = {
                "criteria": criteria,
                "_id": _id,
                "clusterName": clusterName,
                "collName": collName,
                "collectionType": collectionType,
                "dbName": dbName,
                "groupId": groupId,
                "partitionFields": partitionFields,
                "schedule": schedule,
                "state": state,
            }
    
    criteria: 'CriteriaView'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["criteria"]) -> 'CriteriaView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterName"]) -> MetaOapg.properties.clusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collName"]) -> MetaOapg.properties.collName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionType"]) -> MetaOapg.properties.collectionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dbName"]) -> MetaOapg.properties.dbName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partitionFields"]) -> MetaOapg.properties.partitionFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> 'OnlineArchiveSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["criteria", "_id", "clusterName", "collName", "collectionType", "dbName", "groupId", "partitionFields", "schedule", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["criteria"]) -> 'CriteriaView': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterName"]) -> typing.Union[MetaOapg.properties.clusterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collName"]) -> typing.Union[MetaOapg.properties.collName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionType"]) -> typing.Union[MetaOapg.properties.collectionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dbName"]) -> typing.Union[MetaOapg.properties.dbName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partitionFields"]) -> typing.Union[MetaOapg.properties.partitionFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> typing.Union['OnlineArchiveSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["criteria", "_id", "clusterName", "collName", "collectionType", "dbName", "groupId", "partitionFields", "schedule", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        criteria: 'CriteriaView',
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        clusterName: typing.Union[MetaOapg.properties.clusterName, str, schemas.Unset] = schemas.unset,
        collName: typing.Union[MetaOapg.properties.collName, str, schemas.Unset] = schemas.unset,
        collectionType: typing.Union[MetaOapg.properties.collectionType, str, schemas.Unset] = schemas.unset,
        dbName: typing.Union[MetaOapg.properties.dbName, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        partitionFields: typing.Union[MetaOapg.properties.partitionFields, list, tuple, schemas.Unset] = schemas.unset,
        schedule: typing.Union['OnlineArchiveSchedule', schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnlineArchive':
        return super().__new__(
            cls,
            *_args,
            criteria=criteria,
            _id=_id,
            clusterName=clusterName,
            collName=collName,
            collectionType=collectionType,
            dbName=dbName,
            groupId=groupId,
            partitionFields=partitionFields,
            schedule=schedule,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.criteria_view import CriteriaView
from atlas.model.online_archive_schedule import OnlineArchiveSchedule
from atlas.model.partition_field_view import PartitionFieldView
