# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiOrganizationInvitationView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "orgName",
        }
        
        class properties:
            
            
            class orgName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\p{L}\p{N}\-_.(),:&@+']{1,64}$',  # noqa: E501
                    }]
            createdAt = schemas.DateTimeSchema
            expiresAt = schemas.DateTimeSchema
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            inviterUsername = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class orgId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "ORG_OWNER": "ORG_OWNER",
                                "ORG_MEMBER": "ORG_MEMBER",
                                "ORG_GROUP_CREATOR": "ORG_GROUP_CREATOR",
                                "ORG_BILLING_ADMIN": "ORG_BILLING_ADMIN",
                                "ORG_READ_ONLY": "ORG_READ_ONLY",
                                "GROUP_CLUSTER_MANAGER": "GROUP_CLUSTER_MANAGER",
                                "GROUP_DATA_ACCESS_ADMIN": "GROUP_DATA_ACCESS_ADMIN",
                                "GROUP_DATA_ACCESS_READ_ONLY": "GROUP_DATA_ACCESS_READ_ONLY",
                                "GROUP_DATA_ACCESS_READ_WRITE": "GROUP_DATA_ACCESS_READ_WRITE",
                                "GROUP_OWNER": "GROUP_OWNER",
                                "GROUP_READ_ONLY": "GROUP_READ_ONLY",
                            }
                        
                        @schemas.classproperty
                        def ORG_OWNER(cls):
                            return cls("ORG_OWNER")
                        
                        @schemas.classproperty
                        def ORG_MEMBER(cls):
                            return cls("ORG_MEMBER")
                        
                        @schemas.classproperty
                        def ORG_GROUP_CREATOR(cls):
                            return cls("ORG_GROUP_CREATOR")
                        
                        @schemas.classproperty
                        def ORG_BILLING_ADMIN(cls):
                            return cls("ORG_BILLING_ADMIN")
                        
                        @schemas.classproperty
                        def ORG_READ_ONLY(cls):
                            return cls("ORG_READ_ONLY")
                        
                        @schemas.classproperty
                        def GROUP_CLUSTER_MANAGER(cls):
                            return cls("GROUP_CLUSTER_MANAGER")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_ADMIN(cls):
                            return cls("GROUP_DATA_ACCESS_ADMIN")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_READ_ONLY(cls):
                            return cls("GROUP_DATA_ACCESS_READ_ONLY")
                        
                        @schemas.classproperty
                        def GROUP_DATA_ACCESS_READ_WRITE(cls):
                            return cls("GROUP_DATA_ACCESS_READ_WRITE")
                        
                        @schemas.classproperty
                        def GROUP_OWNER(cls):
                            return cls("GROUP_OWNER")
                        
                        @schemas.classproperty
                        def GROUP_READ_ONLY(cls):
                            return cls("GROUP_READ_ONLY")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class teamIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            max_length = 24
                            min_length = 24
                            regex=[{
                                'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                            }]
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teamIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            username = schemas.StrSchema
            __annotations__ = {
                "orgName": orgName,
                "createdAt": createdAt,
                "expiresAt": expiresAt,
                "id": id,
                "inviterUsername": inviterUsername,
                "links": links,
                "orgId": orgId,
                "roles": roles,
                "teamIds": teamIds,
                "username": username,
            }
    
    orgName: MetaOapg.properties.orgName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inviterUsername"]) -> MetaOapg.properties.inviterUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamIds"]) -> MetaOapg.properties.teamIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["orgName", "createdAt", "expiresAt", "id", "inviterUsername", "links", "orgId", "roles", "teamIds", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inviterUsername"]) -> typing.Union[MetaOapg.properties.inviterUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamIds"]) -> typing.Union[MetaOapg.properties.teamIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["orgName", "createdAt", "expiresAt", "id", "inviterUsername", "links", "orgId", "roles", "teamIds", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        orgName: typing.Union[MetaOapg.properties.orgName, str, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        inviterUsername: typing.Union[MetaOapg.properties.inviterUsername, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        teamIds: typing.Union[MetaOapg.properties.teamIds, list, tuple, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiOrganizationInvitationView':
        return super().__new__(
            cls,
            *_args,
            orgName=orgName,
            createdAt=createdAt,
            expiresAt=expiresAt,
            id=id,
            inviterUsername=inviterUsername,
            links=links,
            orgId=orgId,
            roles=roles,
            teamIds=teamIds,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
