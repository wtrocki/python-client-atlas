# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AzureCloudProviderContainer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Collection of settings that configures the network container for a virtual private connection on Amazon Web Services.
    """


    class MetaOapg:
        required = {
            "region",
            "atlasCidrBlock",
        }
        
        class properties:
            
            
            class atlasCidrBlock(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^((([0-9]{1,3}\.){3}[0-9]{1,3})|([\:]{0,2}([0-9a-f]{1,4}\:){0,7}[0-9a-f]{1,4}[\:]{0,2}))((%2[fF]|\/)[0-9]{1,3})+$',  # noqa: E501
                    }]
            
            
            class region(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "US_CENTRAL": "US_CENTRAL",
                        "US_EAST": "US_EAST",
                        "US_EAST_2": "US_EAST_2",
                        "US_NORTH_CENTRAL": "US_NORTH_CENTRAL",
                        "US_WEST": "US_WEST",
                        "US_SOUTH_CENTRAL": "US_SOUTH_CENTRAL",
                        "EUROPE_NORTH": "EUROPE_NORTH",
                        "EUROPE_WEST": "EUROPE_WEST",
                        "US_WEST_CENTRAL": "US_WEST_CENTRAL",
                        "US_WEST_2": "US_WEST_2",
                        "US_WEST_3": "US_WEST_3",
                        "CANADA_EAST": "CANADA_EAST",
                        "CANADA_CENTRAL": "CANADA_CENTRAL",
                        "BRAZIL_SOUTH": "BRAZIL_SOUTH",
                        "BRAZIL_SOUTHEAST": "BRAZIL_SOUTHEAST",
                        "AUSTRALIA_EAST": "AUSTRALIA_EAST",
                        "AUSTRALIA_SOUTH_EAST": "AUSTRALIA_SOUTH_EAST",
                        "AUSTRALIA_CENTRAL": "AUSTRALIA_CENTRAL",
                        "AUSTRALIA_CENTRAL_2": "AUSTRALIA_CENTRAL_2",
                        "UAE_NORTH": "UAE_NORTH",
                        "GERMANY_CENTRAL": "GERMANY_CENTRAL",
                        "GERMANY_NORTH_EAST": "GERMANY_NORTH_EAST",
                        "GERMANY_WEST_CENTRAL": "GERMANY_WEST_CENTRAL",
                        "GERMANY_NORTH": "GERMANY_NORTH",
                        "SWITZERLAND_NORTH": "SWITZERLAND_NORTH",
                        "SWITZERLAND_WEST": "SWITZERLAND_WEST",
                        "SWEDEN_CENTRAL": "SWEDEN_CENTRAL",
                        "SWEDEN_SOUTH": "SWEDEN_SOUTH",
                        "UK_SOUTH": "UK_SOUTH",
                        "UK_WEST": "UK_WEST",
                        "INDIA_CENTRAL": "INDIA_CENTRAL",
                        "INDIA_WEST": "INDIA_WEST",
                        "INDIA_SOUTH": "INDIA_SOUTH",
                        "CHINA_EAST": "CHINA_EAST",
                        "CHINA_NORTH": "CHINA_NORTH",
                        "ASIA_EAST": "ASIA_EAST",
                        "JAPAN_EAST": "JAPAN_EAST",
                        "JAPAN_WEST": "JAPAN_WEST",
                        "ASIA_SOUTH_EAST": "ASIA_SOUTH_EAST",
                        "KOREA_CENTRAL": "KOREA_CENTRAL",
                        "KOREA_SOUTH": "KOREA_SOUTH",
                        "FRANCE_CENTRAL": "FRANCE_CENTRAL",
                        "FRANCE_SOUTH": "FRANCE_SOUTH",
                        "SOUTH_AFRICA_NORTH": "SOUTH_AFRICA_NORTH",
                        "SOUTH_AFRICA_WEST": "SOUTH_AFRICA_WEST",
                        "NORWAY_EAST": "NORWAY_EAST",
                        "NORWAY_WEST": "NORWAY_WEST",
                        "UAE_CENTRAL": "UAE_CENTRAL",
                    }
                
                @schemas.classproperty
                def US_CENTRAL(cls):
                    return cls("US_CENTRAL")
                
                @schemas.classproperty
                def US_EAST(cls):
                    return cls("US_EAST")
                
                @schemas.classproperty
                def US_EAST_2(cls):
                    return cls("US_EAST_2")
                
                @schemas.classproperty
                def US_NORTH_CENTRAL(cls):
                    return cls("US_NORTH_CENTRAL")
                
                @schemas.classproperty
                def US_WEST(cls):
                    return cls("US_WEST")
                
                @schemas.classproperty
                def US_SOUTH_CENTRAL(cls):
                    return cls("US_SOUTH_CENTRAL")
                
                @schemas.classproperty
                def EUROPE_NORTH(cls):
                    return cls("EUROPE_NORTH")
                
                @schemas.classproperty
                def EUROPE_WEST(cls):
                    return cls("EUROPE_WEST")
                
                @schemas.classproperty
                def US_WEST_CENTRAL(cls):
                    return cls("US_WEST_CENTRAL")
                
                @schemas.classproperty
                def US_WEST_2(cls):
                    return cls("US_WEST_2")
                
                @schemas.classproperty
                def US_WEST_3(cls):
                    return cls("US_WEST_3")
                
                @schemas.classproperty
                def CANADA_EAST(cls):
                    return cls("CANADA_EAST")
                
                @schemas.classproperty
                def CANADA_CENTRAL(cls):
                    return cls("CANADA_CENTRAL")
                
                @schemas.classproperty
                def BRAZIL_SOUTH(cls):
                    return cls("BRAZIL_SOUTH")
                
                @schemas.classproperty
                def BRAZIL_SOUTHEAST(cls):
                    return cls("BRAZIL_SOUTHEAST")
                
                @schemas.classproperty
                def AUSTRALIA_EAST(cls):
                    return cls("AUSTRALIA_EAST")
                
                @schemas.classproperty
                def AUSTRALIA_SOUTH_EAST(cls):
                    return cls("AUSTRALIA_SOUTH_EAST")
                
                @schemas.classproperty
                def AUSTRALIA_CENTRAL(cls):
                    return cls("AUSTRALIA_CENTRAL")
                
                @schemas.classproperty
                def AUSTRALIA_CENTRAL_2(cls):
                    return cls("AUSTRALIA_CENTRAL_2")
                
                @schemas.classproperty
                def UAE_NORTH(cls):
                    return cls("UAE_NORTH")
                
                @schemas.classproperty
                def GERMANY_CENTRAL(cls):
                    return cls("GERMANY_CENTRAL")
                
                @schemas.classproperty
                def GERMANY_NORTH_EAST(cls):
                    return cls("GERMANY_NORTH_EAST")
                
                @schemas.classproperty
                def GERMANY_WEST_CENTRAL(cls):
                    return cls("GERMANY_WEST_CENTRAL")
                
                @schemas.classproperty
                def GERMANY_NORTH(cls):
                    return cls("GERMANY_NORTH")
                
                @schemas.classproperty
                def SWITZERLAND_NORTH(cls):
                    return cls("SWITZERLAND_NORTH")
                
                @schemas.classproperty
                def SWITZERLAND_WEST(cls):
                    return cls("SWITZERLAND_WEST")
                
                @schemas.classproperty
                def SWEDEN_CENTRAL(cls):
                    return cls("SWEDEN_CENTRAL")
                
                @schemas.classproperty
                def SWEDEN_SOUTH(cls):
                    return cls("SWEDEN_SOUTH")
                
                @schemas.classproperty
                def UK_SOUTH(cls):
                    return cls("UK_SOUTH")
                
                @schemas.classproperty
                def UK_WEST(cls):
                    return cls("UK_WEST")
                
                @schemas.classproperty
                def INDIA_CENTRAL(cls):
                    return cls("INDIA_CENTRAL")
                
                @schemas.classproperty
                def INDIA_WEST(cls):
                    return cls("INDIA_WEST")
                
                @schemas.classproperty
                def INDIA_SOUTH(cls):
                    return cls("INDIA_SOUTH")
                
                @schemas.classproperty
                def CHINA_EAST(cls):
                    return cls("CHINA_EAST")
                
                @schemas.classproperty
                def CHINA_NORTH(cls):
                    return cls("CHINA_NORTH")
                
                @schemas.classproperty
                def ASIA_EAST(cls):
                    return cls("ASIA_EAST")
                
                @schemas.classproperty
                def JAPAN_EAST(cls):
                    return cls("JAPAN_EAST")
                
                @schemas.classproperty
                def JAPAN_WEST(cls):
                    return cls("JAPAN_WEST")
                
                @schemas.classproperty
                def ASIA_SOUTH_EAST(cls):
                    return cls("ASIA_SOUTH_EAST")
                
                @schemas.classproperty
                def KOREA_CENTRAL(cls):
                    return cls("KOREA_CENTRAL")
                
                @schemas.classproperty
                def KOREA_SOUTH(cls):
                    return cls("KOREA_SOUTH")
                
                @schemas.classproperty
                def FRANCE_CENTRAL(cls):
                    return cls("FRANCE_CENTRAL")
                
                @schemas.classproperty
                def FRANCE_SOUTH(cls):
                    return cls("FRANCE_SOUTH")
                
                @schemas.classproperty
                def SOUTH_AFRICA_NORTH(cls):
                    return cls("SOUTH_AFRICA_NORTH")
                
                @schemas.classproperty
                def SOUTH_AFRICA_WEST(cls):
                    return cls("SOUTH_AFRICA_WEST")
                
                @schemas.classproperty
                def NORWAY_EAST(cls):
                    return cls("NORWAY_EAST")
                
                @schemas.classproperty
                def NORWAY_WEST(cls):
                    return cls("NORWAY_WEST")
                
                @schemas.classproperty
                def UAE_CENTRAL(cls):
                    return cls("UAE_CENTRAL")
            
            
            class azureSubscriptionId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class vnetName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 38
                    min_length = 38
                    regex=[{
                        'pattern': r'^([-\w._()])+$',  # noqa: E501
                    }]
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class providerName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AWS": "AWS",
                        "GCP": "GCP",
                        "AZURE": "AZURE",
                        "TENANT": "TENANT",
                        "SERVERLESS": "SERVERLESS",
                    }
                
                @schemas.classproperty
                def AWS(cls):
                    return cls("AWS")
                
                @schemas.classproperty
                def GCP(cls):
                    return cls("GCP")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def TENANT(cls):
                    return cls("TENANT")
                
                @schemas.classproperty
                def SERVERLESS(cls):
                    return cls("SERVERLESS")
            provisioned = schemas.BoolSchema
            __annotations__ = {
                "atlasCidrBlock": atlasCidrBlock,
                "region": region,
                "azureSubscriptionId": azureSubscriptionId,
                "vnetName": vnetName,
                "id": id,
                "providerName": providerName,
                "provisioned": provisioned,
            }
    
    region: MetaOapg.properties.region
    atlasCidrBlock: MetaOapg.properties.atlasCidrBlock
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atlasCidrBlock"]) -> MetaOapg.properties.atlasCidrBlock: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureSubscriptionId"]) -> MetaOapg.properties.azureSubscriptionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vnetName"]) -> MetaOapg.properties.vnetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisioned"]) -> MetaOapg.properties.provisioned: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["atlasCidrBlock", "region", "azureSubscriptionId", "vnetName", "id", "providerName", "provisioned", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atlasCidrBlock"]) -> MetaOapg.properties.atlasCidrBlock: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureSubscriptionId"]) -> typing.Union[MetaOapg.properties.azureSubscriptionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vnetName"]) -> typing.Union[MetaOapg.properties.vnetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerName"]) -> typing.Union[MetaOapg.properties.providerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisioned"]) -> typing.Union[MetaOapg.properties.provisioned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["atlasCidrBlock", "region", "azureSubscriptionId", "vnetName", "id", "providerName", "provisioned", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        region: typing.Union[MetaOapg.properties.region, str, ],
        atlasCidrBlock: typing.Union[MetaOapg.properties.atlasCidrBlock, str, ],
        azureSubscriptionId: typing.Union[MetaOapg.properties.azureSubscriptionId, str, schemas.Unset] = schemas.unset,
        vnetName: typing.Union[MetaOapg.properties.vnetName, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        providerName: typing.Union[MetaOapg.properties.providerName, str, schemas.Unset] = schemas.unset,
        provisioned: typing.Union[MetaOapg.properties.provisioned, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AzureCloudProviderContainer':
        return super().__new__(
            cls,
            *_args,
            region=region,
            atlasCidrBlock=atlasCidrBlock,
            azureSubscriptionId=azureSubscriptionId,
            vnetName=vnetName,
            id=id,
            providerName=providerName,
            provisioned=provisioned,
            _configuration=_configuration,
            **kwargs,
        )
