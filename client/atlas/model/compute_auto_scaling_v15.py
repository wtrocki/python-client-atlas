# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ComputeAutoScalingV15(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Options that determine how this cluster handles CPU scaling.
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
        
            @staticmethod
            def maxInstanceSize() -> typing.Type['InstanceSize']:
                return InstanceSize
        
            @staticmethod
            def minInstanceSize() -> typing.Type['InstanceSize']:
                return InstanceSize
            scaleDownEnabled = schemas.BoolSchema
            __annotations__ = {
                "enabled": enabled,
                "maxInstanceSize": maxInstanceSize,
                "minInstanceSize": minInstanceSize,
                "scaleDownEnabled": scaleDownEnabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxInstanceSize"]) -> 'InstanceSize': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minInstanceSize"]) -> 'InstanceSize': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scaleDownEnabled"]) -> MetaOapg.properties.scaleDownEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "maxInstanceSize", "minInstanceSize", "scaleDownEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxInstanceSize"]) -> typing.Union['InstanceSize', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minInstanceSize"]) -> typing.Union['InstanceSize', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scaleDownEnabled"]) -> typing.Union[MetaOapg.properties.scaleDownEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "maxInstanceSize", "minInstanceSize", "scaleDownEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        maxInstanceSize: typing.Union['InstanceSize', schemas.Unset] = schemas.unset,
        minInstanceSize: typing.Union['InstanceSize', schemas.Unset] = schemas.unset,
        scaleDownEnabled: typing.Union[MetaOapg.properties.scaleDownEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ComputeAutoScalingV15':
        return super().__new__(
            cls,
            *_args,
            enabled=enabled,
            maxInstanceSize=maxInstanceSize,
            minInstanceSize=minInstanceSize,
            scaleDownEnabled=scaleDownEnabled,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.instance_size import InstanceSize
