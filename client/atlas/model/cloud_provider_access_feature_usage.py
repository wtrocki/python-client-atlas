# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class CloudProviderAccessFeatureUsage(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    MongoDB Cloud features associated with this Amazon Web Services (AWS) Identity and Access Management (IAM) role.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'featureType': {
                    'ATLAS_DATA_LAKE': CloudProviderAccessDataLakeFeatureUsage,
                    'CloudProviderAccessDataLakeFeatureUsage': CloudProviderAccessDataLakeFeatureUsage,
                    'CloudProviderAccessEncryptionAtRestFeatureUsage': CloudProviderAccessEncryptionAtRestFeatureUsage,
                    'CloudProviderAccessExportSnapshotFeatureUsage': CloudProviderAccessExportSnapshotFeatureUsage,
                    'ENCRYPTION_AT_REST': CloudProviderAccessEncryptionAtRestFeatureUsage,
                    'EXPORT_SNAPSHOT': CloudProviderAccessExportSnapshotFeatureUsage,
                }
            }
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CloudProviderAccessDataLakeFeatureUsage,
                CloudProviderAccessEncryptionAtRestFeatureUsage,
                CloudProviderAccessExportSnapshotFeatureUsage,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudProviderAccessFeatureUsage':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.cloud_provider_access_data_lake_feature_usage import CloudProviderAccessDataLakeFeatureUsage
from atlas.model.cloud_provider_access_encryption_at_rest_feature_usage import CloudProviderAccessEncryptionAtRestFeatureUsage
from atlas.model.cloud_provider_access_export_snapshot_feature_usage import CloudProviderAccessExportSnapshotFeatureUsage
