# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class IndexOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    One or more settings that determine how the MongoDB Cloud creates this MongoDB index.
    """


    class MetaOapg:
        required = {
            "2dsphereIndexVersion",
        }
        
        class properties:
            _2dsphere_index_version = schemas.Int32Schema
            background = schemas.BoolSchema
            bits = schemas.Int32Schema
            bucketSize = schemas.Int32Schema
            default_language = schemas.StrSchema
            expireAfterSeconds = schemas.Int32Schema
            hidden = schemas.BoolSchema
            language_override = schemas.StrSchema
            max = schemas.Int32Schema
            min = schemas.Int32Schema
            name = schemas.StrSchema
            
            
            class partialFilterExpression(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'partialFilterExpression':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            sparse = schemas.BoolSchema
            
            
            class storageEngine(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'storageEngine':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            textIndexVersion = schemas.Int32Schema
            unique = schemas.BoolSchema
            
            
            class weights(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'weights':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "2dsphereIndexVersion": _2dsphere_index_version,
                "background": background,
                "bits": bits,
                "bucketSize": bucketSize,
                "default_language": default_language,
                "expireAfterSeconds": expireAfterSeconds,
                "hidden": hidden,
                "language_override": language_override,
                "max": max,
                "min": min,
                "name": name,
                "partialFilterExpression": partialFilterExpression,
                "sparse": sparse,
                "storageEngine": storageEngine,
                "textIndexVersion": textIndexVersion,
                "unique": unique,
                "weights": weights,
            }
    
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["2dsphereIndexVersion"]) -> MetaOapg.properties._2dsphere_index_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["background"]) -> MetaOapg.properties.background: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bits"]) -> MetaOapg.properties.bits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucketSize"]) -> MetaOapg.properties.bucketSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_language"]) -> MetaOapg.properties.default_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireAfterSeconds"]) -> MetaOapg.properties.expireAfterSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language_override"]) -> MetaOapg.properties.language_override: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partialFilterExpression"]) -> MetaOapg.properties.partialFilterExpression: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sparse"]) -> MetaOapg.properties.sparse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageEngine"]) -> MetaOapg.properties.storageEngine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textIndexVersion"]) -> MetaOapg.properties.textIndexVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unique"]) -> MetaOapg.properties.unique: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weights"]) -> MetaOapg.properties.weights: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["2dsphereIndexVersion", "background", "bits", "bucketSize", "default_language", "expireAfterSeconds", "hidden", "language_override", "max", "min", "name", "partialFilterExpression", "sparse", "storageEngine", "textIndexVersion", "unique", "weights", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["2dsphereIndexVersion"]) -> MetaOapg.properties._2dsphere_index_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["background"]) -> typing.Union[MetaOapg.properties.background, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bits"]) -> typing.Union[MetaOapg.properties.bits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucketSize"]) -> typing.Union[MetaOapg.properties.bucketSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_language"]) -> typing.Union[MetaOapg.properties.default_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireAfterSeconds"]) -> typing.Union[MetaOapg.properties.expireAfterSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> typing.Union[MetaOapg.properties.hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language_override"]) -> typing.Union[MetaOapg.properties.language_override, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partialFilterExpression"]) -> typing.Union[MetaOapg.properties.partialFilterExpression, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sparse"]) -> typing.Union[MetaOapg.properties.sparse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageEngine"]) -> typing.Union[MetaOapg.properties.storageEngine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textIndexVersion"]) -> typing.Union[MetaOapg.properties.textIndexVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unique"]) -> typing.Union[MetaOapg.properties.unique, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weights"]) -> typing.Union[MetaOapg.properties.weights, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["2dsphereIndexVersion", "background", "bits", "bucketSize", "default_language", "expireAfterSeconds", "hidden", "language_override", "max", "min", "name", "partialFilterExpression", "sparse", "storageEngine", "textIndexVersion", "unique", "weights", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        background: typing.Union[MetaOapg.properties.background, bool, schemas.Unset] = schemas.unset,
        bits: typing.Union[MetaOapg.properties.bits, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bucketSize: typing.Union[MetaOapg.properties.bucketSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        default_language: typing.Union[MetaOapg.properties.default_language, str, schemas.Unset] = schemas.unset,
        expireAfterSeconds: typing.Union[MetaOapg.properties.expireAfterSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hidden: typing.Union[MetaOapg.properties.hidden, bool, schemas.Unset] = schemas.unset,
        language_override: typing.Union[MetaOapg.properties.language_override, str, schemas.Unset] = schemas.unset,
        max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        partialFilterExpression: typing.Union[MetaOapg.properties.partialFilterExpression, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sparse: typing.Union[MetaOapg.properties.sparse, bool, schemas.Unset] = schemas.unset,
        storageEngine: typing.Union[MetaOapg.properties.storageEngine, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        textIndexVersion: typing.Union[MetaOapg.properties.textIndexVersion, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unique: typing.Union[MetaOapg.properties.unique, bool, schemas.Unset] = schemas.unset,
        weights: typing.Union[MetaOapg.properties.weights, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IndexOptions':
        return super().__new__(
            cls,
            *_args,
            background=background,
            bits=bits,
            bucketSize=bucketSize,
            default_language=default_language,
            expireAfterSeconds=expireAfterSeconds,
            hidden=hidden,
            language_override=language_override,
            max=max,
            min=min,
            name=name,
            partialFilterExpression=partialFilterExpression,
            sparse=sparse,
            storageEngine=storageEngine,
            textIndexVersion=textIndexVersion,
            unique=unique,
            weights=weights,
            _configuration=_configuration,
            **kwargs,
        )
