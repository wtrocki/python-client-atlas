# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiPaymentView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Funds transferred to MongoDB to cover the specified service in this invoice.
    """


    class MetaOapg:
        
        class properties:
            amountBilledCents = schemas.Int64Schema
            amountPaidCents = schemas.Int64Schema
            created = schemas.DateTimeSchema
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            salesTaxCents = schemas.Int64Schema
            
            
            class statusName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("NEW")
                
                @schemas.classproperty
                def FORGIVEN(cls):
                    return cls("FORGIVEN")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("PAID")
                
                @schemas.classproperty
                def PARTIAL_PAID(cls):
                    return cls("PARTIAL_PAID")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def INVOICED(cls):
                    return cls("INVOICED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def FAILED_AUTHENTICATION(cls):
                    return cls("FAILED_AUTHENTICATION")
                
                @schemas.classproperty
                def PROCESSING(cls):
                    return cls("PROCESSING")
                
                @schemas.classproperty
                def PENDING_REVERSAL(cls):
                    return cls("PENDING_REVERSAL")
            subtotalCents = schemas.Int64Schema
            updated = schemas.DateTimeSchema
            __annotations__ = {
                "amountBilledCents": amountBilledCents,
                "amountPaidCents": amountPaidCents,
                "created": created,
                "id": id,
                "salesTaxCents": salesTaxCents,
                "statusName": statusName,
                "subtotalCents": subtotalCents,
                "updated": updated,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountBilledCents"]) -> MetaOapg.properties.amountBilledCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPaidCents"]) -> MetaOapg.properties.amountPaidCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesTaxCents"]) -> MetaOapg.properties.salesTaxCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusName"]) -> MetaOapg.properties.statusName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotalCents"]) -> MetaOapg.properties.subtotalCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amountBilledCents", "amountPaidCents", "created", "id", "salesTaxCents", "statusName", "subtotalCents", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountBilledCents"]) -> typing.Union[MetaOapg.properties.amountBilledCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPaidCents"]) -> typing.Union[MetaOapg.properties.amountPaidCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesTaxCents"]) -> typing.Union[MetaOapg.properties.salesTaxCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusName"]) -> typing.Union[MetaOapg.properties.statusName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotalCents"]) -> typing.Union[MetaOapg.properties.subtotalCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amountBilledCents", "amountPaidCents", "created", "id", "salesTaxCents", "statusName", "subtotalCents", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amountBilledCents: typing.Union[MetaOapg.properties.amountBilledCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amountPaidCents: typing.Union[MetaOapg.properties.amountPaidCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        salesTaxCents: typing.Union[MetaOapg.properties.salesTaxCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusName: typing.Union[MetaOapg.properties.statusName, str, schemas.Unset] = schemas.unset,
        subtotalCents: typing.Union[MetaOapg.properties.subtotalCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiPaymentView':
        return super().__new__(
            cls,
            *_args,
            amountBilledCents=amountBilledCents,
            amountPaidCents=amountPaidCents,
            created=created,
            id=id,
            salesTaxCents=salesTaxCents,
            statusName=statusName,
            subtotalCents=subtotalCents,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )
