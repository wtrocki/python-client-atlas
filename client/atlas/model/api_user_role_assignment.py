# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiUserRoleAssignment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class apiUserId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "GROUP_CLUSTER_MANAGER": "CLUSTER_MANAGER",
                                "GROUP_DATA_ACCESS_ADMIN": "DATA_ACCESS_ADMIN",
                                "GROUP_DATA_ACCESS_READ_ONLY": "DATA_ACCESS_READ_ONLY",
                                "GROUP_DATA_ACCESS_READ_WRITE": "DATA_ACCESS_READ_WRITE",
                                "GROUP_SEARCH_INDEX_EDITOR": "SEARCH_INDEX_EDITOR",
                                "GROUP_OWNER": "OWNER",
                                "GROUP_READ_ONLY": "READ_ONLY",
                            }
                        
                        @schemas.classproperty
                        def CLUSTER_MANAGER(cls):
                            return cls("GROUP_CLUSTER_MANAGER")
                        
                        @schemas.classproperty
                        def DATA_ACCESS_ADMIN(cls):
                            return cls("GROUP_DATA_ACCESS_ADMIN")
                        
                        @schemas.classproperty
                        def DATA_ACCESS_READ_ONLY(cls):
                            return cls("GROUP_DATA_ACCESS_READ_ONLY")
                        
                        @schemas.classproperty
                        def DATA_ACCESS_READ_WRITE(cls):
                            return cls("GROUP_DATA_ACCESS_READ_WRITE")
                        
                        @schemas.classproperty
                        def SEARCH_INDEX_EDITOR(cls):
                            return cls("GROUP_SEARCH_INDEX_EDITOR")
                        
                        @schemas.classproperty
                        def OWNER(cls):
                            return cls("GROUP_OWNER")
                        
                        @schemas.classproperty
                        def READ_ONLY(cls):
                            return cls("GROUP_READ_ONLY")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "apiUserId": apiUserId,
                "roles": roles,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiUserId"]) -> MetaOapg.properties.apiUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiUserId", "roles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiUserId"]) -> typing.Union[MetaOapg.properties.apiUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiUserId", "roles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiUserId: typing.Union[MetaOapg.properties.apiUserId, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiUserRoleAssignment':
        return super().__new__(
            cls,
            *_args,
            apiUserId=apiUserId,
            roles=roles,
            _configuration=_configuration,
            **kwargs,
        )
