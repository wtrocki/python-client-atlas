# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class EventViewForOrg(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class apiKeyId(
                schemas.StrSchema
            ):
                pass
            created = schemas.DateTimeSchema
        
            @staticmethod
            def eventTypeName() -> typing.Type['UserEventTypeViewForOrg']:
                return UserEventTypeViewForOrg
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            isGlobalAdmin = schemas.BoolSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            publicKey = schemas.StrSchema
        
            @staticmethod
            def raw() -> typing.Type['Raw']:
                return Raw
            
            
            class remoteAddress(
                schemas.StrSchema
            ):
                pass
            
            
            class userId(
                schemas.StrSchema
            ):
                pass
            username = schemas.StrSchema
            
            
            class alertId(
                schemas.StrSchema
            ):
                pass
            
            
            class alertConfigId(
                schemas.StrSchema
            ):
                pass
            
            
            class invoiceId(
                schemas.StrSchema
            ):
                pass
            
            
            class paymentId(
                schemas.StrSchema
            ):
                pass
            whitelistEntry = schemas.StrSchema
            
            
            class teamId(
                schemas.StrSchema
            ):
                pass
            targetUsername = schemas.StrSchema
            __annotations__ = {
                "apiKeyId": apiKeyId,
                "created": created,
                "eventTypeName": eventTypeName,
                "groupId": groupId,
                "id": id,
                "isGlobalAdmin": isGlobalAdmin,
                "links": links,
                "orgId": orgId,
                "publicKey": publicKey,
                "raw": raw,
                "remoteAddress": remoteAddress,
                "userId": userId,
                "username": username,
                "alertId": alertId,
                "alertConfigId": alertConfigId,
                "invoiceId": invoiceId,
                "paymentId": paymentId,
                "whitelistEntry": whitelistEntry,
                "teamId": teamId,
                "targetUsername": targetUsername,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiKeyId"]) -> MetaOapg.properties.apiKeyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTypeName"]) -> 'UserEventTypeViewForOrg': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isGlobalAdmin"]) -> MetaOapg.properties.isGlobalAdmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicKey"]) -> MetaOapg.properties.publicKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raw"]) -> 'Raw': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remoteAddress"]) -> MetaOapg.properties.remoteAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertId"]) -> MetaOapg.properties.alertId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceId"]) -> MetaOapg.properties.invoiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentId"]) -> MetaOapg.properties.paymentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["whitelistEntry"]) -> MetaOapg.properties.whitelistEntry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamId"]) -> MetaOapg.properties.teamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetUsername"]) -> MetaOapg.properties.targetUsername: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiKeyId", "created", "eventTypeName", "groupId", "id", "isGlobalAdmin", "links", "orgId", "publicKey", "raw", "remoteAddress", "userId", "username", "alertId", "alertConfigId", "invoiceId", "paymentId", "whitelistEntry", "teamId", "targetUsername", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiKeyId"]) -> typing.Union[MetaOapg.properties.apiKeyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTypeName"]) -> typing.Union['UserEventTypeViewForOrg', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isGlobalAdmin"]) -> typing.Union[MetaOapg.properties.isGlobalAdmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicKey"]) -> typing.Union[MetaOapg.properties.publicKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raw"]) -> typing.Union['Raw', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remoteAddress"]) -> typing.Union[MetaOapg.properties.remoteAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertId"]) -> typing.Union[MetaOapg.properties.alertId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertConfigId"]) -> typing.Union[MetaOapg.properties.alertConfigId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceId"]) -> typing.Union[MetaOapg.properties.invoiceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentId"]) -> typing.Union[MetaOapg.properties.paymentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["whitelistEntry"]) -> typing.Union[MetaOapg.properties.whitelistEntry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamId"]) -> typing.Union[MetaOapg.properties.teamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetUsername"]) -> typing.Union[MetaOapg.properties.targetUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiKeyId", "created", "eventTypeName", "groupId", "id", "isGlobalAdmin", "links", "orgId", "publicKey", "raw", "remoteAddress", "userId", "username", "alertId", "alertConfigId", "invoiceId", "paymentId", "whitelistEntry", "teamId", "targetUsername", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiKeyId: typing.Union[MetaOapg.properties.apiKeyId, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        eventTypeName: typing.Union['UserEventTypeViewForOrg', schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        isGlobalAdmin: typing.Union[MetaOapg.properties.isGlobalAdmin, bool, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        publicKey: typing.Union[MetaOapg.properties.publicKey, str, schemas.Unset] = schemas.unset,
        raw: typing.Union['Raw', schemas.Unset] = schemas.unset,
        remoteAddress: typing.Union[MetaOapg.properties.remoteAddress, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        alertId: typing.Union[MetaOapg.properties.alertId, str, schemas.Unset] = schemas.unset,
        alertConfigId: typing.Union[MetaOapg.properties.alertConfigId, str, schemas.Unset] = schemas.unset,
        invoiceId: typing.Union[MetaOapg.properties.invoiceId, str, schemas.Unset] = schemas.unset,
        paymentId: typing.Union[MetaOapg.properties.paymentId, str, schemas.Unset] = schemas.unset,
        whitelistEntry: typing.Union[MetaOapg.properties.whitelistEntry, str, schemas.Unset] = schemas.unset,
        teamId: typing.Union[MetaOapg.properties.teamId, str, schemas.Unset] = schemas.unset,
        targetUsername: typing.Union[MetaOapg.properties.targetUsername, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventViewForOrg':
        return super().__new__(
            cls,
            *_args,
            apiKeyId=apiKeyId,
            created=created,
            eventTypeName=eventTypeName,
            groupId=groupId,
            id=id,
            isGlobalAdmin=isGlobalAdmin,
            links=links,
            orgId=orgId,
            publicKey=publicKey,
            raw=raw,
            remoteAddress=remoteAddress,
            userId=userId,
            username=username,
            alertId=alertId,
            alertConfigId=alertConfigId,
            invoiceId=invoiceId,
            paymentId=paymentId,
            whitelistEntry=whitelistEntry,
            teamId=teamId,
            targetUsername=targetUsername,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
from atlas.model.raw import Raw
from atlas.model.user_event_type_view_for_org import UserEventTypeViewForOrg
