# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class NDSLDAPVerifyConnectivityJobRequestParams(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request information needed to verify an Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration. The response does not return the **bindPassword**.
    """


    class MetaOapg:
        required = {
            "hostname",
            "bindPassword",
            "port",
            "bindUsername",
        }
        
        class properties:
            bindPassword = schemas.StrSchema
            
            
            class bindUsername(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(?:(?<cn>CN=(?<name>[^,]*)),)?(?:(?<path>(?:(?:CN|OU)=[^,]+,?)+),)?(?<domain>(?:DC=[^,]+,?)+)$',  # noqa: E501
                    }]
            
            
            class hostname(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?$',  # noqa: E501
                    }]
            port = schemas.Int32Schema
            authzQueryTemplate = schemas.StrSchema
            caCertificate = schemas.StrSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "bindPassword": bindPassword,
                "bindUsername": bindUsername,
                "hostname": hostname,
                "port": port,
                "authzQueryTemplate": authzQueryTemplate,
                "caCertificate": caCertificate,
                "links": links,
            }
    
    hostname: MetaOapg.properties.hostname
    bindPassword: MetaOapg.properties.bindPassword
    port: MetaOapg.properties.port
    bindUsername: MetaOapg.properties.bindUsername
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bindPassword"]) -> MetaOapg.properties.bindPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bindUsername"]) -> MetaOapg.properties.bindUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authzQueryTemplate"]) -> MetaOapg.properties.authzQueryTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caCertificate"]) -> MetaOapg.properties.caCertificate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bindPassword", "bindUsername", "hostname", "port", "authzQueryTemplate", "caCertificate", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bindPassword"]) -> MetaOapg.properties.bindPassword: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bindUsername"]) -> MetaOapg.properties.bindUsername: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authzQueryTemplate"]) -> typing.Union[MetaOapg.properties.authzQueryTemplate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caCertificate"]) -> typing.Union[MetaOapg.properties.caCertificate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bindPassword", "bindUsername", "hostname", "port", "authzQueryTemplate", "caCertificate", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        hostname: typing.Union[MetaOapg.properties.hostname, str, ],
        bindPassword: typing.Union[MetaOapg.properties.bindPassword, str, ],
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, ],
        bindUsername: typing.Union[MetaOapg.properties.bindUsername, str, ],
        authzQueryTemplate: typing.Union[MetaOapg.properties.authzQueryTemplate, str, schemas.Unset] = schemas.unset,
        caCertificate: typing.Union[MetaOapg.properties.caCertificate, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NDSLDAPVerifyConnectivityJobRequestParams':
        return super().__new__(
            cls,
            *_args,
            hostname=hostname,
            bindPassword=bindPassword,
            port=port,
            bindUsername=bindUsername,
            authzQueryTemplate=authzQueryTemplate,
            caCertificate=caCertificate,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
