# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DiskBackupRestoreJob(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "deliveryType",
            "targetGroupId",
            "targetClusterName",
        }
        
        class properties:
            
            
            class deliveryType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUTOMATED(cls):
                    return cls("automated")
                
                @schemas.classproperty
                def DOWNLOAD(cls):
                    return cls("download")
                
                @schemas.classproperty
                def POINT_IN_TIME(cls):
                    return cls("pointInTime")
            
            
            class targetClusterName(
                schemas.StrSchema
            ):
                pass
            
            
            class targetGroupId(
                schemas.StrSchema
            ):
                pass
            cancelled = schemas.BoolSchema
            
            
            class components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DiskBackupBaseRestoreMember']:
                        return DiskBackupBaseRestoreMember
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DiskBackupBaseRestoreMember'], typing.List['DiskBackupBaseRestoreMember']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'components':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DiskBackupBaseRestoreMember':
                    return super().__getitem__(i)
            
            
            class deliveryUrl(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deliveryUrl':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def desiredTimestamp() -> typing.Type['ApiBSONTimestampView']:
                return ApiBSONTimestampView
            expired = schemas.BoolSchema
            expiresAt = schemas.DateTimeSchema
            failed = schemas.BoolSchema
            finishedAt = schemas.DateTimeSchema
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class oplogInc(
                schemas.Int32Schema
            ):
                pass
            
            
            class oplogTs(
                schemas.Int32Schema
            ):
                pass
            
            
            class pointInTimeUTCSeconds(
                schemas.Int32Schema
            ):
                pass
            
            
            class snapshotId(
                schemas.StrSchema
            ):
                pass
            timestamp = schemas.DateTimeSchema
            __annotations__ = {
                "deliveryType": deliveryType,
                "targetClusterName": targetClusterName,
                "targetGroupId": targetGroupId,
                "cancelled": cancelled,
                "components": components,
                "deliveryUrl": deliveryUrl,
                "desiredTimestamp": desiredTimestamp,
                "expired": expired,
                "expiresAt": expiresAt,
                "failed": failed,
                "finishedAt": finishedAt,
                "id": id,
                "links": links,
                "oplogInc": oplogInc,
                "oplogTs": oplogTs,
                "pointInTimeUTCSeconds": pointInTimeUTCSeconds,
                "snapshotId": snapshotId,
                "timestamp": timestamp,
            }
    
    deliveryType: MetaOapg.properties.deliveryType
    targetGroupId: MetaOapg.properties.targetGroupId
    targetClusterName: MetaOapg.properties.targetClusterName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveryType"]) -> MetaOapg.properties.deliveryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetClusterName"]) -> MetaOapg.properties.targetClusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetGroupId"]) -> MetaOapg.properties.targetGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelled"]) -> MetaOapg.properties.cancelled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveryUrl"]) -> MetaOapg.properties.deliveryUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desiredTimestamp"]) -> 'ApiBSONTimestampView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiresAt"]) -> MetaOapg.properties.expiresAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed"]) -> MetaOapg.properties.failed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishedAt"]) -> MetaOapg.properties.finishedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oplogInc"]) -> MetaOapg.properties.oplogInc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oplogTs"]) -> MetaOapg.properties.oplogTs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pointInTimeUTCSeconds"]) -> MetaOapg.properties.pointInTimeUTCSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotId"]) -> MetaOapg.properties.snapshotId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deliveryType", "targetClusterName", "targetGroupId", "cancelled", "components", "deliveryUrl", "desiredTimestamp", "expired", "expiresAt", "failed", "finishedAt", "id", "links", "oplogInc", "oplogTs", "pointInTimeUTCSeconds", "snapshotId", "timestamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveryType"]) -> MetaOapg.properties.deliveryType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetClusterName"]) -> MetaOapg.properties.targetClusterName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetGroupId"]) -> MetaOapg.properties.targetGroupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelled"]) -> typing.Union[MetaOapg.properties.cancelled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> typing.Union[MetaOapg.properties.components, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveryUrl"]) -> typing.Union[MetaOapg.properties.deliveryUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desiredTimestamp"]) -> typing.Union['ApiBSONTimestampView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expired"]) -> typing.Union[MetaOapg.properties.expired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiresAt"]) -> typing.Union[MetaOapg.properties.expiresAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed"]) -> typing.Union[MetaOapg.properties.failed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishedAt"]) -> typing.Union[MetaOapg.properties.finishedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oplogInc"]) -> typing.Union[MetaOapg.properties.oplogInc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oplogTs"]) -> typing.Union[MetaOapg.properties.oplogTs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pointInTimeUTCSeconds"]) -> typing.Union[MetaOapg.properties.pointInTimeUTCSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotId"]) -> typing.Union[MetaOapg.properties.snapshotId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deliveryType", "targetClusterName", "targetGroupId", "cancelled", "components", "deliveryUrl", "desiredTimestamp", "expired", "expiresAt", "failed", "finishedAt", "id", "links", "oplogInc", "oplogTs", "pointInTimeUTCSeconds", "snapshotId", "timestamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        deliveryType: typing.Union[MetaOapg.properties.deliveryType, str, ],
        targetGroupId: typing.Union[MetaOapg.properties.targetGroupId, str, ],
        targetClusterName: typing.Union[MetaOapg.properties.targetClusterName, str, ],
        cancelled: typing.Union[MetaOapg.properties.cancelled, bool, schemas.Unset] = schemas.unset,
        components: typing.Union[MetaOapg.properties.components, list, tuple, schemas.Unset] = schemas.unset,
        deliveryUrl: typing.Union[MetaOapg.properties.deliveryUrl, list, tuple, schemas.Unset] = schemas.unset,
        desiredTimestamp: typing.Union['ApiBSONTimestampView', schemas.Unset] = schemas.unset,
        expired: typing.Union[MetaOapg.properties.expired, bool, schemas.Unset] = schemas.unset,
        expiresAt: typing.Union[MetaOapg.properties.expiresAt, str, datetime, schemas.Unset] = schemas.unset,
        failed: typing.Union[MetaOapg.properties.failed, bool, schemas.Unset] = schemas.unset,
        finishedAt: typing.Union[MetaOapg.properties.finishedAt, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        oplogInc: typing.Union[MetaOapg.properties.oplogInc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        oplogTs: typing.Union[MetaOapg.properties.oplogTs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pointInTimeUTCSeconds: typing.Union[MetaOapg.properties.pointInTimeUTCSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        snapshotId: typing.Union[MetaOapg.properties.snapshotId, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DiskBackupRestoreJob':
        return super().__new__(
            cls,
            *_args,
            deliveryType=deliveryType,
            targetGroupId=targetGroupId,
            targetClusterName=targetClusterName,
            cancelled=cancelled,
            components=components,
            deliveryUrl=deliveryUrl,
            desiredTimestamp=desiredTimestamp,
            expired=expired,
            expiresAt=expiresAt,
            failed=failed,
            finishedAt=finishedAt,
            id=id,
            links=links,
            oplogInc=oplogInc,
            oplogTs=oplogTs,
            pointInTimeUTCSeconds=pointInTimeUTCSeconds,
            snapshotId=snapshotId,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_bson_timestamp_view import ApiBSONTimestampView
from atlas.model.disk_backup_base_restore_member import DiskBackupBaseRestoreMember
from atlas.model.link import Link
