# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiSnapshotPartView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Characteristics that identify this snapshot.
    """


    class MetaOapg:
        
        class properties:
            
            
            class clusterId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class compressionSetting(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NONE": "NONE",
                        "GZIP": "GZIP",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def GZIP(cls):
                    return cls("GZIP")
            dataSizeBytes = schemas.Int64Schema
            encryptionEnabled = schemas.BoolSchema
            fileSizeBytes = schemas.Int64Schema
            masterKeyUUID = schemas.UUIDSchema
            
            
            class mongodVersion(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'([\d]+\.[\d]+\.[\d]+)',  # noqa: E501
                    }]
            replicaSetName = schemas.StrSchema
            storageSizeBytes = schemas.Int64Schema
            
            
            class typeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "REPLICA_SET": "REPLICA_SET",
                        "CONFIG_SERVER": "CONFIG_SERVER",
                        "CONFIG_SERVER_REPLICA_SET": "CONFIG_SERVER_REPLICA_SET",
                    }
                
                @schemas.classproperty
                def REPLICA_SET(cls):
                    return cls("REPLICA_SET")
                
                @schemas.classproperty
                def CONFIG_SERVER(cls):
                    return cls("CONFIG_SERVER")
                
                @schemas.classproperty
                def CONFIG_SERVER_REPLICA_SET(cls):
                    return cls("CONFIG_SERVER_REPLICA_SET")
            __annotations__ = {
                "clusterId": clusterId,
                "compressionSetting": compressionSetting,
                "dataSizeBytes": dataSizeBytes,
                "encryptionEnabled": encryptionEnabled,
                "fileSizeBytes": fileSizeBytes,
                "masterKeyUUID": masterKeyUUID,
                "mongodVersion": mongodVersion,
                "replicaSetName": replicaSetName,
                "storageSizeBytes": storageSizeBytes,
                "typeName": typeName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterId"]) -> MetaOapg.properties.clusterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compressionSetting"]) -> MetaOapg.properties.compressionSetting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSizeBytes"]) -> MetaOapg.properties.dataSizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionEnabled"]) -> MetaOapg.properties.encryptionEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileSizeBytes"]) -> MetaOapg.properties.fileSizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masterKeyUUID"]) -> MetaOapg.properties.masterKeyUUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongodVersion"]) -> MetaOapg.properties.mongodVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicaSetName"]) -> MetaOapg.properties.replicaSetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageSizeBytes"]) -> MetaOapg.properties.storageSizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeName"]) -> MetaOapg.properties.typeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clusterId", "compressionSetting", "dataSizeBytes", "encryptionEnabled", "fileSizeBytes", "masterKeyUUID", "mongodVersion", "replicaSetName", "storageSizeBytes", "typeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterId"]) -> typing.Union[MetaOapg.properties.clusterId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compressionSetting"]) -> typing.Union[MetaOapg.properties.compressionSetting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSizeBytes"]) -> typing.Union[MetaOapg.properties.dataSizeBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionEnabled"]) -> typing.Union[MetaOapg.properties.encryptionEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileSizeBytes"]) -> typing.Union[MetaOapg.properties.fileSizeBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masterKeyUUID"]) -> typing.Union[MetaOapg.properties.masterKeyUUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongodVersion"]) -> typing.Union[MetaOapg.properties.mongodVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicaSetName"]) -> typing.Union[MetaOapg.properties.replicaSetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageSizeBytes"]) -> typing.Union[MetaOapg.properties.storageSizeBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeName"]) -> typing.Union[MetaOapg.properties.typeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clusterId", "compressionSetting", "dataSizeBytes", "encryptionEnabled", "fileSizeBytes", "masterKeyUUID", "mongodVersion", "replicaSetName", "storageSizeBytes", "typeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        clusterId: typing.Union[MetaOapg.properties.clusterId, str, schemas.Unset] = schemas.unset,
        compressionSetting: typing.Union[MetaOapg.properties.compressionSetting, str, schemas.Unset] = schemas.unset,
        dataSizeBytes: typing.Union[MetaOapg.properties.dataSizeBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        encryptionEnabled: typing.Union[MetaOapg.properties.encryptionEnabled, bool, schemas.Unset] = schemas.unset,
        fileSizeBytes: typing.Union[MetaOapg.properties.fileSizeBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        masterKeyUUID: typing.Union[MetaOapg.properties.masterKeyUUID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        mongodVersion: typing.Union[MetaOapg.properties.mongodVersion, str, schemas.Unset] = schemas.unset,
        replicaSetName: typing.Union[MetaOapg.properties.replicaSetName, str, schemas.Unset] = schemas.unset,
        storageSizeBytes: typing.Union[MetaOapg.properties.storageSizeBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        typeName: typing.Union[MetaOapg.properties.typeName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiSnapshotPartView':
        return super().__new__(
            cls,
            *_args,
            clusterId=clusterId,
            compressionSetting=compressionSetting,
            dataSizeBytes=dataSizeBytes,
            encryptionEnabled=encryptionEnabled,
            fileSizeBytes=fileSizeBytes,
            masterKeyUUID=masterKeyUUID,
            mongodVersion=mongodVersion,
            replicaSetName=replicaSetName,
            storageSizeBytes=storageSizeBytes,
            typeName=typeName,
            _configuration=_configuration,
            **kwargs,
        )
