# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class FTSSynonymMappingDefinition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Synonyms used for this full text index.
    """


    class MetaOapg:
        required = {
            "analyzer",
            "name",
            "source",
        }
        
        class properties:
            
            
            class analyzer(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "lucene.standard": "STANDARD",
                        "lucene.simple": "SIMPLE",
                        "lucene.whitespace": "WHITESPACE",
                        "lucene.keyword": "KEYWORD",
                        "lucene.arabic": "ARABIC",
                        "lucene.armenian": "ARMENIAN",
                        "lucene.basque": "BASQUE",
                        "lucene.bengali": "BENGALI",
                        "lucene.brazilian": "BRAZILIAN",
                        "lucene.bulgarian": "BULGARIAN",
                        "lucene.catalan": "CATALAN",
                        "lucene.chinese": "CHINESE",
                        "lucene.cjk": "CJK",
                        "lucene.czech": "CZECH",
                        "lucene.danish": "DANISH",
                        "lucene.dutch": "DUTCH",
                        "lucene.english": "ENGLISH",
                        "lucene.finnish": "FINNISH",
                        "lucene.french": "FRENCH",
                        "lucene.galician": "GALICIAN",
                        "lucene.german": "GERMAN",
                        "lucene.greek": "GREEK",
                        "lucene.hindi": "HINDI",
                        "lucene.hungarian": "HUNGARIAN",
                        "lucene.indonesian": "INDONESIAN",
                        "lucene.irish": "IRISH",
                        "lucene.italian": "ITALIAN",
                        "lucene.japanese": "JAPANESE",
                        "lucene.korean": "KOREAN",
                        "lucene.kuromoji": "KUROMOJI",
                        "lucene.latvian": "LATVIAN",
                        "lucene.lithuanian": "LITHUANIAN",
                        "lucene.morfologik": "MORFOLOGIK",
                        "lucene.nori": "NORI",
                        "lucene.norwegian": "NORWEGIAN",
                        "lucene.persian": "PERSIAN",
                        "lucene.portuguese": "PORTUGUESE",
                        "lucene.romanian": "ROMANIAN",
                        "lucene.russian": "RUSSIAN",
                        "lucene.smartcn": "SMARTCN",
                        "lucene.sorani": "SORANI",
                        "lucene.spanish": "SPANISH",
                        "lucene.swedish": "SWEDISH",
                        "lucene.thai": "THAI",
                        "lucene.turkish": "TURKISH",
                        "lucene.ukrainian": "UKRAINIAN",
                    }
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("lucene.standard")
                
                @schemas.classproperty
                def SIMPLE(cls):
                    return cls("lucene.simple")
                
                @schemas.classproperty
                def WHITESPACE(cls):
                    return cls("lucene.whitespace")
                
                @schemas.classproperty
                def KEYWORD(cls):
                    return cls("lucene.keyword")
                
                @schemas.classproperty
                def ARABIC(cls):
                    return cls("lucene.arabic")
                
                @schemas.classproperty
                def ARMENIAN(cls):
                    return cls("lucene.armenian")
                
                @schemas.classproperty
                def BASQUE(cls):
                    return cls("lucene.basque")
                
                @schemas.classproperty
                def BENGALI(cls):
                    return cls("lucene.bengali")
                
                @schemas.classproperty
                def BRAZILIAN(cls):
                    return cls("lucene.brazilian")
                
                @schemas.classproperty
                def BULGARIAN(cls):
                    return cls("lucene.bulgarian")
                
                @schemas.classproperty
                def CATALAN(cls):
                    return cls("lucene.catalan")
                
                @schemas.classproperty
                def CHINESE(cls):
                    return cls("lucene.chinese")
                
                @schemas.classproperty
                def CJK(cls):
                    return cls("lucene.cjk")
                
                @schemas.classproperty
                def CZECH(cls):
                    return cls("lucene.czech")
                
                @schemas.classproperty
                def DANISH(cls):
                    return cls("lucene.danish")
                
                @schemas.classproperty
                def DUTCH(cls):
                    return cls("lucene.dutch")
                
                @schemas.classproperty
                def ENGLISH(cls):
                    return cls("lucene.english")
                
                @schemas.classproperty
                def FINNISH(cls):
                    return cls("lucene.finnish")
                
                @schemas.classproperty
                def FRENCH(cls):
                    return cls("lucene.french")
                
                @schemas.classproperty
                def GALICIAN(cls):
                    return cls("lucene.galician")
                
                @schemas.classproperty
                def GERMAN(cls):
                    return cls("lucene.german")
                
                @schemas.classproperty
                def GREEK(cls):
                    return cls("lucene.greek")
                
                @schemas.classproperty
                def HINDI(cls):
                    return cls("lucene.hindi")
                
                @schemas.classproperty
                def HUNGARIAN(cls):
                    return cls("lucene.hungarian")
                
                @schemas.classproperty
                def INDONESIAN(cls):
                    return cls("lucene.indonesian")
                
                @schemas.classproperty
                def IRISH(cls):
                    return cls("lucene.irish")
                
                @schemas.classproperty
                def ITALIAN(cls):
                    return cls("lucene.italian")
                
                @schemas.classproperty
                def JAPANESE(cls):
                    return cls("lucene.japanese")
                
                @schemas.classproperty
                def KOREAN(cls):
                    return cls("lucene.korean")
                
                @schemas.classproperty
                def KUROMOJI(cls):
                    return cls("lucene.kuromoji")
                
                @schemas.classproperty
                def LATVIAN(cls):
                    return cls("lucene.latvian")
                
                @schemas.classproperty
                def LITHUANIAN(cls):
                    return cls("lucene.lithuanian")
                
                @schemas.classproperty
                def MORFOLOGIK(cls):
                    return cls("lucene.morfologik")
                
                @schemas.classproperty
                def NORI(cls):
                    return cls("lucene.nori")
                
                @schemas.classproperty
                def NORWEGIAN(cls):
                    return cls("lucene.norwegian")
                
                @schemas.classproperty
                def PERSIAN(cls):
                    return cls("lucene.persian")
                
                @schemas.classproperty
                def PORTUGUESE(cls):
                    return cls("lucene.portuguese")
                
                @schemas.classproperty
                def ROMANIAN(cls):
                    return cls("lucene.romanian")
                
                @schemas.classproperty
                def RUSSIAN(cls):
                    return cls("lucene.russian")
                
                @schemas.classproperty
                def SMARTCN(cls):
                    return cls("lucene.smartcn")
                
                @schemas.classproperty
                def SORANI(cls):
                    return cls("lucene.sorani")
                
                @schemas.classproperty
                def SPANISH(cls):
                    return cls("lucene.spanish")
                
                @schemas.classproperty
                def SWEDISH(cls):
                    return cls("lucene.swedish")
                
                @schemas.classproperty
                def THAI(cls):
                    return cls("lucene.thai")
                
                @schemas.classproperty
                def TURKISH(cls):
                    return cls("lucene.turkish")
                
                @schemas.classproperty
                def UKRAINIAN(cls):
                    return cls("lucene.ukrainian")
            name = schemas.StrSchema
        
            @staticmethod
            def source() -> typing.Type['SynonymSource']:
                return SynonymSource
            __annotations__ = {
                "analyzer": analyzer,
                "name": name,
                "source": source,
            }
    
    analyzer: MetaOapg.properties.analyzer
    name: MetaOapg.properties.name
    source: 'SynonymSource'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyzer"]) -> MetaOapg.properties.analyzer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'SynonymSource': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["analyzer", "name", "source", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyzer"]) -> MetaOapg.properties.analyzer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> 'SynonymSource': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["analyzer", "name", "source", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        analyzer: typing.Union[MetaOapg.properties.analyzer, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        source: 'SynonymSource',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FTSSynonymMappingDefinition':
        return super().__new__(
            cls,
            *_args,
            analyzer=analyzer,
            name=name,
            source=source,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.synonym_source import SynonymSource
