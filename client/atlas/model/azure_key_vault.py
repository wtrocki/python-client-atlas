# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AzureKeyVault(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details that define the configuration of Encryption at Rest using Azure Key Vault (AKV).
    """


    class MetaOapg:
        
        class properties:
            
            
            class azureEnvironment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AZURE": "AZURE",
                        "AZURE_CHINA": "AZURE_CHINA",
                        "AZURE_GERMANY": "AZURE_GERMANY",
                    }
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def AZURE_CHINA(cls):
                    return cls("AZURE_CHINA")
                
                @schemas.classproperty
                def AZURE_GERMANY(cls):
                    return cls("AZURE_GERMANY")
            clientID = schemas.UUIDSchema
            enabled = schemas.BoolSchema
            keyIdentifier = schemas.StrSchema
            keyVaultName = schemas.StrSchema
            resourceGroupName = schemas.StrSchema
            secret = schemas.StrSchema
            subscriptionID = schemas.UUIDSchema
            tenantID = schemas.UUIDSchema
            valid = schemas.BoolSchema
            __annotations__ = {
                "azureEnvironment": azureEnvironment,
                "clientID": clientID,
                "enabled": enabled,
                "keyIdentifier": keyIdentifier,
                "keyVaultName": keyVaultName,
                "resourceGroupName": resourceGroupName,
                "secret": secret,
                "subscriptionID": subscriptionID,
                "tenantID": tenantID,
                "valid": valid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureEnvironment"]) -> MetaOapg.properties.azureEnvironment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientID"]) -> MetaOapg.properties.clientID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyIdentifier"]) -> MetaOapg.properties.keyIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyVaultName"]) -> MetaOapg.properties.keyVaultName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceGroupName"]) -> MetaOapg.properties.resourceGroupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret"]) -> MetaOapg.properties.secret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptionID"]) -> MetaOapg.properties.subscriptionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantID"]) -> MetaOapg.properties.tenantID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["azureEnvironment", "clientID", "enabled", "keyIdentifier", "keyVaultName", "resourceGroupName", "secret", "subscriptionID", "tenantID", "valid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureEnvironment"]) -> typing.Union[MetaOapg.properties.azureEnvironment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientID"]) -> typing.Union[MetaOapg.properties.clientID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyIdentifier"]) -> typing.Union[MetaOapg.properties.keyIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyVaultName"]) -> typing.Union[MetaOapg.properties.keyVaultName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceGroupName"]) -> typing.Union[MetaOapg.properties.resourceGroupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret"]) -> typing.Union[MetaOapg.properties.secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptionID"]) -> typing.Union[MetaOapg.properties.subscriptionID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantID"]) -> typing.Union[MetaOapg.properties.tenantID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> typing.Union[MetaOapg.properties.valid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["azureEnvironment", "clientID", "enabled", "keyIdentifier", "keyVaultName", "resourceGroupName", "secret", "subscriptionID", "tenantID", "valid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        azureEnvironment: typing.Union[MetaOapg.properties.azureEnvironment, str, schemas.Unset] = schemas.unset,
        clientID: typing.Union[MetaOapg.properties.clientID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        keyIdentifier: typing.Union[MetaOapg.properties.keyIdentifier, str, schemas.Unset] = schemas.unset,
        keyVaultName: typing.Union[MetaOapg.properties.keyVaultName, str, schemas.Unset] = schemas.unset,
        resourceGroupName: typing.Union[MetaOapg.properties.resourceGroupName, str, schemas.Unset] = schemas.unset,
        secret: typing.Union[MetaOapg.properties.secret, str, schemas.Unset] = schemas.unset,
        subscriptionID: typing.Union[MetaOapg.properties.subscriptionID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        tenantID: typing.Union[MetaOapg.properties.tenantID, str, uuid.UUID, schemas.Unset] = schemas.unset,
        valid: typing.Union[MetaOapg.properties.valid, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AzureKeyVault':
        return super().__new__(
            cls,
            *_args,
            azureEnvironment=azureEnvironment,
            clientID=clientID,
            enabled=enabled,
            keyIdentifier=keyIdentifier,
            keyVaultName=keyVaultName,
            resourceGroupName=resourceGroupName,
            secret=secret,
            subscriptionID=subscriptionID,
            tenantID=tenantID,
            valid=valid,
            _configuration=_configuration,
            **kwargs,
        )
