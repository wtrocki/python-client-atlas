# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataLakeS3Store(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "provider",
        }
        
        class properties:
            provider = schemas.StrSchema
            
            
            class additionalStorageClasses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def STANDARD(cls):
                            return cls("STANDARD")
                        
                        @schemas.classproperty
                        def INTELLIGENT_TIERING(cls):
                            return cls("INTELLIGENT_TIERING")
                        
                        @schemas.classproperty
                        def STANDARD_IA(cls):
                            return cls("STANDARD_IA")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalStorageClasses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            bucket = schemas.StrSchema
            delimiter = schemas.StrSchema
            includeTags = schemas.BoolSchema
            prefix = schemas.StrSchema
            public = schemas.BoolSchema
            
            
            class region(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def US_GOV_WEST_1(cls):
                    return cls("US_GOV_WEST_1")
                
                @schemas.classproperty
                def US_GOV_EAST_1(cls):
                    return cls("US_GOV_EAST_1")
                
                @schemas.classproperty
                def US_EAST_1(cls):
                    return cls("US_EAST_1")
                
                @schemas.classproperty
                def US_EAST_2(cls):
                    return cls("US_EAST_2")
                
                @schemas.classproperty
                def US_WEST_1(cls):
                    return cls("US_WEST_1")
                
                @schemas.classproperty
                def US_WEST_2(cls):
                    return cls("US_WEST_2")
                
                @schemas.classproperty
                def CA_CENTRAL_1(cls):
                    return cls("CA_CENTRAL_1")
                
                @schemas.classproperty
                def EU_NORTH_1(cls):
                    return cls("EU_NORTH_1")
                
                @schemas.classproperty
                def EU_WEST_1(cls):
                    return cls("EU_WEST_1")
                
                @schemas.classproperty
                def EU_WEST_2(cls):
                    return cls("EU_WEST_2")
                
                @schemas.classproperty
                def EU_WEST_3(cls):
                    return cls("EU_WEST_3")
                
                @schemas.classproperty
                def EU_CENTRAL_1(cls):
                    return cls("EU_CENTRAL_1")
                
                @schemas.classproperty
                def AP_EAST_1(cls):
                    return cls("AP_EAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_1(cls):
                    return cls("AP_NORTHEAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_2(cls):
                    return cls("AP_NORTHEAST_2")
                
                @schemas.classproperty
                def AP_NORTHEAST_3(cls):
                    return cls("AP_NORTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTHEAST_1(cls):
                    return cls("AP_SOUTHEAST_1")
                
                @schemas.classproperty
                def AP_SOUTHEAST_2(cls):
                    return cls("AP_SOUTHEAST_2")
                
                @schemas.classproperty
                def AP_SOUTHEAST_3(cls):
                    return cls("AP_SOUTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTH_1(cls):
                    return cls("AP_SOUTH_1")
                
                @schemas.classproperty
                def SA_EAST_1(cls):
                    return cls("SA_EAST_1")
                
                @schemas.classproperty
                def CN_NORTH_1(cls):
                    return cls("CN_NORTH_1")
                
                @schemas.classproperty
                def CN_NORTHWEST_1(cls):
                    return cls("CN_NORTHWEST_1")
                
                @schemas.classproperty
                def ME_SOUTH_1(cls):
                    return cls("ME_SOUTH_1")
                
                @schemas.classproperty
                def AF_SOUTH_1(cls):
                    return cls("AF_SOUTH_1")
                
                @schemas.classproperty
                def EU_SOUTH_1(cls):
                    return cls("EU_SOUTH_1")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
            name = schemas.StrSchema
            __annotations__ = {
                "provider": provider,
                "additionalStorageClasses": additionalStorageClasses,
                "bucket": bucket,
                "delimiter": delimiter,
                "includeTags": includeTags,
                "prefix": prefix,
                "public": public,
                "region": region,
                "name": name,
            }
    
    provider: MetaOapg.properties.provider
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalStorageClasses"]) -> MetaOapg.properties.additionalStorageClasses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket"]) -> MetaOapg.properties.bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delimiter"]) -> MetaOapg.properties.delimiter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeTags"]) -> MetaOapg.properties.includeTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["provider", "additionalStorageClasses", "bucket", "delimiter", "includeTags", "prefix", "public", "region", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalStorageClasses"]) -> typing.Union[MetaOapg.properties.additionalStorageClasses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket"]) -> typing.Union[MetaOapg.properties.bucket, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delimiter"]) -> typing.Union[MetaOapg.properties.delimiter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeTags"]) -> typing.Union[MetaOapg.properties.includeTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> typing.Union[MetaOapg.properties.public, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["provider", "additionalStorageClasses", "bucket", "delimiter", "includeTags", "prefix", "public", "region", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        provider: typing.Union[MetaOapg.properties.provider, str, ],
        additionalStorageClasses: typing.Union[MetaOapg.properties.additionalStorageClasses, list, tuple, schemas.Unset] = schemas.unset,
        bucket: typing.Union[MetaOapg.properties.bucket, str, schemas.Unset] = schemas.unset,
        delimiter: typing.Union[MetaOapg.properties.delimiter, str, schemas.Unset] = schemas.unset,
        includeTags: typing.Union[MetaOapg.properties.includeTags, bool, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        public: typing.Union[MetaOapg.properties.public, bool, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataLakeS3Store':
        return super().__new__(
            cls,
            *_args,
            provider=provider,
            additionalStorageClasses=additionalStorageClasses,
            bucket=bucket,
            delimiter=delimiter,
            includeTags=includeTags,
            prefix=prefix,
            public=public,
            region=region,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
