# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class GroupSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Collection of settings that configures the project.
    """


    class MetaOapg:
        
        class properties:
            isCollectDatabaseSpecificsStatisticsEnabled = schemas.BoolSchema
            isDataExplorerEnabled = schemas.BoolSchema
            isExtendedStorageSizesEnabled = schemas.BoolSchema
            isPerformanceAdvisorEnabled = schemas.BoolSchema
            isRealtimePerformancePanelEnabled = schemas.BoolSchema
            isSchemaAdvisorEnabled = schemas.BoolSchema
            __annotations__ = {
                "isCollectDatabaseSpecificsStatisticsEnabled": isCollectDatabaseSpecificsStatisticsEnabled,
                "isDataExplorerEnabled": isDataExplorerEnabled,
                "isExtendedStorageSizesEnabled": isExtendedStorageSizesEnabled,
                "isPerformanceAdvisorEnabled": isPerformanceAdvisorEnabled,
                "isRealtimePerformancePanelEnabled": isRealtimePerformancePanelEnabled,
                "isSchemaAdvisorEnabled": isSchemaAdvisorEnabled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCollectDatabaseSpecificsStatisticsEnabled"]) -> MetaOapg.properties.isCollectDatabaseSpecificsStatisticsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDataExplorerEnabled"]) -> MetaOapg.properties.isDataExplorerEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isExtendedStorageSizesEnabled"]) -> MetaOapg.properties.isExtendedStorageSizesEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPerformanceAdvisorEnabled"]) -> MetaOapg.properties.isPerformanceAdvisorEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRealtimePerformancePanelEnabled"]) -> MetaOapg.properties.isRealtimePerformancePanelEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSchemaAdvisorEnabled"]) -> MetaOapg.properties.isSchemaAdvisorEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isCollectDatabaseSpecificsStatisticsEnabled", "isDataExplorerEnabled", "isExtendedStorageSizesEnabled", "isPerformanceAdvisorEnabled", "isRealtimePerformancePanelEnabled", "isSchemaAdvisorEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCollectDatabaseSpecificsStatisticsEnabled"]) -> typing.Union[MetaOapg.properties.isCollectDatabaseSpecificsStatisticsEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDataExplorerEnabled"]) -> typing.Union[MetaOapg.properties.isDataExplorerEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isExtendedStorageSizesEnabled"]) -> typing.Union[MetaOapg.properties.isExtendedStorageSizesEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPerformanceAdvisorEnabled"]) -> typing.Union[MetaOapg.properties.isPerformanceAdvisorEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRealtimePerformancePanelEnabled"]) -> typing.Union[MetaOapg.properties.isRealtimePerformancePanelEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSchemaAdvisorEnabled"]) -> typing.Union[MetaOapg.properties.isSchemaAdvisorEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isCollectDatabaseSpecificsStatisticsEnabled", "isDataExplorerEnabled", "isExtendedStorageSizesEnabled", "isPerformanceAdvisorEnabled", "isRealtimePerformancePanelEnabled", "isSchemaAdvisorEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isCollectDatabaseSpecificsStatisticsEnabled: typing.Union[MetaOapg.properties.isCollectDatabaseSpecificsStatisticsEnabled, bool, schemas.Unset] = schemas.unset,
        isDataExplorerEnabled: typing.Union[MetaOapg.properties.isDataExplorerEnabled, bool, schemas.Unset] = schemas.unset,
        isExtendedStorageSizesEnabled: typing.Union[MetaOapg.properties.isExtendedStorageSizesEnabled, bool, schemas.Unset] = schemas.unset,
        isPerformanceAdvisorEnabled: typing.Union[MetaOapg.properties.isPerformanceAdvisorEnabled, bool, schemas.Unset] = schemas.unset,
        isRealtimePerformancePanelEnabled: typing.Union[MetaOapg.properties.isRealtimePerformancePanelEnabled, bool, schemas.Unset] = schemas.unset,
        isSchemaAdvisorEnabled: typing.Union[MetaOapg.properties.isSchemaAdvisorEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupSettings':
        return super().__new__(
            cls,
            *_args,
            isCollectDatabaseSpecificsStatisticsEnabled=isCollectDatabaseSpecificsStatisticsEnabled,
            isDataExplorerEnabled=isDataExplorerEnabled,
            isExtendedStorageSizesEnabled=isExtendedStorageSizesEnabled,
            isPerformanceAdvisorEnabled=isPerformanceAdvisorEnabled,
            isRealtimePerformancePanelEnabled=isRealtimePerformancePanelEnabled,
            isSchemaAdvisorEnabled=isSchemaAdvisorEnabled,
            _configuration=_configuration,
            **kwargs,
        )
