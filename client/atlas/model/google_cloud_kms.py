# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class GoogleCloudKMS(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details that define the configuration of Encryption at Rest using Google Cloud Key Management Service (KMS).
    """


    class MetaOapg:
        
        class properties:
            enabled = schemas.BoolSchema
            keyVersionResourceID = schemas.StrSchema
            serviceAccountKey = schemas.StrSchema
            valid = schemas.BoolSchema
            __annotations__ = {
                "enabled": enabled,
                "keyVersionResourceID": keyVersionResourceID,
                "serviceAccountKey": serviceAccountKey,
                "valid": valid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyVersionResourceID"]) -> MetaOapg.properties.keyVersionResourceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceAccountKey"]) -> MetaOapg.properties.serviceAccountKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "keyVersionResourceID", "serviceAccountKey", "valid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyVersionResourceID"]) -> typing.Union[MetaOapg.properties.keyVersionResourceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceAccountKey"]) -> typing.Union[MetaOapg.properties.serviceAccountKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> typing.Union[MetaOapg.properties.valid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "keyVersionResourceID", "serviceAccountKey", "valid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        keyVersionResourceID: typing.Union[MetaOapg.properties.keyVersionResourceID, str, schemas.Unset] = schemas.unset,
        serviceAccountKey: typing.Union[MetaOapg.properties.serviceAccountKey, str, schemas.Unset] = schemas.unset,
        valid: typing.Union[MetaOapg.properties.valid, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoogleCloudKMS':
        return super().__new__(
            cls,
            *_args,
            enabled=enabled,
            keyVersionResourceID=keyVersionResourceID,
            serviceAccountKey=serviceAccountKey,
            valid=valid,
            _configuration=_configuration,
            **kwargs,
        )
