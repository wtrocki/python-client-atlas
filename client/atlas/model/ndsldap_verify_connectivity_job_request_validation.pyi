# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class NDSLDAPVerifyConnectivityJobRequestValidation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    One test that MongoDB Cloud runs to test verification of the provided Lightweight Directory Access Protocol (LDAP) over Transport Layer Security (TLS) configuration details.
    """


    class MetaOapg:
        
        class properties:
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FAIL(cls):
                    return cls("FAIL")
                
                @schemas.classproperty
                def OK(cls):
                    return cls("OK")
            
            
            class validationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUTHENTICATE(cls):
                    return cls("AUTHENTICATE")
                
                @schemas.classproperty
                def AUTHORIZATION_ENABLED(cls):
                    return cls("AUTHORIZATION_ENABLED")
                
                @schemas.classproperty
                def CONNECT(cls):
                    return cls("CONNECT")
                
                @schemas.classproperty
                def PARSE_AUTHZ_QUERY(cls):
                    return cls("PARSE_AUTHZ_QUERY")
                
                @schemas.classproperty
                def QUERY_SERVER(cls):
                    return cls("QUERY_SERVER")
                
                @schemas.classproperty
                def SERVER_SPECIFIED(cls):
                    return cls("SERVER_SPECIFIED")
                
                @schemas.classproperty
                def TEMPLATE(cls):
                    return cls("TEMPLATE")
            __annotations__ = {
                "status": status,
                "validationType": validationType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationType"]) -> MetaOapg.properties.validationType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "validationType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationType"]) -> typing.Union[MetaOapg.properties.validationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "validationType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        validationType: typing.Union[MetaOapg.properties.validationType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NDSLDAPVerifyConnectivityJobRequestValidation':
        return super().__new__(
            cls,
            *_args,
            status=status,
            validationType=validationType,
            _configuration=_configuration,
            **kwargs,
        )
