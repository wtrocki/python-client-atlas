# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class IngestionPipelineRun(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Run details of a Data Lake Pipeline.
    """


    class MetaOapg:
        
        class properties:
            
            
            class _id(
                schemas.StrSchema
            ):
                pass
            
            
            class backupFrequencyType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("HOURLY")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("DAILY")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("WEEKLY")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("MONTHLY")
                
                @schemas.classproperty
                def ON_DEMAND(cls):
                    return cls("ON_DEMAND")
            createdDate = schemas.DateTimeSchema
            datasetName = schemas.StrSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            lastUpdatedDate = schemas.DateTimeSchema
            
            
            class phase(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SNAPSHOT(cls):
                    return cls("SNAPSHOT")
                
                @schemas.classproperty
                def EXPORT(cls):
                    return cls("EXPORT")
                
                @schemas.classproperty
                def INGESTION(cls):
                    return cls("INGESTION")
            
            
            class pipelineId(
                schemas.StrSchema
            ):
                pass
            
            
            class snapshotId(
                schemas.StrSchema
            ):
                pass
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("IN_PROGRESS")
                
                @schemas.classproperty
                def DONE(cls):
                    return cls("DONE")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def DATASET_DELETED(cls):
                    return cls("DATASET_DELETED")
        
            @staticmethod
            def stats() -> typing.Type['PipelineRunStats']:
                return PipelineRunStats
            __annotations__ = {
                "_id": _id,
                "backupFrequencyType": backupFrequencyType,
                "createdDate": createdDate,
                "datasetName": datasetName,
                "groupId": groupId,
                "lastUpdatedDate": lastUpdatedDate,
                "phase": phase,
                "pipelineId": pipelineId,
                "snapshotId": snapshotId,
                "state": state,
                "stats": stats,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backupFrequencyType"]) -> MetaOapg.properties.backupFrequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetName"]) -> MetaOapg.properties.datasetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdatedDate"]) -> MetaOapg.properties.lastUpdatedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phase"]) -> MetaOapg.properties.phase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pipelineId"]) -> MetaOapg.properties.pipelineId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotId"]) -> MetaOapg.properties.snapshotId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> 'PipelineRunStats': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_id", "backupFrequencyType", "createdDate", "datasetName", "groupId", "lastUpdatedDate", "phase", "pipelineId", "snapshotId", "state", "stats", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backupFrequencyType"]) -> typing.Union[MetaOapg.properties.backupFrequencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> typing.Union[MetaOapg.properties.createdDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetName"]) -> typing.Union[MetaOapg.properties.datasetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdatedDate"]) -> typing.Union[MetaOapg.properties.lastUpdatedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phase"]) -> typing.Union[MetaOapg.properties.phase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pipelineId"]) -> typing.Union[MetaOapg.properties.pipelineId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotId"]) -> typing.Union[MetaOapg.properties.snapshotId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union['PipelineRunStats', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_id", "backupFrequencyType", "createdDate", "datasetName", "groupId", "lastUpdatedDate", "phase", "pipelineId", "snapshotId", "state", "stats", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        backupFrequencyType: typing.Union[MetaOapg.properties.backupFrequencyType, str, schemas.Unset] = schemas.unset,
        createdDate: typing.Union[MetaOapg.properties.createdDate, str, datetime, schemas.Unset] = schemas.unset,
        datasetName: typing.Union[MetaOapg.properties.datasetName, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        lastUpdatedDate: typing.Union[MetaOapg.properties.lastUpdatedDate, str, datetime, schemas.Unset] = schemas.unset,
        phase: typing.Union[MetaOapg.properties.phase, str, schemas.Unset] = schemas.unset,
        pipelineId: typing.Union[MetaOapg.properties.pipelineId, str, schemas.Unset] = schemas.unset,
        snapshotId: typing.Union[MetaOapg.properties.snapshotId, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        stats: typing.Union['PipelineRunStats', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IngestionPipelineRun':
        return super().__new__(
            cls,
            *_args,
            _id=_id,
            backupFrequencyType=backupFrequencyType,
            createdDate=createdDate,
            datasetName=datasetName,
            groupId=groupId,
            lastUpdatedDate=lastUpdatedDate,
            phase=phase,
            pipelineId=pipelineId,
            snapshotId=snapshotId,
            state=state,
            stats=stats,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.pipeline_run_stats import PipelineRunStats
