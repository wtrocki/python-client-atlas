# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DefaultAlertViewForNdsGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Other alerts which don't have extra details beside of basic one.
    """


    class MetaOapg:
        required = {
            "acknowledgedUntil",
            "created",
            "alertConfigId",
            "eventTypeName",
            "id",
            "updated",
            "status",
        }
        
        class properties:
            acknowledgedUntil = schemas.DateTimeSchema
            
            
            class alertConfigId(
                schemas.StrSchema
            ):
                pass
            created = schemas.DateTimeSchema
            
            
            class eventTypeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CREDIT_CARD_ABOUT_TO_EXPIRE(cls):
                    return cls("CREDIT_CARD_ABOUT_TO_EXPIRE")
                
                @schemas.classproperty
                def PENDING_INVOICE_OVER_THRESHOLD(cls):
                    return cls("PENDING_INVOICE_OVER_THRESHOLD")
                
                @schemas.classproperty
                def DAILY_BILL_OVER_THRESHOLD(cls):
                    return cls("DAILY_BILL_OVER_THRESHOLD")
                
                @schemas.classproperty
                def CPS_SNAPSHOT_SUCCESSFUL(cls):
                    return cls("CPS_SNAPSHOT_SUCCESSFUL")
                
                @schemas.classproperty
                def CPS_SNAPSHOT_BEHIND(cls):
                    return cls("CPS_SNAPSHOT_BEHIND")
                
                @schemas.classproperty
                def CPS_SNAPSHOT_FALLBACK_SUCCESSFUL(cls):
                    return cls("CPS_SNAPSHOT_FALLBACK_SUCCESSFUL")
                
                @schemas.classproperty
                def CPS_SNAPSHOT_FALLBACK_FAILED(cls):
                    return cls("CPS_SNAPSHOT_FALLBACK_FAILED")
                
                @schemas.classproperty
                def CPS_RESTORE_SUCCESSFUL(cls):
                    return cls("CPS_RESTORE_SUCCESSFUL")
                
                @schemas.classproperty
                def CPS_EXPORT_SUCCESSFUL(cls):
                    return cls("CPS_EXPORT_SUCCESSFUL")
                
                @schemas.classproperty
                def CPS_RESTORE_FAILED(cls):
                    return cls("CPS_RESTORE_FAILED")
                
                @schemas.classproperty
                def CPS_EXPORT_FAILED(cls):
                    return cls("CPS_EXPORT_FAILED")
                
                @schemas.classproperty
                def CPS_SNAPSHOT_DOWNLOAD_REQUEST_FAILED(cls):
                    return cls("CPS_SNAPSHOT_DOWNLOAD_REQUEST_FAILED")
                
                @schemas.classproperty
                def AWS_ENCRYPTION_KEY_NEEDS_ROTATION(cls):
                    return cls("AWS_ENCRYPTION_KEY_NEEDS_ROTATION")
                
                @schemas.classproperty
                def AZURE_ENCRYPTION_KEY_NEEDS_ROTATION(cls):
                    return cls("AZURE_ENCRYPTION_KEY_NEEDS_ROTATION")
                
                @schemas.classproperty
                def GCP_ENCRYPTION_KEY_NEEDS_ROTATION(cls):
                    return cls("GCP_ENCRYPTION_KEY_NEEDS_ROTATION")
                
                @schemas.classproperty
                def FTS_INDEX_DELETION_FAILED(cls):
                    return cls("FTS_INDEX_DELETION_FAILED")
                
                @schemas.classproperty
                def FTS_INDEX_BUILD_COMPLETE(cls):
                    return cls("FTS_INDEX_BUILD_COMPLETE")
                
                @schemas.classproperty
                def FTS_INDEX_BUILD_FAILED(cls):
                    return cls("FTS_INDEX_BUILD_FAILED")
                
                @schemas.classproperty
                def USERS_WITHOUT_MULTI_FACTOR_AUTH(cls):
                    return cls("USERS_WITHOUT_MULTI_FACTOR_AUTH")
                
                @schemas.classproperty
                def USERS_WITHOUT_MULTIFACTOR_AUTH(cls):
                    return cls("USERS_WITHOUT_MULTIFACTOR_AUTH")
                
                @schemas.classproperty
                def MAX_M0_CLUSTERS_PER_GROUP_EXCEEDED(cls):
                    return cls("MAX_M0_CLUSTERS_PER_GROUP_EXCEEDED")
                
                @schemas.classproperty
                def CLUSTER_INSTANCE_STOP_START(cls):
                    return cls("CLUSTER_INSTANCE_STOP_START")
                
                @schemas.classproperty
                def CLUSTER_INSTANCE_RESYNC_REQUESTED(cls):
                    return cls("CLUSTER_INSTANCE_RESYNC_REQUESTED")
                
                @schemas.classproperty
                def CLUSTER_INSTANCE_UPDATE_REQUESTED(cls):
                    return cls("CLUSTER_INSTANCE_UPDATE_REQUESTED")
                
                @schemas.classproperty
                def SAMPLE_DATASET_LOAD_REQUESTED(cls):
                    return cls("SAMPLE_DATASET_LOAD_REQUESTED")
                
                @schemas.classproperty
                def TENANT_UPGRADE_TO_SERVERLESS_SUCCESSFUL(cls):
                    return cls("TENANT_UPGRADE_TO_SERVERLESS_SUCCESSFUL")
                
                @schemas.classproperty
                def TENANT_UPGRADE_TO_SERVERLESS_FAILED(cls):
                    return cls("TENANT_UPGRADE_TO_SERVERLESS_FAILED")
                
                @schemas.classproperty
                def MAINTENANCE_IN_ADVANCED(cls):
                    return cls("MAINTENANCE_IN_ADVANCED")
                
                @schemas.classproperty
                def MAINTENANCE_AUTO_DEFERRED(cls):
                    return cls("MAINTENANCE_AUTO_DEFERRED")
                
                @schemas.classproperty
                def MAINTENANCE_STARTED(cls):
                    return cls("MAINTENANCE_STARTED")
                
                @schemas.classproperty
                def MAINTENANCE_NO_LONGER_NEEDED(cls):
                    return cls("MAINTENANCE_NO_LONGER_NEEDED")
                
                @schemas.classproperty
                def NDS_X509_USER_AUTHENTICATION_CUSTOMER_CA_EXPIRATION_CHECK(cls):
                    return cls("NDS_X509_USER_AUTHENTICATION_CUSTOMER_CA_EXPIRATION_CHECK")
                
                @schemas.classproperty
                def NDS_X509_USER_AUTHENTICATION_CUSTOMER_CRL_EXPIRATION_CHECK(cls):
                    return cls("NDS_X509_USER_AUTHENTICATION_CUSTOMER_CRL_EXPIRATION_CHECK")
                
                @schemas.classproperty
                def NDS_X509_USER_AUTHENTICATION_MANAGED_USER_CERTS_EXPIRATION_CHECK(cls):
                    return cls("NDS_X509_USER_AUTHENTICATION_MANAGED_USER_CERTS_EXPIRATION_CHECK")
                
                @schemas.classproperty
                def ONLINE_ARCHIVE_INSUFFICIENT_INDEXES_CHECK(cls):
                    return cls("ONLINE_ARCHIVE_INSUFFICIENT_INDEXES_CHECK")
                
                @schemas.classproperty
                def ONLINE_ARCHIVE_MAX_CONSECUTIVE_OFFLOAD_WINDOWS_CHECK(cls):
                    return cls("ONLINE_ARCHIVE_MAX_CONSECUTIVE_OFFLOAD_WINDOWS_CHECK")
                
                @schemas.classproperty
                def OUTSIDE_SERVERLESS_METRIC_THRESHOLD(cls):
                    return cls("OUTSIDE_SERVERLESS_METRIC_THRESHOLD")
                
                @schemas.classproperty
                def JOINED_GROUP(cls):
                    return cls("JOINED_GROUP")
                
                @schemas.classproperty
                def REMOVED_FROM_GROUP(cls):
                    return cls("REMOVED_FROM_GROUP")
                
                @schemas.classproperty
                def USER_ROLES_CHANGED_AUDIT(cls):
                    return cls("USER_ROLES_CHANGED_AUDIT")
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("CLOSED")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("OPEN")
                
                @schemas.classproperty
                def TRACKING(cls):
                    return cls("TRACKING")
            updated = schemas.DateTimeSchema
            
            
            class acknowledgementComment(
                schemas.StrSchema
            ):
                pass
            acknowledgingUsername = schemas.StrSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            lastNotified = schemas.DateTimeSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            resolved = schemas.DateTimeSchema
            __annotations__ = {
                "acknowledgedUntil": acknowledgedUntil,
                "alertConfigId": alertConfigId,
                "created": created,
                "eventTypeName": eventTypeName,
                "id": id,
                "status": status,
                "updated": updated,
                "acknowledgementComment": acknowledgementComment,
                "acknowledgingUsername": acknowledgingUsername,
                "groupId": groupId,
                "lastNotified": lastNotified,
                "links": links,
                "orgId": orgId,
                "resolved": resolved,
            }
    
    acknowledgedUntil: MetaOapg.properties.acknowledgedUntil
    created: MetaOapg.properties.created
    alertConfigId: MetaOapg.properties.alertConfigId
    eventTypeName: MetaOapg.properties.eventTypeName
    id: MetaOapg.properties.id
    updated: MetaOapg.properties.updated
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgedUntil"]) -> MetaOapg.properties.acknowledgedUntil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTypeName"]) -> MetaOapg.properties.eventTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgementComment"]) -> MetaOapg.properties.acknowledgementComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgingUsername"]) -> MetaOapg.properties.acknowledgingUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastNotified"]) -> MetaOapg.properties.lastNotified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolved"]) -> MetaOapg.properties.resolved: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acknowledgedUntil", "alertConfigId", "created", "eventTypeName", "id", "status", "updated", "acknowledgementComment", "acknowledgingUsername", "groupId", "lastNotified", "links", "orgId", "resolved", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgedUntil"]) -> MetaOapg.properties.acknowledgedUntil: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTypeName"]) -> MetaOapg.properties.eventTypeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgementComment"]) -> typing.Union[MetaOapg.properties.acknowledgementComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgingUsername"]) -> typing.Union[MetaOapg.properties.acknowledgingUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastNotified"]) -> typing.Union[MetaOapg.properties.lastNotified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolved"]) -> typing.Union[MetaOapg.properties.resolved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acknowledgedUntil", "alertConfigId", "created", "eventTypeName", "id", "status", "updated", "acknowledgementComment", "acknowledgingUsername", "groupId", "lastNotified", "links", "orgId", "resolved", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        acknowledgedUntil: typing.Union[MetaOapg.properties.acknowledgedUntil, str, datetime, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        alertConfigId: typing.Union[MetaOapg.properties.alertConfigId, str, ],
        eventTypeName: typing.Union[MetaOapg.properties.eventTypeName, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        acknowledgementComment: typing.Union[MetaOapg.properties.acknowledgementComment, str, schemas.Unset] = schemas.unset,
        acknowledgingUsername: typing.Union[MetaOapg.properties.acknowledgingUsername, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        lastNotified: typing.Union[MetaOapg.properties.lastNotified, str, datetime, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        resolved: typing.Union[MetaOapg.properties.resolved, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DefaultAlertViewForNdsGroup':
        return super().__new__(
            cls,
            *_args,
            acknowledgedUntil=acknowledgedUntil,
            created=created,
            alertConfigId=alertConfigId,
            eventTypeName=eventTypeName,
            id=id,
            updated=updated,
            status=status,
            acknowledgementComment=acknowledgementComment,
            acknowledgingUsername=acknowledgingUsername,
            groupId=groupId,
            lastNotified=lastNotified,
            links=links,
            orgId=orgId,
            resolved=resolved,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
