# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ServerlessInstanceDescription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Group of settings that configure a MongoDB serverless instance.
    """


    class MetaOapg:
        required = {
            "providerSettings",
        }
        
        class properties:
        
            @staticmethod
            def providerSettings() -> typing.Type['ServerlessProviderSettings']:
                return ServerlessProviderSettings
        
            @staticmethod
            def connectionStrings() -> typing.Type['ServerlessInstanceDescriptionConnectionStrings']:
                return ServerlessInstanceDescriptionConnectionStrings
            createDate = schemas.DateTimeSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class mongoDBVersion(
                schemas.StrSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def serverlessBackupOptions() -> typing.Type['ServerlessBackupOptions']:
                return ServerlessBackupOptions
            
            
            class stateName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IDLE(cls):
                    return cls("IDLE")
                
                @schemas.classproperty
                def CREATING(cls):
                    return cls("CREATING")
                
                @schemas.classproperty
                def UPDATING(cls):
                    return cls("UPDATING")
                
                @schemas.classproperty
                def DELETING(cls):
                    return cls("DELETING")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
                
                @schemas.classproperty
                def REPAIRING(cls):
                    return cls("REPAIRING")
            terminationProtectionEnabled = schemas.BoolSchema
            __annotations__ = {
                "providerSettings": providerSettings,
                "connectionStrings": connectionStrings,
                "createDate": createDate,
                "groupId": groupId,
                "id": id,
                "links": links,
                "mongoDBVersion": mongoDBVersion,
                "name": name,
                "serverlessBackupOptions": serverlessBackupOptions,
                "stateName": stateName,
                "terminationProtectionEnabled": terminationProtectionEnabled,
            }
    
    providerSettings: 'ServerlessProviderSettings'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerSettings"]) -> 'ServerlessProviderSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionStrings"]) -> 'ServerlessInstanceDescriptionConnectionStrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoDBVersion"]) -> MetaOapg.properties.mongoDBVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverlessBackupOptions"]) -> 'ServerlessBackupOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationProtectionEnabled"]) -> MetaOapg.properties.terminationProtectionEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["providerSettings", "connectionStrings", "createDate", "groupId", "id", "links", "mongoDBVersion", "name", "serverlessBackupOptions", "stateName", "terminationProtectionEnabled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerSettings"]) -> 'ServerlessProviderSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionStrings"]) -> typing.Union['ServerlessInstanceDescriptionConnectionStrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoDBVersion"]) -> typing.Union[MetaOapg.properties.mongoDBVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverlessBackupOptions"]) -> typing.Union['ServerlessBackupOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateName"]) -> typing.Union[MetaOapg.properties.stateName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationProtectionEnabled"]) -> typing.Union[MetaOapg.properties.terminationProtectionEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["providerSettings", "connectionStrings", "createDate", "groupId", "id", "links", "mongoDBVersion", "name", "serverlessBackupOptions", "stateName", "terminationProtectionEnabled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        providerSettings: 'ServerlessProviderSettings',
        connectionStrings: typing.Union['ServerlessInstanceDescriptionConnectionStrings', schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, datetime, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        mongoDBVersion: typing.Union[MetaOapg.properties.mongoDBVersion, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        serverlessBackupOptions: typing.Union['ServerlessBackupOptions', schemas.Unset] = schemas.unset,
        stateName: typing.Union[MetaOapg.properties.stateName, str, schemas.Unset] = schemas.unset,
        terminationProtectionEnabled: typing.Union[MetaOapg.properties.terminationProtectionEnabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServerlessInstanceDescription':
        return super().__new__(
            cls,
            *_args,
            providerSettings=providerSettings,
            connectionStrings=connectionStrings,
            createDate=createDate,
            groupId=groupId,
            id=id,
            links=links,
            mongoDBVersion=mongoDBVersion,
            name=name,
            serverlessBackupOptions=serverlessBackupOptions,
            stateName=stateName,
            terminationProtectionEnabled=terminationProtectionEnabled,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
from atlas.model.serverless_backup_options import ServerlessBackupOptions
from atlas.model.serverless_instance_description_connection_strings import ServerlessInstanceDescriptionConnectionStrings
from atlas.model.serverless_provider_settings import ServerlessProviderSettings
