# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ClusterDescriptionProcessArgs(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class defaultReadConcern(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "local": "LOCAL",
                        "available": "AVAILABLE",
                        "majority": "MAJORITY",
                        "linearizable": "LINEARIZABLE",
                        "snapshot": "SNAPSHOT",
                    }
                
                @schemas.classproperty
                def LOCAL(cls):
                    return cls("local")
                
                @schemas.classproperty
                def AVAILABLE(cls):
                    return cls("available")
                
                @schemas.classproperty
                def MAJORITY(cls):
                    return cls("majority")
                
                @schemas.classproperty
                def LINEARIZABLE(cls):
                    return cls("linearizable")
                
                @schemas.classproperty
                def SNAPSHOT(cls):
                    return cls("snapshot")
            defaultWriteConcern = schemas.StrSchema
            failIndexKeyTooLong = schemas.BoolSchema
            javascriptEnabled = schemas.BoolSchema
            
            
            class minimumEnabledTlsProtocol(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "TLS1_0": "POSITIVE_0",
                        "TLS1_1": "POSITIVE_1",
                        "TLS1_2": "POSITIVE_2",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls("TLS1_0")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("TLS1_1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("TLS1_2")
            noTableScan = schemas.BoolSchema
            
            
            class oplogMinRetentionHours(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oplogMinRetentionHours':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class oplogSizeMB(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oplogSizeMB':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sampleRefreshIntervalBIConnector(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
            
            
            class sampleSizeBIConnector(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
            __annotations__ = {
                "defaultReadConcern": defaultReadConcern,
                "defaultWriteConcern": defaultWriteConcern,
                "failIndexKeyTooLong": failIndexKeyTooLong,
                "javascriptEnabled": javascriptEnabled,
                "minimumEnabledTlsProtocol": minimumEnabledTlsProtocol,
                "noTableScan": noTableScan,
                "oplogMinRetentionHours": oplogMinRetentionHours,
                "oplogSizeMB": oplogSizeMB,
                "sampleRefreshIntervalBIConnector": sampleRefreshIntervalBIConnector,
                "sampleSizeBIConnector": sampleSizeBIConnector,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultReadConcern"]) -> MetaOapg.properties.defaultReadConcern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultWriteConcern"]) -> MetaOapg.properties.defaultWriteConcern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failIndexKeyTooLong"]) -> MetaOapg.properties.failIndexKeyTooLong: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["javascriptEnabled"]) -> MetaOapg.properties.javascriptEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumEnabledTlsProtocol"]) -> MetaOapg.properties.minimumEnabledTlsProtocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noTableScan"]) -> MetaOapg.properties.noTableScan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oplogMinRetentionHours"]) -> MetaOapg.properties.oplogMinRetentionHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oplogSizeMB"]) -> MetaOapg.properties.oplogSizeMB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleRefreshIntervalBIConnector"]) -> MetaOapg.properties.sampleRefreshIntervalBIConnector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleSizeBIConnector"]) -> MetaOapg.properties.sampleSizeBIConnector: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultReadConcern", "defaultWriteConcern", "failIndexKeyTooLong", "javascriptEnabled", "minimumEnabledTlsProtocol", "noTableScan", "oplogMinRetentionHours", "oplogSizeMB", "sampleRefreshIntervalBIConnector", "sampleSizeBIConnector", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultReadConcern"]) -> typing.Union[MetaOapg.properties.defaultReadConcern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultWriteConcern"]) -> typing.Union[MetaOapg.properties.defaultWriteConcern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failIndexKeyTooLong"]) -> typing.Union[MetaOapg.properties.failIndexKeyTooLong, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["javascriptEnabled"]) -> typing.Union[MetaOapg.properties.javascriptEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumEnabledTlsProtocol"]) -> typing.Union[MetaOapg.properties.minimumEnabledTlsProtocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noTableScan"]) -> typing.Union[MetaOapg.properties.noTableScan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oplogMinRetentionHours"]) -> typing.Union[MetaOapg.properties.oplogMinRetentionHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oplogSizeMB"]) -> typing.Union[MetaOapg.properties.oplogSizeMB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleRefreshIntervalBIConnector"]) -> typing.Union[MetaOapg.properties.sampleRefreshIntervalBIConnector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleSizeBIConnector"]) -> typing.Union[MetaOapg.properties.sampleSizeBIConnector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultReadConcern", "defaultWriteConcern", "failIndexKeyTooLong", "javascriptEnabled", "minimumEnabledTlsProtocol", "noTableScan", "oplogMinRetentionHours", "oplogSizeMB", "sampleRefreshIntervalBIConnector", "sampleSizeBIConnector", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        defaultReadConcern: typing.Union[MetaOapg.properties.defaultReadConcern, str, schemas.Unset] = schemas.unset,
        defaultWriteConcern: typing.Union[MetaOapg.properties.defaultWriteConcern, str, schemas.Unset] = schemas.unset,
        failIndexKeyTooLong: typing.Union[MetaOapg.properties.failIndexKeyTooLong, bool, schemas.Unset] = schemas.unset,
        javascriptEnabled: typing.Union[MetaOapg.properties.javascriptEnabled, bool, schemas.Unset] = schemas.unset,
        minimumEnabledTlsProtocol: typing.Union[MetaOapg.properties.minimumEnabledTlsProtocol, str, schemas.Unset] = schemas.unset,
        noTableScan: typing.Union[MetaOapg.properties.noTableScan, bool, schemas.Unset] = schemas.unset,
        oplogMinRetentionHours: typing.Union[MetaOapg.properties.oplogMinRetentionHours, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        oplogSizeMB: typing.Union[MetaOapg.properties.oplogSizeMB, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sampleRefreshIntervalBIConnector: typing.Union[MetaOapg.properties.sampleRefreshIntervalBIConnector, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sampleSizeBIConnector: typing.Union[MetaOapg.properties.sampleSizeBIConnector, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClusterDescriptionProcessArgs':
        return super().__new__(
            cls,
            *_args,
            defaultReadConcern=defaultReadConcern,
            defaultWriteConcern=defaultWriteConcern,
            failIndexKeyTooLong=failIndexKeyTooLong,
            javascriptEnabled=javascriptEnabled,
            minimumEnabledTlsProtocol=minimumEnabledTlsProtocol,
            noTableScan=noTableScan,
            oplogMinRetentionHours=oplogMinRetentionHours,
            oplogSizeMB=oplogSizeMB,
            sampleRefreshIntervalBIConnector=sampleRefreshIntervalBIConnector,
            sampleSizeBIConnector=sampleSizeBIConnector,
            _configuration=_configuration,
            **kwargs,
        )
