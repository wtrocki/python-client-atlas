# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataProtectionSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            copyProtectionEnabled = schemas.BoolSchema
            encryptionAtRestEnabled = schemas.BoolSchema
        
            @staticmethod
            def onDemandPolicyItem() -> typing.Type['ApiPolicyItemView']:
                return ApiPolicyItemView
            pitEnabled = schemas.BoolSchema
            
            
            class projectId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            restoreWindowDays = schemas.Int32Schema
            
            
            class scheduledPolicyItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiPolicyItemView']:
                        return ApiPolicyItemView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiPolicyItemView'], typing.List['ApiPolicyItemView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduledPolicyItems':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiPolicyItemView':
                    return super().__getitem__(i)
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ACTIVE": "ACTIVE",
                        "ENABLING": "ENABLING",
                        "UPDATING": "UPDATING",
                        "DISABLING": "DISABLING",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def ENABLING(cls):
                    return cls("ENABLING")
                
                @schemas.classproperty
                def UPDATING(cls):
                    return cls("UPDATING")
                
                @schemas.classproperty
                def DISABLING(cls):
                    return cls("DISABLING")
            updatedDate = schemas.DateTimeSchema
            updatedUser = schemas.StrSchema
            __annotations__ = {
                "copyProtectionEnabled": copyProtectionEnabled,
                "encryptionAtRestEnabled": encryptionAtRestEnabled,
                "onDemandPolicyItem": onDemandPolicyItem,
                "pitEnabled": pitEnabled,
                "projectId": projectId,
                "restoreWindowDays": restoreWindowDays,
                "scheduledPolicyItems": scheduledPolicyItems,
                "state": state,
                "updatedDate": updatedDate,
                "updatedUser": updatedUser,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyProtectionEnabled"]) -> MetaOapg.properties.copyProtectionEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionAtRestEnabled"]) -> MetaOapg.properties.encryptionAtRestEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onDemandPolicyItem"]) -> 'ApiPolicyItemView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitEnabled"]) -> MetaOapg.properties.pitEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restoreWindowDays"]) -> MetaOapg.properties.restoreWindowDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduledPolicyItems"]) -> MetaOapg.properties.scheduledPolicyItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedDate"]) -> MetaOapg.properties.updatedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedUser"]) -> MetaOapg.properties.updatedUser: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["copyProtectionEnabled", "encryptionAtRestEnabled", "onDemandPolicyItem", "pitEnabled", "projectId", "restoreWindowDays", "scheduledPolicyItems", "state", "updatedDate", "updatedUser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyProtectionEnabled"]) -> typing.Union[MetaOapg.properties.copyProtectionEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionAtRestEnabled"]) -> typing.Union[MetaOapg.properties.encryptionAtRestEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onDemandPolicyItem"]) -> typing.Union['ApiPolicyItemView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitEnabled"]) -> typing.Union[MetaOapg.properties.pitEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restoreWindowDays"]) -> typing.Union[MetaOapg.properties.restoreWindowDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduledPolicyItems"]) -> typing.Union[MetaOapg.properties.scheduledPolicyItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedDate"]) -> typing.Union[MetaOapg.properties.updatedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedUser"]) -> typing.Union[MetaOapg.properties.updatedUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["copyProtectionEnabled", "encryptionAtRestEnabled", "onDemandPolicyItem", "pitEnabled", "projectId", "restoreWindowDays", "scheduledPolicyItems", "state", "updatedDate", "updatedUser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        copyProtectionEnabled: typing.Union[MetaOapg.properties.copyProtectionEnabled, bool, schemas.Unset] = schemas.unset,
        encryptionAtRestEnabled: typing.Union[MetaOapg.properties.encryptionAtRestEnabled, bool, schemas.Unset] = schemas.unset,
        onDemandPolicyItem: typing.Union['ApiPolicyItemView', schemas.Unset] = schemas.unset,
        pitEnabled: typing.Union[MetaOapg.properties.pitEnabled, bool, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, str, schemas.Unset] = schemas.unset,
        restoreWindowDays: typing.Union[MetaOapg.properties.restoreWindowDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scheduledPolicyItems: typing.Union[MetaOapg.properties.scheduledPolicyItems, list, tuple, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        updatedDate: typing.Union[MetaOapg.properties.updatedDate, str, datetime, schemas.Unset] = schemas.unset,
        updatedUser: typing.Union[MetaOapg.properties.updatedUser, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataProtectionSettings':
        return super().__new__(
            cls,
            *_args,
            copyProtectionEnabled=copyProtectionEnabled,
            encryptionAtRestEnabled=encryptionAtRestEnabled,
            onDemandPolicyItem=onDemandPolicyItem,
            pitEnabled=pitEnabled,
            projectId=projectId,
            restoreWindowDays=restoreWindowDays,
            scheduledPolicyItems=scheduledPolicyItems,
            state=state,
            updatedDate=updatedDate,
            updatedUser=updatedUser,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_policy_item_view import ApiPolicyItemView
