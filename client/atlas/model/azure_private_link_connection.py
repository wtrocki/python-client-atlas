# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AzurePrivateLinkConnection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Group of Private Endpoint Service settings.
    """


    class MetaOapg:
        
        class properties:
            errorMessage = schemas.StrSchema
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class privateEndpoints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            regex=[{
                                'pattern': r'^\/subscriptions\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\/resource[gG]roups\/([-\w._()]+)\/providers\/Microsoft\.Network\/privateEndpoints\/([-\w._()]+)',  # noqa: E501
                            }]
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'privateEndpoints':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class privateLinkServiceName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^pls_[0-9a-f]{24}$',  # noqa: E501
                    }]
            privateLinkServiceResourceId = schemas.StrSchema
            regionName = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INITIATING": "INITIATING",
                        "AVAILABLE": "AVAILABLE",
                        "WAITING_FOR_USER": "WAITING_FOR_USER",
                        "FAILED": "FAILED",
                        "DELETING": "DELETING",
                    }
                
                @schemas.classproperty
                def INITIATING(cls):
                    return cls("INITIATING")
                
                @schemas.classproperty
                def AVAILABLE(cls):
                    return cls("AVAILABLE")
                
                @schemas.classproperty
                def WAITING_FOR_USER(cls):
                    return cls("WAITING_FOR_USER")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def DELETING(cls):
                    return cls("DELETING")
            __annotations__ = {
                "errorMessage": errorMessage,
                "id": id,
                "privateEndpoints": privateEndpoints,
                "privateLinkServiceName": privateLinkServiceName,
                "privateLinkServiceResourceId": privateLinkServiceResourceId,
                "regionName": regionName,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessage"]) -> MetaOapg.properties.errorMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateEndpoints"]) -> MetaOapg.properties.privateEndpoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateLinkServiceName"]) -> MetaOapg.properties.privateLinkServiceName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateLinkServiceResourceId"]) -> MetaOapg.properties.privateLinkServiceResourceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regionName"]) -> MetaOapg.properties.regionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorMessage", "id", "privateEndpoints", "privateLinkServiceName", "privateLinkServiceResourceId", "regionName", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessage"]) -> typing.Union[MetaOapg.properties.errorMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateEndpoints"]) -> typing.Union[MetaOapg.properties.privateEndpoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateLinkServiceName"]) -> typing.Union[MetaOapg.properties.privateLinkServiceName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateLinkServiceResourceId"]) -> typing.Union[MetaOapg.properties.privateLinkServiceResourceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regionName"]) -> typing.Union[MetaOapg.properties.regionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorMessage", "id", "privateEndpoints", "privateLinkServiceName", "privateLinkServiceResourceId", "regionName", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorMessage: typing.Union[MetaOapg.properties.errorMessage, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        privateEndpoints: typing.Union[MetaOapg.properties.privateEndpoints, list, tuple, schemas.Unset] = schemas.unset,
        privateLinkServiceName: typing.Union[MetaOapg.properties.privateLinkServiceName, str, schemas.Unset] = schemas.unset,
        privateLinkServiceResourceId: typing.Union[MetaOapg.properties.privateLinkServiceResourceId, str, schemas.Unset] = schemas.unset,
        regionName: typing.Union[MetaOapg.properties.regionName, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AzurePrivateLinkConnection':
        return super().__new__(
            cls,
            *_args,
            errorMessage=errorMessage,
            id=id,
            privateEndpoints=privateEndpoints,
            privateLinkServiceName=privateLinkServiceName,
            privateLinkServiceResourceId=privateLinkServiceResourceId,
            regionName=regionName,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
