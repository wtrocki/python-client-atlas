# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ManagedNamespaces(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "customShardKey",
            "collection",
            "db",
        }
        
        class properties:
            collection = schemas.StrSchema
            customShardKey = schemas.StrSchema
            db = schemas.StrSchema
            isCustomShardKeyHashed = schemas.BoolSchema
            isShardKeyUnique = schemas.BoolSchema
            
            
            class numInitialChunks(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_maximum = 8192
            presplitHashedZones = schemas.BoolSchema
            __annotations__ = {
                "collection": collection,
                "customShardKey": customShardKey,
                "db": db,
                "isCustomShardKeyHashed": isCustomShardKeyHashed,
                "isShardKeyUnique": isShardKeyUnique,
                "numInitialChunks": numInitialChunks,
                "presplitHashedZones": presplitHashedZones,
            }
    
    customShardKey: MetaOapg.properties.customShardKey
    collection: MetaOapg.properties.collection
    db: MetaOapg.properties.db
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customShardKey"]) -> MetaOapg.properties.customShardKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["db"]) -> MetaOapg.properties.db: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCustomShardKeyHashed"]) -> MetaOapg.properties.isCustomShardKeyHashed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isShardKeyUnique"]) -> MetaOapg.properties.isShardKeyUnique: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numInitialChunks"]) -> MetaOapg.properties.numInitialChunks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presplitHashedZones"]) -> MetaOapg.properties.presplitHashedZones: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collection", "customShardKey", "db", "isCustomShardKeyHashed", "isShardKeyUnique", "numInitialChunks", "presplitHashedZones", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customShardKey"]) -> MetaOapg.properties.customShardKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["db"]) -> MetaOapg.properties.db: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCustomShardKeyHashed"]) -> typing.Union[MetaOapg.properties.isCustomShardKeyHashed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isShardKeyUnique"]) -> typing.Union[MetaOapg.properties.isShardKeyUnique, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numInitialChunks"]) -> typing.Union[MetaOapg.properties.numInitialChunks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presplitHashedZones"]) -> typing.Union[MetaOapg.properties.presplitHashedZones, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collection", "customShardKey", "db", "isCustomShardKeyHashed", "isShardKeyUnique", "numInitialChunks", "presplitHashedZones", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customShardKey: typing.Union[MetaOapg.properties.customShardKey, str, ],
        collection: typing.Union[MetaOapg.properties.collection, str, ],
        db: typing.Union[MetaOapg.properties.db, str, ],
        isCustomShardKeyHashed: typing.Union[MetaOapg.properties.isCustomShardKeyHashed, bool, schemas.Unset] = schemas.unset,
        isShardKeyUnique: typing.Union[MetaOapg.properties.isShardKeyUnique, bool, schemas.Unset] = schemas.unset,
        numInitialChunks: typing.Union[MetaOapg.properties.numInitialChunks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        presplitHashedZones: typing.Union[MetaOapg.properties.presplitHashedZones, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ManagedNamespaces':
        return super().__new__(
            cls,
            *_args,
            customShardKey=customShardKey,
            collection=collection,
            db=db,
            isCustomShardKeyHashed=isCustomShardKeyHashed,
            isShardKeyUnique=isShardKeyUnique,
            numInitialChunks=numInitialChunks,
            presplitHashedZones=presplitHashedZones,
            _configuration=_configuration,
            **kwargs,
        )
