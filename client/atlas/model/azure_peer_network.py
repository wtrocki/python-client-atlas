# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AzurePeerNetwork(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Group of Network Peering connection settings.
    """


    class MetaOapg:
        required = {
            "resourceGroupName",
            "azureDirectoryId",
            "vnetName",
            "containerId",
            "azureSubscriptionId",
        }
        
        class properties:
            
            
            class azureDirectoryId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 32
                    min_length = 32
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$',  # noqa: E501
                    }]
            
            
            class azureSubscriptionId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 32
                    min_length = 32
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$',  # noqa: E501
                    }]
            
            
            class containerId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class resourceGroupName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^([-\w._()])+$',  # noqa: E501
                    }]
            
            
            class vnetName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^([-\w._()])+$',  # noqa: E501
                    }]
            errorState = schemas.StrSchema
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ADDING_PEER": "ADDING_PEER",
                        "AVAILABLE": "AVAILABLE",
                        "FAILED": "FAILED",
                        "DELETION_FAILED": "DELETION_FAILED",
                        "DELETING": "DELETING",
                    }
                
                @schemas.classproperty
                def ADDING_PEER(cls):
                    return cls("ADDING_PEER")
                
                @schemas.classproperty
                def AVAILABLE(cls):
                    return cls("AVAILABLE")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def DELETION_FAILED(cls):
                    return cls("DELETION_FAILED")
                
                @schemas.classproperty
                def DELETING(cls):
                    return cls("DELETING")
            __annotations__ = {
                "azureDirectoryId": azureDirectoryId,
                "azureSubscriptionId": azureSubscriptionId,
                "containerId": containerId,
                "resourceGroupName": resourceGroupName,
                "vnetName": vnetName,
                "errorState": errorState,
                "id": id,
                "status": status,
            }
    
    resourceGroupName: MetaOapg.properties.resourceGroupName
    azureDirectoryId: MetaOapg.properties.azureDirectoryId
    vnetName: MetaOapg.properties.vnetName
    containerId: MetaOapg.properties.containerId
    azureSubscriptionId: MetaOapg.properties.azureSubscriptionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureDirectoryId"]) -> MetaOapg.properties.azureDirectoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureSubscriptionId"]) -> MetaOapg.properties.azureSubscriptionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceGroupName"]) -> MetaOapg.properties.resourceGroupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vnetName"]) -> MetaOapg.properties.vnetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorState"]) -> MetaOapg.properties.errorState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["azureDirectoryId", "azureSubscriptionId", "containerId", "resourceGroupName", "vnetName", "errorState", "id", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureDirectoryId"]) -> MetaOapg.properties.azureDirectoryId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureSubscriptionId"]) -> MetaOapg.properties.azureSubscriptionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceGroupName"]) -> MetaOapg.properties.resourceGroupName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vnetName"]) -> MetaOapg.properties.vnetName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorState"]) -> typing.Union[MetaOapg.properties.errorState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["azureDirectoryId", "azureSubscriptionId", "containerId", "resourceGroupName", "vnetName", "errorState", "id", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        resourceGroupName: typing.Union[MetaOapg.properties.resourceGroupName, str, ],
        azureDirectoryId: typing.Union[MetaOapg.properties.azureDirectoryId, str, ],
        vnetName: typing.Union[MetaOapg.properties.vnetName, str, ],
        containerId: typing.Union[MetaOapg.properties.containerId, str, ],
        azureSubscriptionId: typing.Union[MetaOapg.properties.azureSubscriptionId, str, ],
        errorState: typing.Union[MetaOapg.properties.errorState, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AzurePeerNetwork':
        return super().__new__(
            cls,
            *_args,
            resourceGroupName=resourceGroupName,
            azureDirectoryId=azureDirectoryId,
            vnetName=vnetName,
            containerId=containerId,
            azureSubscriptionId=azureSubscriptionId,
            errorState=errorState,
            id=id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
