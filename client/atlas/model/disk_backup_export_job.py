# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DiskBackupExportJob(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "exportBucketId",
        }
        
        class properties:
            
            
            class exportBucketId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DiskBackupBaseRestoreMember']:
                        return DiskBackupBaseRestoreMember
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DiskBackupBaseRestoreMember'], typing.List['DiskBackupBaseRestoreMember']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'components':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DiskBackupBaseRestoreMember':
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            
            
            class customData(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Label']:
                        return Label
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Label'], typing.List['Label']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customData':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Label':
                    return super().__getitem__(i)
            
            
            class deliveryUrl(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deliveryUrl':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def exportStatus() -> typing.Type['ApiExportStatusView']:
                return ApiExportStatusView
            finishedAt = schemas.DateTimeSchema
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class prefix(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'exported_snapshots/\{ORG-NAME\}/\{PROJECT-NAME\}/\{CLUSTER-NAME\}/\{SNAPSHOT-INITIATION-DATE\}/\{TIMESTAMP\}',  # noqa: E501
                    }]
            
            
            class snapshotId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Cancelled": "CANCELLED",
                        "Failed": "FAILED",
                        "InProgress": "IN_PROGRESS",
                        "Queued": "QUEUED",
                        "Successful": "SUCCESSFUL",
                    }
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("Cancelled")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("Failed")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("InProgress")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("Queued")
                
                @schemas.classproperty
                def SUCCESSFUL(cls):
                    return cls("Successful")
            __annotations__ = {
                "exportBucketId": exportBucketId,
                "components": components,
                "createdAt": createdAt,
                "customData": customData,
                "deliveryUrl": deliveryUrl,
                "exportStatus": exportStatus,
                "finishedAt": finishedAt,
                "id": id,
                "links": links,
                "prefix": prefix,
                "snapshotId": snapshotId,
                "state": state,
            }
    
    exportBucketId: MetaOapg.properties.exportBucketId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportBucketId"]) -> MetaOapg.properties.exportBucketId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customData"]) -> MetaOapg.properties.customData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveryUrl"]) -> MetaOapg.properties.deliveryUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportStatus"]) -> 'ApiExportStatusView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishedAt"]) -> MetaOapg.properties.finishedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotId"]) -> MetaOapg.properties.snapshotId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exportBucketId", "components", "createdAt", "customData", "deliveryUrl", "exportStatus", "finishedAt", "id", "links", "prefix", "snapshotId", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportBucketId"]) -> MetaOapg.properties.exportBucketId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> typing.Union[MetaOapg.properties.components, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customData"]) -> typing.Union[MetaOapg.properties.customData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveryUrl"]) -> typing.Union[MetaOapg.properties.deliveryUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportStatus"]) -> typing.Union['ApiExportStatusView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishedAt"]) -> typing.Union[MetaOapg.properties.finishedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotId"]) -> typing.Union[MetaOapg.properties.snapshotId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exportBucketId", "components", "createdAt", "customData", "deliveryUrl", "exportStatus", "finishedAt", "id", "links", "prefix", "snapshotId", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        exportBucketId: typing.Union[MetaOapg.properties.exportBucketId, str, ],
        components: typing.Union[MetaOapg.properties.components, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        customData: typing.Union[MetaOapg.properties.customData, list, tuple, schemas.Unset] = schemas.unset,
        deliveryUrl: typing.Union[MetaOapg.properties.deliveryUrl, list, tuple, schemas.Unset] = schemas.unset,
        exportStatus: typing.Union['ApiExportStatusView', schemas.Unset] = schemas.unset,
        finishedAt: typing.Union[MetaOapg.properties.finishedAt, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        snapshotId: typing.Union[MetaOapg.properties.snapshotId, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DiskBackupExportJob':
        return super().__new__(
            cls,
            *_args,
            exportBucketId=exportBucketId,
            components=components,
            createdAt=createdAt,
            customData=customData,
            deliveryUrl=deliveryUrl,
            exportStatus=exportStatus,
            finishedAt=finishedAt,
            id=id,
            links=links,
            prefix=prefix,
            snapshotId=snapshotId,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_export_status_view import ApiExportStatusView
from atlas.model.disk_backup_base_restore_member import DiskBackupBaseRestoreMember
from atlas.model.label import Label
from atlas.model.link import Link
