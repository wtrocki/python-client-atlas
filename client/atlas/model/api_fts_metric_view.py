# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiFTSMetricView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Measurement of one Atlas Search status when MongoDB Atlas received this request.
    """


    class MetaOapg:
        required = {
            "metricName",
            "units",
        }
        
        class properties:
            
            
            class metricName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INDEX_SIZE_ON_DISK": "INDEX_SIZE_ON_DISK",
                        "NUMBER_OF_DELETES": "NUMBER_OF_DELETES",
                        "NUMBER_OF_ERROR_QUERIES": "NUMBER_OF_ERROR_QUERIES",
                        "NUMBER_OF_GETMORE_COMMANDS": "NUMBER_OF_GETMORE_COMMANDS",
                        "NUMBER_OF_INDEX_FIELDS": "NUMBER_OF_INDEX_FIELDS",
                        "NUMBER_OF_INSERTS": "NUMBER_OF_INSERTS",
                        "NUMBER_OF_SUCCESS_QUERIES": "NUMBER_OF_SUCCESS_QUERIES",
                        "NUMBER_OF_UPDATES": "NUMBER_OF_UPDATES",
                        "REPLICATION_LAG": "REPLICATION_LAG",
                        "TOTAL_NUMBER_OF_QUERIES": "TOTAL_NUMBER_OF_QUERIES",
                        "FTS_DISK_USAGE": "FTS_DISK_USAGE",
                        "FTS_PROCESS_CPU_KERNEL": "FTS_PROCESS_CPU_KERNEL",
                        "FTS_PROCESS_CPU_USER": "FTS_PROCESS_CPU_USER",
                        "FTS_PROCESS_NORMALIZED_CPU_KERNEL": "FTS_PROCESS_NORMALIZED_CPU_KERNEL",
                        "FTS_PROCESS_NORMALIZED_CPU_USER": "FTS_PROCESS_NORMALIZED_CPU_USER",
                        "FTS_PROCESS_RESIDENT_MEMORY": "FTS_PROCESS_RESIDENT_MEMORY",
                        "FTS_PROCESS_SHARED_MEMORY": "FTS_PROCESS_SHARED_MEMORY",
                        "FTS_PROCESS_VIRTUAL_MEMORY": "FTS_PROCESS_VIRTUAL_MEMORY",
                        "JVM_CURRENT_MEMORY": "JVM_CURRENT_MEMORY",
                        "JVM_MAX_MEMORY": "JVM_MAX_MEMORY",
                    }
                
                @schemas.classproperty
                def INDEX_SIZE_ON_DISK(cls):
                    return cls("INDEX_SIZE_ON_DISK")
                
                @schemas.classproperty
                def NUMBER_OF_DELETES(cls):
                    return cls("NUMBER_OF_DELETES")
                
                @schemas.classproperty
                def NUMBER_OF_ERROR_QUERIES(cls):
                    return cls("NUMBER_OF_ERROR_QUERIES")
                
                @schemas.classproperty
                def NUMBER_OF_GETMORE_COMMANDS(cls):
                    return cls("NUMBER_OF_GETMORE_COMMANDS")
                
                @schemas.classproperty
                def NUMBER_OF_INDEX_FIELDS(cls):
                    return cls("NUMBER_OF_INDEX_FIELDS")
                
                @schemas.classproperty
                def NUMBER_OF_INSERTS(cls):
                    return cls("NUMBER_OF_INSERTS")
                
                @schemas.classproperty
                def NUMBER_OF_SUCCESS_QUERIES(cls):
                    return cls("NUMBER_OF_SUCCESS_QUERIES")
                
                @schemas.classproperty
                def NUMBER_OF_UPDATES(cls):
                    return cls("NUMBER_OF_UPDATES")
                
                @schemas.classproperty
                def REPLICATION_LAG(cls):
                    return cls("REPLICATION_LAG")
                
                @schemas.classproperty
                def TOTAL_NUMBER_OF_QUERIES(cls):
                    return cls("TOTAL_NUMBER_OF_QUERIES")
                
                @schemas.classproperty
                def FTS_DISK_USAGE(cls):
                    return cls("FTS_DISK_USAGE")
                
                @schemas.classproperty
                def FTS_PROCESS_CPU_KERNEL(cls):
                    return cls("FTS_PROCESS_CPU_KERNEL")
                
                @schemas.classproperty
                def FTS_PROCESS_CPU_USER(cls):
                    return cls("FTS_PROCESS_CPU_USER")
                
                @schemas.classproperty
                def FTS_PROCESS_NORMALIZED_CPU_KERNEL(cls):
                    return cls("FTS_PROCESS_NORMALIZED_CPU_KERNEL")
                
                @schemas.classproperty
                def FTS_PROCESS_NORMALIZED_CPU_USER(cls):
                    return cls("FTS_PROCESS_NORMALIZED_CPU_USER")
                
                @schemas.classproperty
                def FTS_PROCESS_RESIDENT_MEMORY(cls):
                    return cls("FTS_PROCESS_RESIDENT_MEMORY")
                
                @schemas.classproperty
                def FTS_PROCESS_SHARED_MEMORY(cls):
                    return cls("FTS_PROCESS_SHARED_MEMORY")
                
                @schemas.classproperty
                def FTS_PROCESS_VIRTUAL_MEMORY(cls):
                    return cls("FTS_PROCESS_VIRTUAL_MEMORY")
                
                @schemas.classproperty
                def JVM_CURRENT_MEMORY(cls):
                    return cls("JVM_CURRENT_MEMORY")
                
                @schemas.classproperty
                def JVM_MAX_MEMORY(cls):
                    return cls("JVM_MAX_MEMORY")
            
            
            class units(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BYTES": "BYTES",
                        "BYTES_PER_SECOND": "BYTES_PER_SECOND",
                        "GIGABYTES": "GIGABYTES",
                        "GIGABYTES_PER_HOUR": "GIGABYTES_PER_HOUR",
                        "KILOBYTES": "KILOBYTES",
                        "MEGABYTES": "MEGABYTES",
                        "MEGABYTES_PER_SECOND": "MEGABYTES_PER_SECOND",
                        "MILLISECONDS": "MILLISECONDS",
                        "MILLISECONDS_LOGSCALE": "MILLISECONDS_LOGSCALE",
                        "PERCENT": "PERCENT",
                        "SCALAR": "SCALAR",
                        "SCALAR_PER_SECOND": "SCALAR_PER_SECOND",
                        "SECONDS": "SECONDS",
                    }
                
                @schemas.classproperty
                def BYTES(cls):
                    return cls("BYTES")
                
                @schemas.classproperty
                def BYTES_PER_SECOND(cls):
                    return cls("BYTES_PER_SECOND")
                
                @schemas.classproperty
                def GIGABYTES(cls):
                    return cls("GIGABYTES")
                
                @schemas.classproperty
                def GIGABYTES_PER_HOUR(cls):
                    return cls("GIGABYTES_PER_HOUR")
                
                @schemas.classproperty
                def KILOBYTES(cls):
                    return cls("KILOBYTES")
                
                @schemas.classproperty
                def MEGABYTES(cls):
                    return cls("MEGABYTES")
                
                @schemas.classproperty
                def MEGABYTES_PER_SECOND(cls):
                    return cls("MEGABYTES_PER_SECOND")
                
                @schemas.classproperty
                def MILLISECONDS(cls):
                    return cls("MILLISECONDS")
                
                @schemas.classproperty
                def MILLISECONDS_LOGSCALE(cls):
                    return cls("MILLISECONDS_LOGSCALE")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("PERCENT")
                
                @schemas.classproperty
                def SCALAR(cls):
                    return cls("SCALAR")
                
                @schemas.classproperty
                def SCALAR_PER_SECOND(cls):
                    return cls("SCALAR_PER_SECOND")
                
                @schemas.classproperty
                def SECONDS(cls):
                    return cls("SECONDS")
            __annotations__ = {
                "metricName": metricName,
                "units": units,
            }
    
    metricName: MetaOapg.properties.metricName
    units: MetaOapg.properties.units
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricName"]) -> MetaOapg.properties.metricName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metricName", "units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricName"]) -> MetaOapg.properties.metricName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metricName", "units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metricName: typing.Union[MetaOapg.properties.metricName, str, ],
        units: typing.Union[MetaOapg.properties.units, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiFTSMetricView':
        return super().__new__(
            cls,
            *_args,
            metricName=metricName,
            units=units,
            _configuration=_configuration,
            **kwargs,
        )
