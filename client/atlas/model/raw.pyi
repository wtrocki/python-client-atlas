# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class Raw(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Additional meta information captured about this event. The response returns this parameter as a JSON object when the query parameter `includeRaw=true`. The list of fields in the raw document may change. Don't rely on raw values for formal monitoring.
    """


    class MetaOapg:
        
        class properties:
            _t = schemas.StrSchema
            
            
            class alertConfigId(
                schemas.StrSchema
            ):
                pass
            
            
            class cid(
                schemas.StrSchema
            ):
                pass
            cre = schemas.DateTimeSchema
            description = schemas.StrSchema
            
            
            class gn(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            
            
            class orgName(
                schemas.StrSchema
            ):
                pass
            
            
            class severity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INFO(cls):
                    return cls("INFO")
                
                @schemas.classproperty
                def WARNING(cls):
                    return cls("WARNING")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            __annotations__ = {
                "_t": _t,
                "alertConfigId": alertConfigId,
                "cid": cid,
                "cre": cre,
                "description": description,
                "gn": gn,
                "id": id,
                "orgId": orgId,
                "orgName": orgName,
                "severity": severity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_t"]) -> MetaOapg.properties._t: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cre"]) -> MetaOapg.properties.cre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gn"]) -> MetaOapg.properties.gn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgName"]) -> MetaOapg.properties.orgName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["_t", "alertConfigId", "cid", "cre", "description", "gn", "id", "orgId", "orgName", "severity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_t"]) -> typing.Union[MetaOapg.properties._t, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertConfigId"]) -> typing.Union[MetaOapg.properties.alertConfigId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cre"]) -> typing.Union[MetaOapg.properties.cre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gn"]) -> typing.Union[MetaOapg.properties.gn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgName"]) -> typing.Union[MetaOapg.properties.orgName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["_t", "alertConfigId", "cid", "cre", "description", "gn", "id", "orgId", "orgName", "severity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _t: typing.Union[MetaOapg.properties._t, str, schemas.Unset] = schemas.unset,
        alertConfigId: typing.Union[MetaOapg.properties.alertConfigId, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        cre: typing.Union[MetaOapg.properties.cre, str, datetime, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        gn: typing.Union[MetaOapg.properties.gn, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        orgName: typing.Union[MetaOapg.properties.orgName, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Raw':
        return super().__new__(
            cls,
            *_args,
            _t=_t,
            alertConfigId=alertConfigId,
            cid=cid,
            cre=cre,
            description=description,
            gn=gn,
            id=id,
            orgId=orgId,
            orgName=orgName,
            severity=severity,
            _configuration=_configuration,
            **kwargs,
        )
