# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class TenantRestore(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "snapshotId",
            "targetDeploymentItemName",
        }
        
        class properties:
            
            
            class snapshotId(
                schemas.StrSchema
            ):
                pass
            
            
            class targetDeploymentItemName(
                schemas.StrSchema
            ):
                pass
            
            
            class clusterName(
                schemas.StrSchema
            ):
                pass
            
            
            class deliveryType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RESTORE(cls):
                    return cls("RESTORE")
                
                @schemas.classproperty
                def DOWNLOAD(cls):
                    return cls("DOWNLOAD")
            expirationDate = schemas.DateTimeSchema
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class projectId(
                schemas.StrSchema
            ):
                pass
            restoreFinishedDate = schemas.DateTimeSchema
            restoreScheduledDate = schemas.DateTimeSchema
            snapshotFinishedDate = schemas.DateTimeSchema
            snapshotUrl = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def QUEUED(cls):
                    return cls("QUEUED")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("RUNNING")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
            
            
            class targetProjectId(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "snapshotId": snapshotId,
                "targetDeploymentItemName": targetDeploymentItemName,
                "clusterName": clusterName,
                "deliveryType": deliveryType,
                "expirationDate": expirationDate,
                "id": id,
                "links": links,
                "projectId": projectId,
                "restoreFinishedDate": restoreFinishedDate,
                "restoreScheduledDate": restoreScheduledDate,
                "snapshotFinishedDate": snapshotFinishedDate,
                "snapshotUrl": snapshotUrl,
                "status": status,
                "targetProjectId": targetProjectId,
            }
    
    snapshotId: MetaOapg.properties.snapshotId
    targetDeploymentItemName: MetaOapg.properties.targetDeploymentItemName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotId"]) -> MetaOapg.properties.snapshotId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetDeploymentItemName"]) -> MetaOapg.properties.targetDeploymentItemName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterName"]) -> MetaOapg.properties.clusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliveryType"]) -> MetaOapg.properties.deliveryType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restoreFinishedDate"]) -> MetaOapg.properties.restoreFinishedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restoreScheduledDate"]) -> MetaOapg.properties.restoreScheduledDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotFinishedDate"]) -> MetaOapg.properties.snapshotFinishedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotUrl"]) -> MetaOapg.properties.snapshotUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetProjectId"]) -> MetaOapg.properties.targetProjectId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["snapshotId", "targetDeploymentItemName", "clusterName", "deliveryType", "expirationDate", "id", "links", "projectId", "restoreFinishedDate", "restoreScheduledDate", "snapshotFinishedDate", "snapshotUrl", "status", "targetProjectId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotId"]) -> MetaOapg.properties.snapshotId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetDeploymentItemName"]) -> MetaOapg.properties.targetDeploymentItemName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterName"]) -> typing.Union[MetaOapg.properties.clusterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliveryType"]) -> typing.Union[MetaOapg.properties.deliveryType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restoreFinishedDate"]) -> typing.Union[MetaOapg.properties.restoreFinishedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restoreScheduledDate"]) -> typing.Union[MetaOapg.properties.restoreScheduledDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotFinishedDate"]) -> typing.Union[MetaOapg.properties.snapshotFinishedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotUrl"]) -> typing.Union[MetaOapg.properties.snapshotUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetProjectId"]) -> typing.Union[MetaOapg.properties.targetProjectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["snapshotId", "targetDeploymentItemName", "clusterName", "deliveryType", "expirationDate", "id", "links", "projectId", "restoreFinishedDate", "restoreScheduledDate", "snapshotFinishedDate", "snapshotUrl", "status", "targetProjectId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        snapshotId: typing.Union[MetaOapg.properties.snapshotId, str, ],
        targetDeploymentItemName: typing.Union[MetaOapg.properties.targetDeploymentItemName, str, ],
        clusterName: typing.Union[MetaOapg.properties.clusterName, str, schemas.Unset] = schemas.unset,
        deliveryType: typing.Union[MetaOapg.properties.deliveryType, str, schemas.Unset] = schemas.unset,
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, str, schemas.Unset] = schemas.unset,
        restoreFinishedDate: typing.Union[MetaOapg.properties.restoreFinishedDate, str, datetime, schemas.Unset] = schemas.unset,
        restoreScheduledDate: typing.Union[MetaOapg.properties.restoreScheduledDate, str, datetime, schemas.Unset] = schemas.unset,
        snapshotFinishedDate: typing.Union[MetaOapg.properties.snapshotFinishedDate, str, datetime, schemas.Unset] = schemas.unset,
        snapshotUrl: typing.Union[MetaOapg.properties.snapshotUrl, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        targetProjectId: typing.Union[MetaOapg.properties.targetProjectId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TenantRestore':
        return super().__new__(
            cls,
            *_args,
            snapshotId=snapshotId,
            targetDeploymentItemName=targetDeploymentItemName,
            clusterName=clusterName,
            deliveryType=deliveryType,
            expirationDate=expirationDate,
            id=id,
            links=links,
            projectId=projectId,
            restoreFinishedDate=restoreFinishedDate,
            restoreScheduledDate=restoreScheduledDate,
            snapshotFinishedDate=snapshotFinishedDate,
            snapshotUrl=snapshotUrl,
            status=status,
            targetProjectId=targetProjectId,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
