# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class OrgFederationSettingsView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details that define how to connect one MongoDB Cloud organization to one federated authentication service.
    """


    class MetaOapg:
        
        class properties:
            
            
            class federatedDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'federatedDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            hasRoleMappings = schemas.BoolSchema
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class identityProviderId(
                schemas.StrSchema
            ):
                pass
            
            
            class identityProviderStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
            __annotations__ = {
                "federatedDomains": federatedDomains,
                "hasRoleMappings": hasRoleMappings,
                "id": id,
                "identityProviderId": identityProviderId,
                "identityProviderStatus": identityProviderStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federatedDomains"]) -> MetaOapg.properties.federatedDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasRoleMappings"]) -> MetaOapg.properties.hasRoleMappings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityProviderId"]) -> MetaOapg.properties.identityProviderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identityProviderStatus"]) -> MetaOapg.properties.identityProviderStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["federatedDomains", "hasRoleMappings", "id", "identityProviderId", "identityProviderStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federatedDomains"]) -> typing.Union[MetaOapg.properties.federatedDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasRoleMappings"]) -> typing.Union[MetaOapg.properties.hasRoleMappings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityProviderId"]) -> typing.Union[MetaOapg.properties.identityProviderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identityProviderStatus"]) -> typing.Union[MetaOapg.properties.identityProviderStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["federatedDomains", "hasRoleMappings", "id", "identityProviderId", "identityProviderStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        federatedDomains: typing.Union[MetaOapg.properties.federatedDomains, list, tuple, schemas.Unset] = schemas.unset,
        hasRoleMappings: typing.Union[MetaOapg.properties.hasRoleMappings, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        identityProviderId: typing.Union[MetaOapg.properties.identityProviderId, str, schemas.Unset] = schemas.unset,
        identityProviderStatus: typing.Union[MetaOapg.properties.identityProviderStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrgFederationSettingsView':
        return super().__new__(
            cls,
            *_args,
            federatedDomains=federatedDomains,
            hasRoleMappings=hasRoleMappings,
            id=id,
            identityProviderId=identityProviderId,
            identityProviderStatus=identityProviderStatus,
            _configuration=_configuration,
            **kwargs,
        )
