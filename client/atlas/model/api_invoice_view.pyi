# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiInvoiceView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            amountBilledCents = schemas.Int64Schema
            amountPaidCents = schemas.Int64Schema
            created = schemas.DateTimeSchema
            creditsCents = schemas.Int64Schema
            endDate = schemas.DateTimeSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class lineItems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiLineItemView']:
                        return ApiLineItemView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiLineItemView'], typing.List['ApiLineItemView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineItems':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiLineItemView':
                    return super().__getitem__(i)
            
            
            class linkedInvoices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiInvoiceView']:
                        return ApiInvoiceView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiInvoiceView'], typing.List['ApiInvoiceView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'linkedInvoices':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiInvoiceView':
                    return super().__getitem__(i)
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            
            
            class payments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiPaymentView']:
                        return ApiPaymentView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiPaymentView'], typing.List['ApiPaymentView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiPaymentView':
                    return super().__getitem__(i)
            
            
            class refunds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiRefundView']:
                        return ApiRefundView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiRefundView'], typing.List['ApiRefundView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'refunds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiRefundView':
                    return super().__getitem__(i)
            salesTaxCents = schemas.Int64Schema
            startDate = schemas.DateTimeSchema
            startingBalanceCents = schemas.Int64Schema
            
            
            class statusName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("CLOSED")
                
                @schemas.classproperty
                def FORGIVEN(cls):
                    return cls("FORGIVEN")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("PAID")
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("FREE")
                
                @schemas.classproperty
                def PREPAID(cls):
                    return cls("PREPAID")
                
                @schemas.classproperty
                def INVOICED(cls):
                    return cls("INVOICED")
            subtotalCents = schemas.Int64Schema
            updated = schemas.DateTimeSchema
            __annotations__ = {
                "amountBilledCents": amountBilledCents,
                "amountPaidCents": amountPaidCents,
                "created": created,
                "creditsCents": creditsCents,
                "endDate": endDate,
                "groupId": groupId,
                "id": id,
                "lineItems": lineItems,
                "linkedInvoices": linkedInvoices,
                "links": links,
                "orgId": orgId,
                "payments": payments,
                "refunds": refunds,
                "salesTaxCents": salesTaxCents,
                "startDate": startDate,
                "startingBalanceCents": startingBalanceCents,
                "statusName": statusName,
                "subtotalCents": subtotalCents,
                "updated": updated,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountBilledCents"]) -> MetaOapg.properties.amountBilledCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPaidCents"]) -> MetaOapg.properties.amountPaidCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditsCents"]) -> MetaOapg.properties.creditsCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineItems"]) -> MetaOapg.properties.lineItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedInvoices"]) -> MetaOapg.properties.linkedInvoices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payments"]) -> MetaOapg.properties.payments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refunds"]) -> MetaOapg.properties.refunds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salesTaxCents"]) -> MetaOapg.properties.salesTaxCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startingBalanceCents"]) -> MetaOapg.properties.startingBalanceCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusName"]) -> MetaOapg.properties.statusName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtotalCents"]) -> MetaOapg.properties.subtotalCents: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amountBilledCents", "amountPaidCents", "created", "creditsCents", "endDate", "groupId", "id", "lineItems", "linkedInvoices", "links", "orgId", "payments", "refunds", "salesTaxCents", "startDate", "startingBalanceCents", "statusName", "subtotalCents", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountBilledCents"]) -> typing.Union[MetaOapg.properties.amountBilledCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPaidCents"]) -> typing.Union[MetaOapg.properties.amountPaidCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditsCents"]) -> typing.Union[MetaOapg.properties.creditsCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineItems"]) -> typing.Union[MetaOapg.properties.lineItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedInvoices"]) -> typing.Union[MetaOapg.properties.linkedInvoices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payments"]) -> typing.Union[MetaOapg.properties.payments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refunds"]) -> typing.Union[MetaOapg.properties.refunds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salesTaxCents"]) -> typing.Union[MetaOapg.properties.salesTaxCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startingBalanceCents"]) -> typing.Union[MetaOapg.properties.startingBalanceCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusName"]) -> typing.Union[MetaOapg.properties.statusName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtotalCents"]) -> typing.Union[MetaOapg.properties.subtotalCents, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amountBilledCents", "amountPaidCents", "created", "creditsCents", "endDate", "groupId", "id", "lineItems", "linkedInvoices", "links", "orgId", "payments", "refunds", "salesTaxCents", "startDate", "startingBalanceCents", "statusName", "subtotalCents", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        amountBilledCents: typing.Union[MetaOapg.properties.amountBilledCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amountPaidCents: typing.Union[MetaOapg.properties.amountPaidCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        creditsCents: typing.Union[MetaOapg.properties.creditsCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        lineItems: typing.Union[MetaOapg.properties.lineItems, list, tuple, schemas.Unset] = schemas.unset,
        linkedInvoices: typing.Union[MetaOapg.properties.linkedInvoices, list, tuple, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        payments: typing.Union[MetaOapg.properties.payments, list, tuple, schemas.Unset] = schemas.unset,
        refunds: typing.Union[MetaOapg.properties.refunds, list, tuple, schemas.Unset] = schemas.unset,
        salesTaxCents: typing.Union[MetaOapg.properties.salesTaxCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        startingBalanceCents: typing.Union[MetaOapg.properties.startingBalanceCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusName: typing.Union[MetaOapg.properties.statusName, str, schemas.Unset] = schemas.unset,
        subtotalCents: typing.Union[MetaOapg.properties.subtotalCents, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiInvoiceView':
        return super().__new__(
            cls,
            *_args,
            amountBilledCents=amountBilledCents,
            amountPaidCents=amountPaidCents,
            created=created,
            creditsCents=creditsCents,
            endDate=endDate,
            groupId=groupId,
            id=id,
            lineItems=lineItems,
            linkedInvoices=linkedInvoices,
            links=links,
            orgId=orgId,
            payments=payments,
            refunds=refunds,
            salesTaxCents=salesTaxCents,
            startDate=startDate,
            startingBalanceCents=startingBalanceCents,
            statusName=statusName,
            subtotalCents=subtotalCents,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_line_item_view import ApiLineItemView
from atlas.model.api_payment_view import ApiPaymentView
from atlas.model.api_refund_view import ApiRefundView
from atlas.model.link import Link
