# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class LegacyClusterDescription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Group of settings that configure a MongoDB cluster.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def autoScaling() -> typing.Type['AutoScaling']:
                return AutoScaling
            backupEnabled = schemas.BoolSchema
        
            @staticmethod
            def biConnector() -> typing.Type['BiConnector']:
                return BiConnector
            
            
            class clusterType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def REPLICASET(cls):
                    return cls("REPLICASET")
                
                @schemas.classproperty
                def SHARDED(cls):
                    return cls("SHARDED")
                
                @schemas.classproperty
                def GEOSHARDED(cls):
                    return cls("GEOSHARDED")
        
            @staticmethod
            def connectionStrings() -> typing.Type['ClusterDescriptionConnectionStrings']:
                return ClusterDescriptionConnectionStrings
            createDate = schemas.DateTimeSchema
            
            
            class diskSizeGB(
                schemas.Float64Schema
            ):
                pass
            
            
            class encryptionAtRestProvider(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def AWS(cls):
                    return cls("AWS")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def GCP(cls):
                    return cls("GCP")
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NDSLabel']:
                        return NDSLabel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NDSLabel'], typing.List['NDSLabel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NDSLabel':
                    return super().__getitem__(i)
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class mongoDBMajorVersion(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_4_PT_2(cls):
                    return cls("4.2")
                
                @schemas.classproperty
                def POSITIVE_4_PT_4(cls):
                    return cls("4.4")
                
                @schemas.classproperty
                def POSITIVE_5_PT_0(cls):
                    return cls("5.0")
                
                @schemas.classproperty
                def POSITIVE_6_PT_0(cls):
                    return cls("6.0")
            
            
            class mongoDBVersion(
                schemas.StrSchema
            ):
                pass
            mongoURI = schemas.StrSchema
            mongoURIUpdated = schemas.DateTimeSchema
            mongoURIWithOptions = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class numShards(
                schemas.Int32Schema
            ):
                pass
            paused = schemas.BoolSchema
            pitEnabled = schemas.BoolSchema
            providerBackupEnabled = schemas.BoolSchema
        
            @staticmethod
            def providerSettings() -> typing.Type['ClusterProviderSettings']:
                return ClusterProviderSettings
            
            
            class replicationFactor(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
            
            
            class replicationSpec(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['RegionSpec']:
                        return RegionSpec
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'RegionSpec':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'RegionSpec':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'RegionSpec',
                ) -> 'replicationSpec':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class replicationSpecs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LegacyReplicationSpec']:
                        return LegacyReplicationSpec
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['LegacyReplicationSpec'], typing.List['LegacyReplicationSpec']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'replicationSpecs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'LegacyReplicationSpec':
                    return super().__getitem__(i)
            
            
            class rootCertType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ISRGROOTX1(cls):
                    return cls("ISRGROOTX1")
            srvAddress = schemas.StrSchema
            
            
            class stateName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IDLE(cls):
                    return cls("IDLE")
                
                @schemas.classproperty
                def CREATING(cls):
                    return cls("CREATING")
                
                @schemas.classproperty
                def UPDATING(cls):
                    return cls("UPDATING")
                
                @schemas.classproperty
                def DELETING(cls):
                    return cls("DELETING")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
                
                @schemas.classproperty
                def REPAIRING(cls):
                    return cls("REPAIRING")
            terminationProtectionEnabled = schemas.BoolSchema
            
            
            class versionReleaseSystem(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def LTS(cls):
                    return cls("LTS")
                
                @schemas.classproperty
                def CONTINUOUS(cls):
                    return cls("CONTINUOUS")
            __annotations__ = {
                "autoScaling": autoScaling,
                "backupEnabled": backupEnabled,
                "biConnector": biConnector,
                "clusterType": clusterType,
                "connectionStrings": connectionStrings,
                "createDate": createDate,
                "diskSizeGB": diskSizeGB,
                "encryptionAtRestProvider": encryptionAtRestProvider,
                "groupId": groupId,
                "id": id,
                "labels": labels,
                "links": links,
                "mongoDBMajorVersion": mongoDBMajorVersion,
                "mongoDBVersion": mongoDBVersion,
                "mongoURI": mongoURI,
                "mongoURIUpdated": mongoURIUpdated,
                "mongoURIWithOptions": mongoURIWithOptions,
                "name": name,
                "numShards": numShards,
                "paused": paused,
                "pitEnabled": pitEnabled,
                "providerBackupEnabled": providerBackupEnabled,
                "providerSettings": providerSettings,
                "replicationFactor": replicationFactor,
                "replicationSpec": replicationSpec,
                "replicationSpecs": replicationSpecs,
                "rootCertType": rootCertType,
                "srvAddress": srvAddress,
                "stateName": stateName,
                "terminationProtectionEnabled": terminationProtectionEnabled,
                "versionReleaseSystem": versionReleaseSystem,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoScaling"]) -> 'AutoScaling': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backupEnabled"]) -> MetaOapg.properties.backupEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["biConnector"]) -> 'BiConnector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterType"]) -> MetaOapg.properties.clusterType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionStrings"]) -> 'ClusterDescriptionConnectionStrings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diskSizeGB"]) -> MetaOapg.properties.diskSizeGB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptionAtRestProvider"]) -> MetaOapg.properties.encryptionAtRestProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoDBMajorVersion"]) -> MetaOapg.properties.mongoDBMajorVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoDBVersion"]) -> MetaOapg.properties.mongoDBVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoURI"]) -> MetaOapg.properties.mongoURI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoURIUpdated"]) -> MetaOapg.properties.mongoURIUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoURIWithOptions"]) -> MetaOapg.properties.mongoURIWithOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numShards"]) -> MetaOapg.properties.numShards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paused"]) -> MetaOapg.properties.paused: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitEnabled"]) -> MetaOapg.properties.pitEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerBackupEnabled"]) -> MetaOapg.properties.providerBackupEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerSettings"]) -> 'ClusterProviderSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicationFactor"]) -> MetaOapg.properties.replicationFactor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicationSpec"]) -> MetaOapg.properties.replicationSpec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicationSpecs"]) -> MetaOapg.properties.replicationSpecs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootCertType"]) -> MetaOapg.properties.rootCertType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["srvAddress"]) -> MetaOapg.properties.srvAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationProtectionEnabled"]) -> MetaOapg.properties.terminationProtectionEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionReleaseSystem"]) -> MetaOapg.properties.versionReleaseSystem: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["autoScaling", "backupEnabled", "biConnector", "clusterType", "connectionStrings", "createDate", "diskSizeGB", "encryptionAtRestProvider", "groupId", "id", "labels", "links", "mongoDBMajorVersion", "mongoDBVersion", "mongoURI", "mongoURIUpdated", "mongoURIWithOptions", "name", "numShards", "paused", "pitEnabled", "providerBackupEnabled", "providerSettings", "replicationFactor", "replicationSpec", "replicationSpecs", "rootCertType", "srvAddress", "stateName", "terminationProtectionEnabled", "versionReleaseSystem", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoScaling"]) -> typing.Union['AutoScaling', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backupEnabled"]) -> typing.Union[MetaOapg.properties.backupEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["biConnector"]) -> typing.Union['BiConnector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterType"]) -> typing.Union[MetaOapg.properties.clusterType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionStrings"]) -> typing.Union['ClusterDescriptionConnectionStrings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diskSizeGB"]) -> typing.Union[MetaOapg.properties.diskSizeGB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptionAtRestProvider"]) -> typing.Union[MetaOapg.properties.encryptionAtRestProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoDBMajorVersion"]) -> typing.Union[MetaOapg.properties.mongoDBMajorVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoDBVersion"]) -> typing.Union[MetaOapg.properties.mongoDBVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoURI"]) -> typing.Union[MetaOapg.properties.mongoURI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoURIUpdated"]) -> typing.Union[MetaOapg.properties.mongoURIUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoURIWithOptions"]) -> typing.Union[MetaOapg.properties.mongoURIWithOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numShards"]) -> typing.Union[MetaOapg.properties.numShards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paused"]) -> typing.Union[MetaOapg.properties.paused, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitEnabled"]) -> typing.Union[MetaOapg.properties.pitEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerBackupEnabled"]) -> typing.Union[MetaOapg.properties.providerBackupEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerSettings"]) -> typing.Union['ClusterProviderSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicationFactor"]) -> typing.Union[MetaOapg.properties.replicationFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicationSpec"]) -> typing.Union[MetaOapg.properties.replicationSpec, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicationSpecs"]) -> typing.Union[MetaOapg.properties.replicationSpecs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootCertType"]) -> typing.Union[MetaOapg.properties.rootCertType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["srvAddress"]) -> typing.Union[MetaOapg.properties.srvAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateName"]) -> typing.Union[MetaOapg.properties.stateName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationProtectionEnabled"]) -> typing.Union[MetaOapg.properties.terminationProtectionEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionReleaseSystem"]) -> typing.Union[MetaOapg.properties.versionReleaseSystem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autoScaling", "backupEnabled", "biConnector", "clusterType", "connectionStrings", "createDate", "diskSizeGB", "encryptionAtRestProvider", "groupId", "id", "labels", "links", "mongoDBMajorVersion", "mongoDBVersion", "mongoURI", "mongoURIUpdated", "mongoURIWithOptions", "name", "numShards", "paused", "pitEnabled", "providerBackupEnabled", "providerSettings", "replicationFactor", "replicationSpec", "replicationSpecs", "rootCertType", "srvAddress", "stateName", "terminationProtectionEnabled", "versionReleaseSystem", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        autoScaling: typing.Union['AutoScaling', schemas.Unset] = schemas.unset,
        backupEnabled: typing.Union[MetaOapg.properties.backupEnabled, bool, schemas.Unset] = schemas.unset,
        biConnector: typing.Union['BiConnector', schemas.Unset] = schemas.unset,
        clusterType: typing.Union[MetaOapg.properties.clusterType, str, schemas.Unset] = schemas.unset,
        connectionStrings: typing.Union['ClusterDescriptionConnectionStrings', schemas.Unset] = schemas.unset,
        createDate: typing.Union[MetaOapg.properties.createDate, str, datetime, schemas.Unset] = schemas.unset,
        diskSizeGB: typing.Union[MetaOapg.properties.diskSizeGB, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        encryptionAtRestProvider: typing.Union[MetaOapg.properties.encryptionAtRestProvider, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        mongoDBMajorVersion: typing.Union[MetaOapg.properties.mongoDBMajorVersion, str, schemas.Unset] = schemas.unset,
        mongoDBVersion: typing.Union[MetaOapg.properties.mongoDBVersion, str, schemas.Unset] = schemas.unset,
        mongoURI: typing.Union[MetaOapg.properties.mongoURI, str, schemas.Unset] = schemas.unset,
        mongoURIUpdated: typing.Union[MetaOapg.properties.mongoURIUpdated, str, datetime, schemas.Unset] = schemas.unset,
        mongoURIWithOptions: typing.Union[MetaOapg.properties.mongoURIWithOptions, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        numShards: typing.Union[MetaOapg.properties.numShards, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        paused: typing.Union[MetaOapg.properties.paused, bool, schemas.Unset] = schemas.unset,
        pitEnabled: typing.Union[MetaOapg.properties.pitEnabled, bool, schemas.Unset] = schemas.unset,
        providerBackupEnabled: typing.Union[MetaOapg.properties.providerBackupEnabled, bool, schemas.Unset] = schemas.unset,
        providerSettings: typing.Union['ClusterProviderSettings', schemas.Unset] = schemas.unset,
        replicationFactor: typing.Union[MetaOapg.properties.replicationFactor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replicationSpec: typing.Union[MetaOapg.properties.replicationSpec, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        replicationSpecs: typing.Union[MetaOapg.properties.replicationSpecs, list, tuple, schemas.Unset] = schemas.unset,
        rootCertType: typing.Union[MetaOapg.properties.rootCertType, str, schemas.Unset] = schemas.unset,
        srvAddress: typing.Union[MetaOapg.properties.srvAddress, str, schemas.Unset] = schemas.unset,
        stateName: typing.Union[MetaOapg.properties.stateName, str, schemas.Unset] = schemas.unset,
        terminationProtectionEnabled: typing.Union[MetaOapg.properties.terminationProtectionEnabled, bool, schemas.Unset] = schemas.unset,
        versionReleaseSystem: typing.Union[MetaOapg.properties.versionReleaseSystem, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LegacyClusterDescription':
        return super().__new__(
            cls,
            *_args,
            autoScaling=autoScaling,
            backupEnabled=backupEnabled,
            biConnector=biConnector,
            clusterType=clusterType,
            connectionStrings=connectionStrings,
            createDate=createDate,
            diskSizeGB=diskSizeGB,
            encryptionAtRestProvider=encryptionAtRestProvider,
            groupId=groupId,
            id=id,
            labels=labels,
            links=links,
            mongoDBMajorVersion=mongoDBMajorVersion,
            mongoDBVersion=mongoDBVersion,
            mongoURI=mongoURI,
            mongoURIUpdated=mongoURIUpdated,
            mongoURIWithOptions=mongoURIWithOptions,
            name=name,
            numShards=numShards,
            paused=paused,
            pitEnabled=pitEnabled,
            providerBackupEnabled=providerBackupEnabled,
            providerSettings=providerSettings,
            replicationFactor=replicationFactor,
            replicationSpec=replicationSpec,
            replicationSpecs=replicationSpecs,
            rootCertType=rootCertType,
            srvAddress=srvAddress,
            stateName=stateName,
            terminationProtectionEnabled=terminationProtectionEnabled,
            versionReleaseSystem=versionReleaseSystem,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.auto_scaling import AutoScaling
from atlas.model.bi_connector import BiConnector
from atlas.model.cluster_description_connection_strings import ClusterDescriptionConnectionStrings
from atlas.model.cluster_provider_settings import ClusterProviderSettings
from atlas.model.legacy_replication_spec import LegacyReplicationSpec
from atlas.model.link import Link
from atlas.model.nds_label import NDSLabel
from atlas.model.region_spec import RegionSpec
