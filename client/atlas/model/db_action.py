# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DBAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Privilege action that the role grants.
    """


    class MetaOapg:
        required = {
            "action",
        }
        
        class properties:
            
            
            class action(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "FIND": "FIND",
                        "INSERT": "INSERT",
                        "REMOVE": "REMOVE",
                        "UPDATE": "UPDATE",
                        "BYPASS_DOCUMENT_VALIDATION": "BYPASS_DOCUMENT_VALIDATION",
                        "USE_UUID": "USE_UUID",
                        "KILL_OP": "KILL_OP",
                        "CREATE_COLLECTION": "CREATE_COLLECTION",
                        "CREATE_INDEX": "CREATE_INDEX",
                        "DROP_COLLECTION": "DROP_COLLECTION",
                        "ENABLE_PROFILER": "ENABLE_PROFILER",
                        "CHANGE_STREAM": "CHANGE_STREAM",
                        "COLL_MOD": "COLL_MOD",
                        "COMPACT": "COMPACT",
                        "CONVERT_TO_CAPPED": "CONVERT_TO_CAPPED",
                        "DROP_DATABASE": "DROP_DATABASE",
                        "DROP_INDEX": "DROP_INDEX",
                        "RE_INDEX": "RE_INDEX",
                        "RENAME_COLLECTION_SAME_DB": "RENAME_COLLECTION_SAME_DB",
                        "SET_USER_WRITE_BLOCK": "SET_USER_WRITE_BLOCK",
                        "BYPASS_USER_WRITE_BLOCK": "BYPASS_USER_WRITE_BLOCK",
                        "LIST_SESSIONS": "LIST_SESSIONS",
                        "KILL_ANY_SESSION": "KILL_ANY_SESSION",
                        "COLL_STATS": "COLL_STATS",
                        "CONN_POOL_STATS": "CONN_POOL_STATS",
                        "DB_HASH": "DB_HASH",
                        "DB_STATS": "DB_STATS",
                        "GET_CMD_LINE_OPTS": "GET_CMD_LINE_OPTS",
                        "GET_LOG": "GET_LOG",
                        "GET_PARAMETER": "GET_PARAMETER",
                        "GET_SHARD_MAP": "GET_SHARD_MAP",
                        "HOST_INFO": "HOST_INFO",
                        "IN_PROG": "IN_PROG",
                        "LIST_DATABASES": "LIST_DATABASES",
                        "LIST_COLLECTIONS": "LIST_COLLECTIONS",
                        "LIST_INDEXES": "LIST_INDEXES",
                        "LIST_SHARDS": "LIST_SHARDS",
                        "NET_STAT": "NET_STAT",
                        "REPL_SET_GET_CONFIG": "REPL_SET_GET_CONFIG",
                        "REPL_SET_GET_STATUS": "REPL_SET_GET_STATUS",
                        "SERVER_STATUS": "SERVER_STATUS",
                        "VALIDATE": "VALIDATE",
                        "SHARDING_STATE": "SHARDING_STATE",
                        "TOP": "TOP",
                        "SQL_GET_SCHEMA": "SQL_GET_SCHEMA",
                        "SQL_SET_SCHEMA": "SQL_SET_SCHEMA",
                        "VIEW_ALL_HISTORY": "VIEW_ALL_HISTORY",
                        "OUT_TO_S3": "OUT_TO_S3",
                        "STORAGE_GET_CONFIG": "STORAGE_GET_CONFIG",
                        "STORAGE_SET_CONFIG": "STORAGE_SET_CONFIG",
                        "FLUSH_ROUTER_CONFIG": "FLUSH_ROUTER_CONFIG",
                    }
                
                @schemas.classproperty
                def FIND(cls):
                    return cls("FIND")
                
                @schemas.classproperty
                def INSERT(cls):
                    return cls("INSERT")
                
                @schemas.classproperty
                def REMOVE(cls):
                    return cls("REMOVE")
                
                @schemas.classproperty
                def UPDATE(cls):
                    return cls("UPDATE")
                
                @schemas.classproperty
                def BYPASS_DOCUMENT_VALIDATION(cls):
                    return cls("BYPASS_DOCUMENT_VALIDATION")
                
                @schemas.classproperty
                def USE_UUID(cls):
                    return cls("USE_UUID")
                
                @schemas.classproperty
                def KILL_OP(cls):
                    return cls("KILL_OP")
                
                @schemas.classproperty
                def CREATE_COLLECTION(cls):
                    return cls("CREATE_COLLECTION")
                
                @schemas.classproperty
                def CREATE_INDEX(cls):
                    return cls("CREATE_INDEX")
                
                @schemas.classproperty
                def DROP_COLLECTION(cls):
                    return cls("DROP_COLLECTION")
                
                @schemas.classproperty
                def ENABLE_PROFILER(cls):
                    return cls("ENABLE_PROFILER")
                
                @schemas.classproperty
                def CHANGE_STREAM(cls):
                    return cls("CHANGE_STREAM")
                
                @schemas.classproperty
                def COLL_MOD(cls):
                    return cls("COLL_MOD")
                
                @schemas.classproperty
                def COMPACT(cls):
                    return cls("COMPACT")
                
                @schemas.classproperty
                def CONVERT_TO_CAPPED(cls):
                    return cls("CONVERT_TO_CAPPED")
                
                @schemas.classproperty
                def DROP_DATABASE(cls):
                    return cls("DROP_DATABASE")
                
                @schemas.classproperty
                def DROP_INDEX(cls):
                    return cls("DROP_INDEX")
                
                @schemas.classproperty
                def RE_INDEX(cls):
                    return cls("RE_INDEX")
                
                @schemas.classproperty
                def RENAME_COLLECTION_SAME_DB(cls):
                    return cls("RENAME_COLLECTION_SAME_DB")
                
                @schemas.classproperty
                def SET_USER_WRITE_BLOCK(cls):
                    return cls("SET_USER_WRITE_BLOCK")
                
                @schemas.classproperty
                def BYPASS_USER_WRITE_BLOCK(cls):
                    return cls("BYPASS_USER_WRITE_BLOCK")
                
                @schemas.classproperty
                def LIST_SESSIONS(cls):
                    return cls("LIST_SESSIONS")
                
                @schemas.classproperty
                def KILL_ANY_SESSION(cls):
                    return cls("KILL_ANY_SESSION")
                
                @schemas.classproperty
                def COLL_STATS(cls):
                    return cls("COLL_STATS")
                
                @schemas.classproperty
                def CONN_POOL_STATS(cls):
                    return cls("CONN_POOL_STATS")
                
                @schemas.classproperty
                def DB_HASH(cls):
                    return cls("DB_HASH")
                
                @schemas.classproperty
                def DB_STATS(cls):
                    return cls("DB_STATS")
                
                @schemas.classproperty
                def GET_CMD_LINE_OPTS(cls):
                    return cls("GET_CMD_LINE_OPTS")
                
                @schemas.classproperty
                def GET_LOG(cls):
                    return cls("GET_LOG")
                
                @schemas.classproperty
                def GET_PARAMETER(cls):
                    return cls("GET_PARAMETER")
                
                @schemas.classproperty
                def GET_SHARD_MAP(cls):
                    return cls("GET_SHARD_MAP")
                
                @schemas.classproperty
                def HOST_INFO(cls):
                    return cls("HOST_INFO")
                
                @schemas.classproperty
                def IN_PROG(cls):
                    return cls("IN_PROG")
                
                @schemas.classproperty
                def LIST_DATABASES(cls):
                    return cls("LIST_DATABASES")
                
                @schemas.classproperty
                def LIST_COLLECTIONS(cls):
                    return cls("LIST_COLLECTIONS")
                
                @schemas.classproperty
                def LIST_INDEXES(cls):
                    return cls("LIST_INDEXES")
                
                @schemas.classproperty
                def LIST_SHARDS(cls):
                    return cls("LIST_SHARDS")
                
                @schemas.classproperty
                def NET_STAT(cls):
                    return cls("NET_STAT")
                
                @schemas.classproperty
                def REPL_SET_GET_CONFIG(cls):
                    return cls("REPL_SET_GET_CONFIG")
                
                @schemas.classproperty
                def REPL_SET_GET_STATUS(cls):
                    return cls("REPL_SET_GET_STATUS")
                
                @schemas.classproperty
                def SERVER_STATUS(cls):
                    return cls("SERVER_STATUS")
                
                @schemas.classproperty
                def VALIDATE(cls):
                    return cls("VALIDATE")
                
                @schemas.classproperty
                def SHARDING_STATE(cls):
                    return cls("SHARDING_STATE")
                
                @schemas.classproperty
                def TOP(cls):
                    return cls("TOP")
                
                @schemas.classproperty
                def SQL_GET_SCHEMA(cls):
                    return cls("SQL_GET_SCHEMA")
                
                @schemas.classproperty
                def SQL_SET_SCHEMA(cls):
                    return cls("SQL_SET_SCHEMA")
                
                @schemas.classproperty
                def VIEW_ALL_HISTORY(cls):
                    return cls("VIEW_ALL_HISTORY")
                
                @schemas.classproperty
                def OUT_TO_S3(cls):
                    return cls("OUT_TO_S3")
                
                @schemas.classproperty
                def STORAGE_GET_CONFIG(cls):
                    return cls("STORAGE_GET_CONFIG")
                
                @schemas.classproperty
                def STORAGE_SET_CONFIG(cls):
                    return cls("STORAGE_SET_CONFIG")
                
                @schemas.classproperty
                def FLUSH_ROUTER_CONFIG(cls):
                    return cls("FLUSH_ROUTER_CONFIG")
            
            
            class resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DBResource']:
                        return DBResource
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DBResource'], typing.List['DBResource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resources':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DBResource':
                    return super().__getitem__(i)
            __annotations__ = {
                "action": action,
                "resources": resources,
            }
    
    action: MetaOapg.properties.action
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> MetaOapg.properties.resources: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "resources", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union[MetaOapg.properties.resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "resources", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        action: typing.Union[MetaOapg.properties.action, str, ],
        resources: typing.Union[MetaOapg.properties.resources, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DBAction':
        return super().__new__(
            cls,
            *_args,
            action=action,
            resources=resources,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.db_resource import DBResource
