# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class LiveMigrationRequestView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dropEnabled",
            "destination",
            "source",
        }
        
        class properties:
        
            @staticmethod
            def destination() -> typing.Type['Destination']:
                return Destination
            dropEnabled = schemas.BoolSchema
        
            @staticmethod
            def source() -> typing.Type['Source']:
                return Source
            
            
            class _id(
                schemas.StrSchema
            ):
                pass
            
            
            class migrationHosts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'migrationHosts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "destination": destination,
                "dropEnabled": dropEnabled,
                "source": source,
                "_id": _id,
                "migrationHosts": migrationHosts,
            }
    
    dropEnabled: MetaOapg.properties.dropEnabled
    destination: 'Destination'
    source: 'Source'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'Destination': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dropEnabled"]) -> MetaOapg.properties.dropEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'Source': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["migrationHosts"]) -> MetaOapg.properties.migrationHosts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["destination", "dropEnabled", "source", "_id", "migrationHosts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> 'Destination': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dropEnabled"]) -> MetaOapg.properties.dropEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> 'Source': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["migrationHosts"]) -> typing.Union[MetaOapg.properties.migrationHosts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["destination", "dropEnabled", "source", "_id", "migrationHosts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dropEnabled: typing.Union[MetaOapg.properties.dropEnabled, bool, ],
        destination: 'Destination',
        source: 'Source',
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        migrationHosts: typing.Union[MetaOapg.properties.migrationHosts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveMigrationRequestView':
        return super().__new__(
            cls,
            *_args,
            dropEnabled=dropEnabled,
            destination=destination,
            source=source,
            _id=_id,
            migrationHosts=migrationHosts,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.destination import Destination
from atlas.model.source import Source
