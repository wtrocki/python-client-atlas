# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataLakeDatabase(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Database associated with this data lake. Databases contain collections and views.
    """


    class MetaOapg:
        
        class properties:
            
            
            class collections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataLakeDatabaseCollection']:
                        return DataLakeDatabaseCollection
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DataLakeDatabaseCollection'], typing.List['DataLakeDatabaseCollection']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'collections':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataLakeDatabaseCollection':
                    return super().__getitem__(i)
            
            
            class maxWildcardCollections(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 1000
                    inclusive_minimum = 1
            name = schemas.StrSchema
            
            
            class views(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataLakeView']:
                        return DataLakeView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DataLakeView'], typing.List['DataLakeView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'views':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataLakeView':
                    return super().__getitem__(i)
            __annotations__ = {
                "collections": collections,
                "maxWildcardCollections": maxWildcardCollections,
                "name": name,
                "views": views,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collections"]) -> MetaOapg.properties.collections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxWildcardCollections"]) -> MetaOapg.properties.maxWildcardCollections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collections", "maxWildcardCollections", "name", "views", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collections"]) -> typing.Union[MetaOapg.properties.collections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxWildcardCollections"]) -> typing.Union[MetaOapg.properties.maxWildcardCollections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> typing.Union[MetaOapg.properties.views, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collections", "maxWildcardCollections", "name", "views", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        collections: typing.Union[MetaOapg.properties.collections, list, tuple, schemas.Unset] = schemas.unset,
        maxWildcardCollections: typing.Union[MetaOapg.properties.maxWildcardCollections, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        views: typing.Union[MetaOapg.properties.views, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataLakeDatabase':
        return super().__new__(
            cls,
            *_args,
            collections=collections,
            maxWildcardCollections=maxWildcardCollections,
            name=name,
            views=views,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.data_lake_database_collection import DataLakeDatabaseCollection
from atlas.model.data_lake_view import DataLakeView
