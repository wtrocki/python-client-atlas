# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiLimitView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details of user managed limits.
    """


    class MetaOapg:
        required = {
            "name",
            "value",
        }
        
        @staticmethod
        def discriminator():
            return {
                'name': {
                    'atlas.project.deployment.clusters': ApiLimitView,
                    'atlas.project.deployment.nodesPerPrivateLinkRegion': ApiLimitView,
                    'atlas.project.security.databaseAccess.customRoles': ApiLimitView,
                    'atlas.project.security.databaseAccess.users': ApiLimitView,
                    'atlas.project.security.networkAccess.crossRegionEntries': ApiLimitView,
                    'atlas.project.security.networkAccess.entries': ApiLimitView,
                    'dataFederation.bytesProcessed.daily': DataFederationQueryLimit,
                    'dataFederation.bytesProcessed.monthly': DataFederationQueryLimit,
                    'dataFederation.bytesProcessed.query': DataFederationQueryLimit,
                    'dataFederation.bytesProcessed.weekly': DataFederationQueryLimit,
                }
            }
        
        class properties:
            name = schemas.StrSchema
            value = schemas.Int64Schema
            currentUsage = schemas.Int64Schema
            defaultLimit = schemas.Int64Schema
            maximumLimit = schemas.Int64Schema
            __annotations__ = {
                "name": name,
                "value": value,
                "currentUsage": currentUsage,
                "defaultLimit": defaultLimit,
                "maximumLimit": maximumLimit,
            }
    
    name: MetaOapg.properties.name
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentUsage"]) -> MetaOapg.properties.currentUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultLimit"]) -> MetaOapg.properties.defaultLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumLimit"]) -> MetaOapg.properties.maximumLimit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "value", "currentUsage", "defaultLimit", "maximumLimit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentUsage"]) -> typing.Union[MetaOapg.properties.currentUsage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultLimit"]) -> typing.Union[MetaOapg.properties.defaultLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumLimit"]) -> typing.Union[MetaOapg.properties.maximumLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "value", "currentUsage", "defaultLimit", "maximumLimit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
        currentUsage: typing.Union[MetaOapg.properties.currentUsage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        defaultLimit: typing.Union[MetaOapg.properties.defaultLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximumLimit: typing.Union[MetaOapg.properties.maximumLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiLimitView':
        return super().__new__(
            cls,
            *_args,
            name=name,
            value=value,
            currentUsage=currentUsage,
            defaultLimit=defaultLimit,
            maximumLimit=maximumLimit,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_limit_view import ApiLimitView
from atlas.model.data_federation_query_limit import DataFederationQueryLimit
