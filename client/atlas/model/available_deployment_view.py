# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AvailableDeploymentView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Deployments that can be migrated to MongoDB Atlas.
    """


    class MetaOapg:
        required = {
            "featureCompatibilityVersion",
            "tlsEnabled",
            "managed",
            "name",
            "sharded",
            "mongoDBVersion",
        }
        
        class properties:
            featureCompatibilityVersion = schemas.StrSchema
            managed = schemas.BoolSchema
            mongoDBVersion = schemas.StrSchema
            name = schemas.StrSchema
            sharded = schemas.BoolSchema
            tlsEnabled = schemas.BoolSchema
            agentVersion = schemas.StrSchema
            
            
            class clusterId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            dbSizeBytes = schemas.Int64Schema
            oplogSizeMB = schemas.Int32Schema
            shardsSize = schemas.Int32Schema
            __annotations__ = {
                "featureCompatibilityVersion": featureCompatibilityVersion,
                "managed": managed,
                "mongoDBVersion": mongoDBVersion,
                "name": name,
                "sharded": sharded,
                "tlsEnabled": tlsEnabled,
                "agentVersion": agentVersion,
                "clusterId": clusterId,
                "dbSizeBytes": dbSizeBytes,
                "oplogSizeMB": oplogSizeMB,
                "shardsSize": shardsSize,
            }
    
    featureCompatibilityVersion: MetaOapg.properties.featureCompatibilityVersion
    tlsEnabled: MetaOapg.properties.tlsEnabled
    managed: MetaOapg.properties.managed
    name: MetaOapg.properties.name
    sharded: MetaOapg.properties.sharded
    mongoDBVersion: MetaOapg.properties.mongoDBVersion
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureCompatibilityVersion"]) -> MetaOapg.properties.featureCompatibilityVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed"]) -> MetaOapg.properties.managed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mongoDBVersion"]) -> MetaOapg.properties.mongoDBVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharded"]) -> MetaOapg.properties.sharded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsEnabled"]) -> MetaOapg.properties.tlsEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agentVersion"]) -> MetaOapg.properties.agentVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterId"]) -> MetaOapg.properties.clusterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dbSizeBytes"]) -> MetaOapg.properties.dbSizeBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oplogSizeMB"]) -> MetaOapg.properties.oplogSizeMB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shardsSize"]) -> MetaOapg.properties.shardsSize: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["featureCompatibilityVersion", "managed", "mongoDBVersion", "name", "sharded", "tlsEnabled", "agentVersion", "clusterId", "dbSizeBytes", "oplogSizeMB", "shardsSize", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureCompatibilityVersion"]) -> MetaOapg.properties.featureCompatibilityVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed"]) -> MetaOapg.properties.managed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mongoDBVersion"]) -> MetaOapg.properties.mongoDBVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharded"]) -> MetaOapg.properties.sharded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsEnabled"]) -> MetaOapg.properties.tlsEnabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agentVersion"]) -> typing.Union[MetaOapg.properties.agentVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterId"]) -> typing.Union[MetaOapg.properties.clusterId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dbSizeBytes"]) -> typing.Union[MetaOapg.properties.dbSizeBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oplogSizeMB"]) -> typing.Union[MetaOapg.properties.oplogSizeMB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shardsSize"]) -> typing.Union[MetaOapg.properties.shardsSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["featureCompatibilityVersion", "managed", "mongoDBVersion", "name", "sharded", "tlsEnabled", "agentVersion", "clusterId", "dbSizeBytes", "oplogSizeMB", "shardsSize", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        featureCompatibilityVersion: typing.Union[MetaOapg.properties.featureCompatibilityVersion, str, ],
        tlsEnabled: typing.Union[MetaOapg.properties.tlsEnabled, bool, ],
        managed: typing.Union[MetaOapg.properties.managed, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        sharded: typing.Union[MetaOapg.properties.sharded, bool, ],
        mongoDBVersion: typing.Union[MetaOapg.properties.mongoDBVersion, str, ],
        agentVersion: typing.Union[MetaOapg.properties.agentVersion, str, schemas.Unset] = schemas.unset,
        clusterId: typing.Union[MetaOapg.properties.clusterId, str, schemas.Unset] = schemas.unset,
        dbSizeBytes: typing.Union[MetaOapg.properties.dbSizeBytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        oplogSizeMB: typing.Union[MetaOapg.properties.oplogSizeMB, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shardsSize: typing.Union[MetaOapg.properties.shardsSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AvailableDeploymentView':
        return super().__new__(
            cls,
            *_args,
            featureCompatibilityVersion=featureCompatibilityVersion,
            tlsEnabled=tlsEnabled,
            managed=managed,
            name=name,
            sharded=sharded,
            mongoDBVersion=mongoDBVersion,
            agentVersion=agentVersion,
            clusterId=clusterId,
            dbSizeBytes=dbSizeBytes,
            oplogSizeMB=oplogSizeMB,
            shardsSize=shardsSize,
            _configuration=_configuration,
            **kwargs,
        )
