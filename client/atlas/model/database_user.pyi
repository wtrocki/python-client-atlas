# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DatabaseUser(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "databaseName",
            "groupId",
            "username",
        }
        
        class properties:
            
            
            class databaseName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("admin")
                
                @schemas.classproperty
                def EXTERNAL(cls):
                    return cls("$external")
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            
            
            class username(
                schemas.StrSchema
            ):
                pass
            
            
            class awsIAMType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
                
                @schemas.classproperty
                def ROLE(cls):
                    return cls("ROLE")
            deleteAfterDate = schemas.DateTimeSchema
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NDSLabel']:
                        return NDSLabel
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NDSLabel'], typing.List['NDSLabel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NDSLabel':
                    return super().__getitem__(i)
            
            
            class ldapAuthType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("GROUP")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("USER")
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class password(
                schemas.StrSchema
            ):
                pass
            
            
            class roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Role']:
                        return Role
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Role'], typing.List['Role']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Role':
                    return super().__getitem__(i)
            
            
            class scopes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserScope']:
                        return UserScope
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserScope'], typing.List['UserScope']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scopes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserScope':
                    return super().__getitem__(i)
            
            
            class x509Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("NONE")
                
                @schemas.classproperty
                def CUSTOMER(cls):
                    return cls("CUSTOMER")
                
                @schemas.classproperty
                def MANAGED(cls):
                    return cls("MANAGED")
            __annotations__ = {
                "databaseName": databaseName,
                "groupId": groupId,
                "username": username,
                "awsIAMType": awsIAMType,
                "deleteAfterDate": deleteAfterDate,
                "labels": labels,
                "ldapAuthType": ldapAuthType,
                "links": links,
                "password": password,
                "roles": roles,
                "scopes": scopes,
                "x509Type": x509Type,
            }
    
    databaseName: MetaOapg.properties.databaseName
    groupId: MetaOapg.properties.groupId
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databaseName"]) -> MetaOapg.properties.databaseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awsIAMType"]) -> MetaOapg.properties.awsIAMType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleteAfterDate"]) -> MetaOapg.properties.deleteAfterDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ldapAuthType"]) -> MetaOapg.properties.ldapAuthType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> MetaOapg.properties.roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> MetaOapg.properties.scopes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x509Type"]) -> MetaOapg.properties.x509Type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["databaseName", "groupId", "username", "awsIAMType", "deleteAfterDate", "labels", "ldapAuthType", "links", "password", "roles", "scopes", "x509Type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databaseName"]) -> MetaOapg.properties.databaseName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awsIAMType"]) -> typing.Union[MetaOapg.properties.awsIAMType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleteAfterDate"]) -> typing.Union[MetaOapg.properties.deleteAfterDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ldapAuthType"]) -> typing.Union[MetaOapg.properties.ldapAuthType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union[MetaOapg.properties.roles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union[MetaOapg.properties.scopes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x509Type"]) -> typing.Union[MetaOapg.properties.x509Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["databaseName", "groupId", "username", "awsIAMType", "deleteAfterDate", "labels", "ldapAuthType", "links", "password", "roles", "scopes", "x509Type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        databaseName: typing.Union[MetaOapg.properties.databaseName, str, ],
        groupId: typing.Union[MetaOapg.properties.groupId, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        awsIAMType: typing.Union[MetaOapg.properties.awsIAMType, str, schemas.Unset] = schemas.unset,
        deleteAfterDate: typing.Union[MetaOapg.properties.deleteAfterDate, str, datetime, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        ldapAuthType: typing.Union[MetaOapg.properties.ldapAuthType, str, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        roles: typing.Union[MetaOapg.properties.roles, list, tuple, schemas.Unset] = schemas.unset,
        scopes: typing.Union[MetaOapg.properties.scopes, list, tuple, schemas.Unset] = schemas.unset,
        x509Type: typing.Union[MetaOapg.properties.x509Type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatabaseUser':
        return super().__new__(
            cls,
            *_args,
            databaseName=databaseName,
            groupId=groupId,
            username=username,
            awsIAMType=awsIAMType,
            deleteAfterDate=deleteAfterDate,
            labels=labels,
            ldapAuthType=ldapAuthType,
            links=links,
            password=password,
            roles=roles,
            scopes=scopes,
            x509Type=x509Type,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
from atlas.model.nds_label import NDSLabel
from atlas.model.role import Role
from atlas.model.user_scope import UserScope
