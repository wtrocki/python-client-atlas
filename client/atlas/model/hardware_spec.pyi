# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class HardwareSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Hardware specifications for all electable nodes deployed in the region. Electable nodes can become the primary and can enable local reads. If you don't specify this option, MongoDB Cloud deploys no electable nodes to the region.
    """


    class MetaOapg:
        
        class properties:
            diskIOPS = schemas.Int32Schema
            
            
            class ebsVolumeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("STANDARD")
                
                @schemas.classproperty
                def PROVISIONED(cls):
                    return cls("PROVISIONED")
            
            
            class instanceSize(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def M0(cls):
                    return cls("M0")
                
                @schemas.classproperty
                def M2(cls):
                    return cls("M2")
                
                @schemas.classproperty
                def M5(cls):
                    return cls("M5")
            nodeCount = schemas.Int32Schema
            __annotations__ = {
                "diskIOPS": diskIOPS,
                "ebsVolumeType": ebsVolumeType,
                "instanceSize": instanceSize,
                "nodeCount": nodeCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diskIOPS"]) -> MetaOapg.properties.diskIOPS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ebsVolumeType"]) -> MetaOapg.properties.ebsVolumeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceSize"]) -> MetaOapg.properties.instanceSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeCount"]) -> MetaOapg.properties.nodeCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["diskIOPS", "ebsVolumeType", "instanceSize", "nodeCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diskIOPS"]) -> typing.Union[MetaOapg.properties.diskIOPS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ebsVolumeType"]) -> typing.Union[MetaOapg.properties.ebsVolumeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceSize"]) -> typing.Union[MetaOapg.properties.instanceSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeCount"]) -> typing.Union[MetaOapg.properties.nodeCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["diskIOPS", "ebsVolumeType", "instanceSize", "nodeCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        diskIOPS: typing.Union[MetaOapg.properties.diskIOPS, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ebsVolumeType: typing.Union[MetaOapg.properties.ebsVolumeType, str, schemas.Unset] = schemas.unset,
        instanceSize: typing.Union[MetaOapg.properties.instanceSize, str, schemas.Unset] = schemas.unset,
        nodeCount: typing.Union[MetaOapg.properties.nodeCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HardwareSpec':
        return super().__new__(
            cls,
            *_args,
            diskIOPS=diskIOPS,
            ebsVolumeType=ebsVolumeType,
            instanceSize=instanceSize,
            nodeCount=nodeCount,
            _configuration=_configuration,
            **kwargs,
        )
