# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class GroupMaintenanceWindow(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dayOfWeek",
            "hourOfDay",
        }
        
        class properties:
            
            
            class dayOfWeek(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 7
                    inclusive_minimum = 1
            
            
            class hourOfDay(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 23
                    inclusive_minimum = 0
            autoDeferOnceEnabled = schemas.BoolSchema
            startASAP = schemas.BoolSchema
            __annotations__ = {
                "dayOfWeek": dayOfWeek,
                "hourOfDay": hourOfDay,
                "autoDeferOnceEnabled": autoDeferOnceEnabled,
                "startASAP": startASAP,
            }
    
    dayOfWeek: MetaOapg.properties.dayOfWeek
    hourOfDay: MetaOapg.properties.hourOfDay
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOfWeek"]) -> MetaOapg.properties.dayOfWeek: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourOfDay"]) -> MetaOapg.properties.hourOfDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoDeferOnceEnabled"]) -> MetaOapg.properties.autoDeferOnceEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startASAP"]) -> MetaOapg.properties.startASAP: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dayOfWeek", "hourOfDay", "autoDeferOnceEnabled", "startASAP", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOfWeek"]) -> MetaOapg.properties.dayOfWeek: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourOfDay"]) -> MetaOapg.properties.hourOfDay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoDeferOnceEnabled"]) -> typing.Union[MetaOapg.properties.autoDeferOnceEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startASAP"]) -> typing.Union[MetaOapg.properties.startASAP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dayOfWeek", "hourOfDay", "autoDeferOnceEnabled", "startASAP", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dayOfWeek: typing.Union[MetaOapg.properties.dayOfWeek, decimal.Decimal, int, ],
        hourOfDay: typing.Union[MetaOapg.properties.hourOfDay, decimal.Decimal, int, ],
        autoDeferOnceEnabled: typing.Union[MetaOapg.properties.autoDeferOnceEnabled, bool, schemas.Unset] = schemas.unset,
        startASAP: typing.Union[MetaOapg.properties.startASAP, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupMaintenanceWindow':
        return super().__new__(
            cls,
            *_args,
            dayOfWeek=dayOfWeek,
            hourOfDay=hourOfDay,
            autoDeferOnceEnabled=autoDeferOnceEnabled,
            startASAP=startASAP,
            _configuration=_configuration,
            **kwargs,
        )
