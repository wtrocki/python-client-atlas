# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiMongoDBAccessLogsView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Authentication attempt, one per object, made against the cluster.
    """


    class MetaOapg:
        
        class properties:
            authResult = schemas.BoolSchema
            authSource = schemas.StrSchema
            failureReason = schemas.StrSchema
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            hostname = schemas.StrSchema
            
            
            class ipAddress(
                schemas.StrSchema
            ):
                pass
            logLine = schemas.StrSchema
            timestamp = schemas.StrSchema
            username = schemas.StrSchema
            __annotations__ = {
                "authResult": authResult,
                "authSource": authSource,
                "failureReason": failureReason,
                "groupId": groupId,
                "hostname": hostname,
                "ipAddress": ipAddress,
                "logLine": logLine,
                "timestamp": timestamp,
                "username": username,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authResult"]) -> MetaOapg.properties.authResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authSource"]) -> MetaOapg.properties.authSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failureReason"]) -> MetaOapg.properties.failureReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logLine"]) -> MetaOapg.properties.logLine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authResult", "authSource", "failureReason", "groupId", "hostname", "ipAddress", "logLine", "timestamp", "username", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authResult"]) -> typing.Union[MetaOapg.properties.authResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authSource"]) -> typing.Union[MetaOapg.properties.authSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failureReason"]) -> typing.Union[MetaOapg.properties.failureReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logLine"]) -> typing.Union[MetaOapg.properties.logLine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authResult", "authSource", "failureReason", "groupId", "hostname", "ipAddress", "logLine", "timestamp", "username", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        authResult: typing.Union[MetaOapg.properties.authResult, bool, schemas.Unset] = schemas.unset,
        authSource: typing.Union[MetaOapg.properties.authSource, str, schemas.Unset] = schemas.unset,
        failureReason: typing.Union[MetaOapg.properties.failureReason, str, schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        logLine: typing.Union[MetaOapg.properties.logLine, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiMongoDBAccessLogsView':
        return super().__new__(
            cls,
            *_args,
            authResult=authResult,
            authSource=authSource,
            failureReason=failureReason,
            groupId=groupId,
            hostname=hostname,
            ipAddress=ipAddress,
            logLine=logLine,
            timestamp=timestamp,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
