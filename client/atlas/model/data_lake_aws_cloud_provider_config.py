# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataLakeAWSCloudProviderConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Name of the cloud service that hosts the data lake's data stores.
    """


    class MetaOapg:
        required = {
            "testS3Bucket",
            "roleId",
        }
        
        class properties:
            roleId = schemas.StrSchema
            testS3Bucket = schemas.StrSchema
            externalId = schemas.StrSchema
            
            
            class iamAssumedRoleARN(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2048
                    min_length = 20
            iamUserARN = schemas.StrSchema
            __annotations__ = {
                "roleId": roleId,
                "testS3Bucket": testS3Bucket,
                "externalId": externalId,
                "iamAssumedRoleARN": iamAssumedRoleARN,
                "iamUserARN": iamUserARN,
            }
    
    testS3Bucket: MetaOapg.properties.testS3Bucket
    roleId: MetaOapg.properties.roleId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleId"]) -> MetaOapg.properties.roleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["testS3Bucket"]) -> MetaOapg.properties.testS3Bucket: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iamAssumedRoleARN"]) -> MetaOapg.properties.iamAssumedRoleARN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iamUserARN"]) -> MetaOapg.properties.iamUserARN: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["roleId", "testS3Bucket", "externalId", "iamAssumedRoleARN", "iamUserARN", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleId"]) -> MetaOapg.properties.roleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["testS3Bucket"]) -> MetaOapg.properties.testS3Bucket: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iamAssumedRoleARN"]) -> typing.Union[MetaOapg.properties.iamAssumedRoleARN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iamUserARN"]) -> typing.Union[MetaOapg.properties.iamUserARN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["roleId", "testS3Bucket", "externalId", "iamAssumedRoleARN", "iamUserARN", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        testS3Bucket: typing.Union[MetaOapg.properties.testS3Bucket, str, ],
        roleId: typing.Union[MetaOapg.properties.roleId, str, ],
        externalId: typing.Union[MetaOapg.properties.externalId, str, schemas.Unset] = schemas.unset,
        iamAssumedRoleARN: typing.Union[MetaOapg.properties.iamAssumedRoleARN, str, schemas.Unset] = schemas.unset,
        iamUserARN: typing.Union[MetaOapg.properties.iamUserARN, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataLakeAWSCloudProviderConfig':
        return super().__new__(
            cls,
            *_args,
            testS3Bucket=testS3Bucket,
            roleId=roleId,
            externalId=externalId,
            iamAssumedRoleARN=iamAssumedRoleARN,
            iamUserARN=iamUserARN,
            _configuration=_configuration,
            **kwargs,
        )
