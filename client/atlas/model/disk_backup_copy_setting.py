# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DiskBackupCopySetting(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Copy setting item in the desired backup policy.
    """


    class MetaOapg:
        
        class properties:
            
            
            class cloudProvider(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AWS": "AWS",
                        "AZURE": "AZURE",
                        "GCP": "GCP",
                    }
                
                @schemas.classproperty
                def AWS(cls):
                    return cls("AWS")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def GCP(cls):
                    return cls("GCP")
            
            
            class frequencies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "HOURLY": "HOURLY",
                                "DAILY": "DAILY",
                                "WEEKLY": "WEEKLY",
                                "MONTHLY": "MONTHLY",
                                "ON_DEMAND": "ON_DEMAND",
                            }
                        
                        @schemas.classproperty
                        def HOURLY(cls):
                            return cls("HOURLY")
                        
                        @schemas.classproperty
                        def DAILY(cls):
                            return cls("DAILY")
                        
                        @schemas.classproperty
                        def WEEKLY(cls):
                            return cls("WEEKLY")
                        
                        @schemas.classproperty
                        def MONTHLY(cls):
                            return cls("MONTHLY")
                        
                        @schemas.classproperty
                        def ON_DEMAND(cls):
                            return cls("ON_DEMAND")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'frequencies':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            regionName = schemas.StrSchema
            replicationSpecId = schemas.StrSchema
            shouldCopyOplogs = schemas.BoolSchema
            __annotations__ = {
                "cloudProvider": cloudProvider,
                "frequencies": frequencies,
                "regionName": regionName,
                "replicationSpecId": replicationSpecId,
                "shouldCopyOplogs": shouldCopyOplogs,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloudProvider"]) -> MetaOapg.properties.cloudProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencies"]) -> MetaOapg.properties.frequencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regionName"]) -> MetaOapg.properties.regionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicationSpecId"]) -> MetaOapg.properties.replicationSpecId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shouldCopyOplogs"]) -> MetaOapg.properties.shouldCopyOplogs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cloudProvider", "frequencies", "regionName", "replicationSpecId", "shouldCopyOplogs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloudProvider"]) -> typing.Union[MetaOapg.properties.cloudProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencies"]) -> typing.Union[MetaOapg.properties.frequencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regionName"]) -> typing.Union[MetaOapg.properties.regionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicationSpecId"]) -> typing.Union[MetaOapg.properties.replicationSpecId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shouldCopyOplogs"]) -> typing.Union[MetaOapg.properties.shouldCopyOplogs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cloudProvider", "frequencies", "regionName", "replicationSpecId", "shouldCopyOplogs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cloudProvider: typing.Union[MetaOapg.properties.cloudProvider, str, schemas.Unset] = schemas.unset,
        frequencies: typing.Union[MetaOapg.properties.frequencies, list, tuple, schemas.Unset] = schemas.unset,
        regionName: typing.Union[MetaOapg.properties.regionName, str, schemas.Unset] = schemas.unset,
        replicationSpecId: typing.Union[MetaOapg.properties.replicationSpecId, str, schemas.Unset] = schemas.unset,
        shouldCopyOplogs: typing.Union[MetaOapg.properties.shouldCopyOplogs, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DiskBackupCopySetting':
        return super().__new__(
            cls,
            *_args,
            cloudProvider=cloudProvider,
            frequencies=frequencies,
            regionName=regionName,
            replicationSpecId=replicationSpecId,
            shouldCopyOplogs=shouldCopyOplogs,
            _configuration=_configuration,
            **kwargs,
        )
