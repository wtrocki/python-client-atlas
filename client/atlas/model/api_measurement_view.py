# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiMeasurementView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class dataPoints(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApiMetricDataPointView']:
                        return ApiMetricDataPointView
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApiMetricDataPointView'], typing.List['ApiMetricDataPointView']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataPoints':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApiMetricDataPointView':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            
            
            class units(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BYTES": "BYTES",
                        "BYTES_PER_SECOND": "BYTES_PER_SECOND",
                        "GIGABYTES": "GIGABYTES",
                        "GIGABYTES_PER_HOUR": "GIGABYTES_PER_HOUR",
                        "MEGABYTES_PER_SECOND": "MEGABYTES_PER_SECOND",
                        "MILLISECONDS": "MILLISECONDS",
                        "PERCENT": "PERCENT",
                        "SCALAR": "SCALAR",
                        "SCALAR_PER_SECOND": "SCALAR_PER_SECOND",
                    }
                
                @schemas.classproperty
                def BYTES(cls):
                    return cls("BYTES")
                
                @schemas.classproperty
                def BYTES_PER_SECOND(cls):
                    return cls("BYTES_PER_SECOND")
                
                @schemas.classproperty
                def GIGABYTES(cls):
                    return cls("GIGABYTES")
                
                @schemas.classproperty
                def GIGABYTES_PER_HOUR(cls):
                    return cls("GIGABYTES_PER_HOUR")
                
                @schemas.classproperty
                def MEGABYTES_PER_SECOND(cls):
                    return cls("MEGABYTES_PER_SECOND")
                
                @schemas.classproperty
                def MILLISECONDS(cls):
                    return cls("MILLISECONDS")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("PERCENT")
                
                @schemas.classproperty
                def SCALAR(cls):
                    return cls("SCALAR")
                
                @schemas.classproperty
                def SCALAR_PER_SECOND(cls):
                    return cls("SCALAR_PER_SECOND")
            __annotations__ = {
                "dataPoints": dataPoints,
                "name": name,
                "units": units,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataPoints"]) -> MetaOapg.properties.dataPoints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataPoints", "name", "units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataPoints"]) -> typing.Union[MetaOapg.properties.dataPoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataPoints", "name", "units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dataPoints: typing.Union[MetaOapg.properties.dataPoints, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiMeasurementView':
        return super().__new__(
            cls,
            *_args,
            dataPoints=dataPoints,
            name=name,
            units=units,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_metric_data_point_view import ApiMetricDataPointView
