# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class FreeProviderSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "providerName",
        }
        
        class properties:
            providerName = schemas.StrSchema
        
            @staticmethod
            def autoScaling() -> typing.Type['FreeAutoScaling']:
                return FreeAutoScaling
            
            
            class backingProviderName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AWS(cls):
                    return cls("AWS")
                
                @schemas.classproperty
                def GCP(cls):
                    return cls("GCP")
                
                @schemas.classproperty
                def AZURE(cls):
                    return cls("AZURE")
                
                @schemas.classproperty
                def TENANT(cls):
                    return cls("TENANT")
                
                @schemas.classproperty
                def SERVERLESS(cls):
                    return cls("SERVERLESS")
            
            
            class instanceSizeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def M0(cls):
                    return cls("M0")
                
                @schemas.classproperty
                def M2(cls):
                    return cls("M2")
                
                @schemas.classproperty
                def M5(cls):
                    return cls("M5")
            regionName = schemas.StrSchema
            __annotations__ = {
                "providerName": providerName,
                "autoScaling": autoScaling,
                "backingProviderName": backingProviderName,
                "instanceSizeName": instanceSizeName,
                "regionName": regionName,
            }
    
    providerName: MetaOapg.properties.providerName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoScaling"]) -> 'FreeAutoScaling': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backingProviderName"]) -> MetaOapg.properties.backingProviderName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceSizeName"]) -> MetaOapg.properties.instanceSizeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regionName"]) -> MetaOapg.properties.regionName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["providerName", "autoScaling", "backingProviderName", "instanceSizeName", "regionName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoScaling"]) -> typing.Union['FreeAutoScaling', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backingProviderName"]) -> typing.Union[MetaOapg.properties.backingProviderName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceSizeName"]) -> typing.Union[MetaOapg.properties.instanceSizeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regionName"]) -> typing.Union[MetaOapg.properties.regionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["providerName", "autoScaling", "backingProviderName", "instanceSizeName", "regionName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        providerName: typing.Union[MetaOapg.properties.providerName, str, ],
        autoScaling: typing.Union['FreeAutoScaling', schemas.Unset] = schemas.unset,
        backingProviderName: typing.Union[MetaOapg.properties.backingProviderName, str, schemas.Unset] = schemas.unset,
        instanceSizeName: typing.Union[MetaOapg.properties.instanceSizeName, str, schemas.Unset] = schemas.unset,
        regionName: typing.Union[MetaOapg.properties.regionName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FreeProviderSettings':
        return super().__new__(
            cls,
            *_args,
            providerName=providerName,
            autoScaling=autoScaling,
            backingProviderName=backingProviderName,
            instanceSizeName=instanceSizeName,
            regionName=regionName,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.free_auto_scaling import FreeAutoScaling
