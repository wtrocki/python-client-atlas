# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AWSKMS(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Amazon Web Services (AWS) KMS configuration details and encryption at rest configuration set for the specified project.
    """


    class MetaOapg:
        
        class properties:
            
            
            class accessKeyID(
                schemas.StrSchema
            ):
                pass
            
            
            class customerMasterKeyID(
                schemas.StrSchema
            ):
                pass
            enabled = schemas.BoolSchema
            
            
            class region(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def US_GOV_WEST_1(cls):
                    return cls("US_GOV_WEST_1")
                
                @schemas.classproperty
                def US_GOV_EAST_1(cls):
                    return cls("US_GOV_EAST_1")
                
                @schemas.classproperty
                def US_EAST_1(cls):
                    return cls("US_EAST_1")
                
                @schemas.classproperty
                def US_EAST_2(cls):
                    return cls("US_EAST_2")
                
                @schemas.classproperty
                def US_WEST_1(cls):
                    return cls("US_WEST_1")
                
                @schemas.classproperty
                def US_WEST_2(cls):
                    return cls("US_WEST_2")
                
                @schemas.classproperty
                def CA_CENTRAL_1(cls):
                    return cls("CA_CENTRAL_1")
                
                @schemas.classproperty
                def EU_NORTH_1(cls):
                    return cls("EU_NORTH_1")
                
                @schemas.classproperty
                def EU_WEST_1(cls):
                    return cls("EU_WEST_1")
                
                @schemas.classproperty
                def EU_WEST_2(cls):
                    return cls("EU_WEST_2")
                
                @schemas.classproperty
                def EU_WEST_3(cls):
                    return cls("EU_WEST_3")
                
                @schemas.classproperty
                def EU_CENTRAL_1(cls):
                    return cls("EU_CENTRAL_1")
                
                @schemas.classproperty
                def AP_EAST_1(cls):
                    return cls("AP_EAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_1(cls):
                    return cls("AP_NORTHEAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_2(cls):
                    return cls("AP_NORTHEAST_2")
                
                @schemas.classproperty
                def AP_NORTHEAST_3(cls):
                    return cls("AP_NORTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTHEAST_1(cls):
                    return cls("AP_SOUTHEAST_1")
                
                @schemas.classproperty
                def AP_SOUTHEAST_2(cls):
                    return cls("AP_SOUTHEAST_2")
                
                @schemas.classproperty
                def AP_SOUTHEAST_3(cls):
                    return cls("AP_SOUTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTH_1(cls):
                    return cls("AP_SOUTH_1")
                
                @schemas.classproperty
                def SA_EAST_1(cls):
                    return cls("SA_EAST_1")
                
                @schemas.classproperty
                def CN_NORTH_1(cls):
                    return cls("CN_NORTH_1")
                
                @schemas.classproperty
                def CN_NORTHWEST_1(cls):
                    return cls("CN_NORTHWEST_1")
                
                @schemas.classproperty
                def ME_SOUTH_1(cls):
                    return cls("ME_SOUTH_1")
                
                @schemas.classproperty
                def AF_SOUTH_1(cls):
                    return cls("AF_SOUTH_1")
                
                @schemas.classproperty
                def EU_SOUTH_1(cls):
                    return cls("EU_SOUTH_1")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
            
            
            class roleId(
                schemas.StrSchema
            ):
                pass
            secretAccessKey = schemas.StrSchema
            valid = schemas.BoolSchema
            __annotations__ = {
                "accessKeyID": accessKeyID,
                "customerMasterKeyID": customerMasterKeyID,
                "enabled": enabled,
                "region": region,
                "roleId": roleId,
                "secretAccessKey": secretAccessKey,
                "valid": valid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessKeyID"]) -> MetaOapg.properties.accessKeyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerMasterKeyID"]) -> MetaOapg.properties.customerMasterKeyID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roleId"]) -> MetaOapg.properties.roleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretAccessKey"]) -> MetaOapg.properties.secretAccessKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accessKeyID", "customerMasterKeyID", "enabled", "region", "roleId", "secretAccessKey", "valid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessKeyID"]) -> typing.Union[MetaOapg.properties.accessKeyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerMasterKeyID"]) -> typing.Union[MetaOapg.properties.customerMasterKeyID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roleId"]) -> typing.Union[MetaOapg.properties.roleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretAccessKey"]) -> typing.Union[MetaOapg.properties.secretAccessKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> typing.Union[MetaOapg.properties.valid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accessKeyID", "customerMasterKeyID", "enabled", "region", "roleId", "secretAccessKey", "valid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        accessKeyID: typing.Union[MetaOapg.properties.accessKeyID, str, schemas.Unset] = schemas.unset,
        customerMasterKeyID: typing.Union[MetaOapg.properties.customerMasterKeyID, str, schemas.Unset] = schemas.unset,
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        roleId: typing.Union[MetaOapg.properties.roleId, str, schemas.Unset] = schemas.unset,
        secretAccessKey: typing.Union[MetaOapg.properties.secretAccessKey, str, schemas.Unset] = schemas.unset,
        valid: typing.Union[MetaOapg.properties.valid, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AWSKMS':
        return super().__new__(
            cls,
            *_args,
            accessKeyID=accessKeyID,
            customerMasterKeyID=customerMasterKeyID,
            enabled=enabled,
            region=region,
            roleId=roleId,
            secretAccessKey=secretAccessKey,
            valid=valid,
            _configuration=_configuration,
            **kwargs,
        )
