# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiRestoreJobDeliveryView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Method and details that indicate how to deliver the restored snapshot data.
    """


    class MetaOapg:
        required = {
            "methodName",
        }
        
        class properties:
            
            
            class methodName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CLIENT_PIT_HTTP": "CLIENT_PIT_HTTP",
                        "QUERY": "QUERY",
                        "AUTOMATED_RESTORE": "AUTOMATED_RESTORE",
                        "HTTP": "HTTP",
                        "THIRD_PARTY_COPY": "THIRD_PARTY_COPY",
                        "CLIENT_PIT_SCP": "CLIENT_PIT_SCP",
                        "SCP": "SCP",
                    }
                
                @schemas.classproperty
                def CLIENT_PIT_HTTP(cls):
                    return cls("CLIENT_PIT_HTTP")
                
                @schemas.classproperty
                def QUERY(cls):
                    return cls("QUERY")
                
                @schemas.classproperty
                def AUTOMATED_RESTORE(cls):
                    return cls("AUTOMATED_RESTORE")
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("HTTP")
                
                @schemas.classproperty
                def THIRD_PARTY_COPY(cls):
                    return cls("THIRD_PARTY_COPY")
                
                @schemas.classproperty
                def CLIENT_PIT_SCP(cls):
                    return cls("CLIENT_PIT_SCP")
                
                @schemas.classproperty
                def SCP(cls):
                    return cls("SCP")
            authHeader = schemas.StrSchema
            authValue = schemas.StrSchema
            
            
            class expirationHours(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 1
            expires = schemas.DateTimeSchema
            
            
            class maxDownloads(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 1
            
            
            class statusName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NOT_STARTED": "NOT_STARTED",
                        "IN_PROGRESS": "IN_PROGRESS",
                        "READY": "READY",
                        "FAILED": "FAILED",
                        "INTERRUPTED": "INTERRUPTED",
                        "EXPIRED": "EXPIRED",
                        "MAX_DOWNLOADS_EXCEEDED": "MAX_DOWNLOADS_EXCEEDED",
                    }
                
                @schemas.classproperty
                def NOT_STARTED(cls):
                    return cls("NOT_STARTED")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("IN_PROGRESS")
                
                @schemas.classproperty
                def READY(cls):
                    return cls("READY")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def INTERRUPTED(cls):
                    return cls("INTERRUPTED")
                
                @schemas.classproperty
                def EXPIRED(cls):
                    return cls("EXPIRED")
                
                @schemas.classproperty
                def MAX_DOWNLOADS_EXCEEDED(cls):
                    return cls("MAX_DOWNLOADS_EXCEEDED")
            
            
            class targetClusterId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class targetClusterName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 1
                    regex=[{
                        'pattern': r'^([a-zA-Z0-9]([a-zA-Z0-9-]){0,21}(?<!-)([\w]{0,42}))$',  # noqa: E501
                    }]
            
            
            class targetGroupId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            url = schemas.StrSchema
            urlV2 = schemas.StrSchema
            __annotations__ = {
                "methodName": methodName,
                "authHeader": authHeader,
                "authValue": authValue,
                "expirationHours": expirationHours,
                "expires": expires,
                "maxDownloads": maxDownloads,
                "statusName": statusName,
                "targetClusterId": targetClusterId,
                "targetClusterName": targetClusterName,
                "targetGroupId": targetGroupId,
                "url": url,
                "urlV2": urlV2,
            }
    
    methodName: MetaOapg.properties.methodName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodName"]) -> MetaOapg.properties.methodName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authHeader"]) -> MetaOapg.properties.authHeader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authValue"]) -> MetaOapg.properties.authValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationHours"]) -> MetaOapg.properties.expirationHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxDownloads"]) -> MetaOapg.properties.maxDownloads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusName"]) -> MetaOapg.properties.statusName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetClusterId"]) -> MetaOapg.properties.targetClusterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetClusterName"]) -> MetaOapg.properties.targetClusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetGroupId"]) -> MetaOapg.properties.targetGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urlV2"]) -> MetaOapg.properties.urlV2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["methodName", "authHeader", "authValue", "expirationHours", "expires", "maxDownloads", "statusName", "targetClusterId", "targetClusterName", "targetGroupId", "url", "urlV2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodName"]) -> MetaOapg.properties.methodName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authHeader"]) -> typing.Union[MetaOapg.properties.authHeader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authValue"]) -> typing.Union[MetaOapg.properties.authValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationHours"]) -> typing.Union[MetaOapg.properties.expirationHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxDownloads"]) -> typing.Union[MetaOapg.properties.maxDownloads, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusName"]) -> typing.Union[MetaOapg.properties.statusName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetClusterId"]) -> typing.Union[MetaOapg.properties.targetClusterId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetClusterName"]) -> typing.Union[MetaOapg.properties.targetClusterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetGroupId"]) -> typing.Union[MetaOapg.properties.targetGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urlV2"]) -> typing.Union[MetaOapg.properties.urlV2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["methodName", "authHeader", "authValue", "expirationHours", "expires", "maxDownloads", "statusName", "targetClusterId", "targetClusterName", "targetGroupId", "url", "urlV2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        methodName: typing.Union[MetaOapg.properties.methodName, str, ],
        authHeader: typing.Union[MetaOapg.properties.authHeader, str, schemas.Unset] = schemas.unset,
        authValue: typing.Union[MetaOapg.properties.authValue, str, schemas.Unset] = schemas.unset,
        expirationHours: typing.Union[MetaOapg.properties.expirationHours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expires: typing.Union[MetaOapg.properties.expires, str, datetime, schemas.Unset] = schemas.unset,
        maxDownloads: typing.Union[MetaOapg.properties.maxDownloads, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusName: typing.Union[MetaOapg.properties.statusName, str, schemas.Unset] = schemas.unset,
        targetClusterId: typing.Union[MetaOapg.properties.targetClusterId, str, schemas.Unset] = schemas.unset,
        targetClusterName: typing.Union[MetaOapg.properties.targetClusterName, str, schemas.Unset] = schemas.unset,
        targetGroupId: typing.Union[MetaOapg.properties.targetGroupId, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        urlV2: typing.Union[MetaOapg.properties.urlV2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiRestoreJobDeliveryView':
        return super().__new__(
            cls,
            *_args,
            methodName=methodName,
            authHeader=authHeader,
            authValue=authValue,
            expirationHours=expirationHours,
            expires=expires,
            maxDownloads=maxDownloads,
            statusName=statusName,
            targetClusterId=targetClusterId,
            targetClusterName=targetClusterName,
            targetGroupId=targetGroupId,
            url=url,
            urlV2=urlV2,
            _configuration=_configuration,
            **kwargs,
        )
