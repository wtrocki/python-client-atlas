# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiCheckpointPartView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Metadata contained in one document that describes the complete snapshot taken for this node.
    """


    class MetaOapg:
        
        class properties:
            replicaSetName = schemas.StrSchema
            shardName = schemas.StrSchema
            tokenDiscovered = schemas.BoolSchema
        
            @staticmethod
            def tokenTimestamp() -> typing.Type['ApiBSONTimestampView']:
                return ApiBSONTimestampView
            
            
            class typeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "REPLICA_SET": "REPLICA_SET",
                        "CONFIG_SERVER": "CONFIG_SERVER",
                        "CONFIG_SERVER_REPLICA_SET": "CONFIG_SERVER_REPLICA_SET",
                    }
                
                @schemas.classproperty
                def REPLICA_SET(cls):
                    return cls("REPLICA_SET")
                
                @schemas.classproperty
                def CONFIG_SERVER(cls):
                    return cls("CONFIG_SERVER")
                
                @schemas.classproperty
                def CONFIG_SERVER_REPLICA_SET(cls):
                    return cls("CONFIG_SERVER_REPLICA_SET")
            __annotations__ = {
                "replicaSetName": replicaSetName,
                "shardName": shardName,
                "tokenDiscovered": tokenDiscovered,
                "tokenTimestamp": tokenTimestamp,
                "typeName": typeName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicaSetName"]) -> MetaOapg.properties.replicaSetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shardName"]) -> MetaOapg.properties.shardName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenDiscovered"]) -> MetaOapg.properties.tokenDiscovered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenTimestamp"]) -> 'ApiBSONTimestampView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeName"]) -> MetaOapg.properties.typeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["replicaSetName", "shardName", "tokenDiscovered", "tokenTimestamp", "typeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicaSetName"]) -> typing.Union[MetaOapg.properties.replicaSetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shardName"]) -> typing.Union[MetaOapg.properties.shardName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenDiscovered"]) -> typing.Union[MetaOapg.properties.tokenDiscovered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenTimestamp"]) -> typing.Union['ApiBSONTimestampView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeName"]) -> typing.Union[MetaOapg.properties.typeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["replicaSetName", "shardName", "tokenDiscovered", "tokenTimestamp", "typeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        replicaSetName: typing.Union[MetaOapg.properties.replicaSetName, str, schemas.Unset] = schemas.unset,
        shardName: typing.Union[MetaOapg.properties.shardName, str, schemas.Unset] = schemas.unset,
        tokenDiscovered: typing.Union[MetaOapg.properties.tokenDiscovered, bool, schemas.Unset] = schemas.unset,
        tokenTimestamp: typing.Union['ApiBSONTimestampView', schemas.Unset] = schemas.unset,
        typeName: typing.Union[MetaOapg.properties.typeName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiCheckpointPartView':
        return super().__new__(
            cls,
            *_args,
            replicaSetName=replicaSetName,
            shardName=shardName,
            tokenDiscovered=tokenDiscovered,
            tokenTimestamp=tokenTimestamp,
            typeName=typeName,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.api_bson_timestamp_view import ApiBSONTimestampView
