# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class AWSProviderSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "providerName",
        }
        
        class properties:
            providerName = schemas.StrSchema
        
            @staticmethod
            def autoScaling() -> typing.Type['AWSAutoScaling']:
                return AWSAutoScaling
            diskIOPS = schemas.Int32Schema
            encryptEBSVolume = schemas.BoolSchema
            
            
            class instanceSizeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "M10": "M10",
                        "M20": "M20",
                        "M30": "M30",
                        "M40": "M40",
                        "M50": "M50",
                        "M60": "M60",
                        "M80": "M80",
                        "M100": "M100",
                        "M140": "M140",
                        "M200": "M200",
                        "M300": "M300",
                        "R40": "R40",
                        "R50": "R50",
                        "R60": "R60",
                        "R80": "R80",
                        "R200": "R200",
                        "R300": "R300",
                        "R400": "R400",
                        "R700": "R700",
                        "M40_NVME": "M40_NVME",
                        "M50_NVME": "M50_NVME",
                        "M60_NVME": "M60_NVME",
                        "M80_NVME": "M80_NVME",
                        "M200_NVME": "M200_NVME",
                        "M400_NVME": "M400_NVME",
                    }
                
                @schemas.classproperty
                def M10(cls):
                    return cls("M10")
                
                @schemas.classproperty
                def M20(cls):
                    return cls("M20")
                
                @schemas.classproperty
                def M30(cls):
                    return cls("M30")
                
                @schemas.classproperty
                def M40(cls):
                    return cls("M40")
                
                @schemas.classproperty
                def M50(cls):
                    return cls("M50")
                
                @schemas.classproperty
                def M60(cls):
                    return cls("M60")
                
                @schemas.classproperty
                def M80(cls):
                    return cls("M80")
                
                @schemas.classproperty
                def M100(cls):
                    return cls("M100")
                
                @schemas.classproperty
                def M140(cls):
                    return cls("M140")
                
                @schemas.classproperty
                def M200(cls):
                    return cls("M200")
                
                @schemas.classproperty
                def M300(cls):
                    return cls("M300")
                
                @schemas.classproperty
                def R40(cls):
                    return cls("R40")
                
                @schemas.classproperty
                def R50(cls):
                    return cls("R50")
                
                @schemas.classproperty
                def R60(cls):
                    return cls("R60")
                
                @schemas.classproperty
                def R80(cls):
                    return cls("R80")
                
                @schemas.classproperty
                def R200(cls):
                    return cls("R200")
                
                @schemas.classproperty
                def R300(cls):
                    return cls("R300")
                
                @schemas.classproperty
                def R400(cls):
                    return cls("R400")
                
                @schemas.classproperty
                def R700(cls):
                    return cls("R700")
                
                @schemas.classproperty
                def M40_NVME(cls):
                    return cls("M40_NVME")
                
                @schemas.classproperty
                def M50_NVME(cls):
                    return cls("M50_NVME")
                
                @schemas.classproperty
                def M60_NVME(cls):
                    return cls("M60_NVME")
                
                @schemas.classproperty
                def M80_NVME(cls):
                    return cls("M80_NVME")
                
                @schemas.classproperty
                def M200_NVME(cls):
                    return cls("M200_NVME")
                
                @schemas.classproperty
                def M400_NVME(cls):
                    return cls("M400_NVME")
            
            
            class regionName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "US_GOV_WEST_1": "US_GOV_WEST_1",
                        "US_GOV_EAST_1": "US_GOV_EAST_1",
                        "US_EAST_1": "US_EAST_1",
                        "US_EAST_2": "US_EAST_2",
                        "US_WEST_1": "US_WEST_1",
                        "US_WEST_2": "US_WEST_2",
                        "CA_CENTRAL_1": "CA_CENTRAL_1",
                        "EU_NORTH_1": "EU_NORTH_1",
                        "EU_WEST_1": "EU_WEST_1",
                        "EU_WEST_2": "EU_WEST_2",
                        "EU_WEST_3": "EU_WEST_3",
                        "EU_CENTRAL_1": "EU_CENTRAL_1",
                        "AP_EAST_1": "AP_EAST_1",
                        "AP_NORTHEAST_1": "AP_NORTHEAST_1",
                        "AP_NORTHEAST_2": "AP_NORTHEAST_2",
                        "AP_NORTHEAST_3": "AP_NORTHEAST_3",
                        "AP_SOUTHEAST_1": "AP_SOUTHEAST_1",
                        "AP_SOUTHEAST_2": "AP_SOUTHEAST_2",
                        "AP_SOUTHEAST_3": "AP_SOUTHEAST_3",
                        "AP_SOUTH_1": "AP_SOUTH_1",
                        "SA_EAST_1": "SA_EAST_1",
                        "CN_NORTH_1": "CN_NORTH_1",
                        "CN_NORTHWEST_1": "CN_NORTHWEST_1",
                        "ME_SOUTH_1": "ME_SOUTH_1",
                        "AF_SOUTH_1": "AF_SOUTH_1",
                        "EU_SOUTH_1": "EU_SOUTH_1",
                        "GLOBAL": "GLOBAL",
                    }
                
                @schemas.classproperty
                def US_GOV_WEST_1(cls):
                    return cls("US_GOV_WEST_1")
                
                @schemas.classproperty
                def US_GOV_EAST_1(cls):
                    return cls("US_GOV_EAST_1")
                
                @schemas.classproperty
                def US_EAST_1(cls):
                    return cls("US_EAST_1")
                
                @schemas.classproperty
                def US_EAST_2(cls):
                    return cls("US_EAST_2")
                
                @schemas.classproperty
                def US_WEST_1(cls):
                    return cls("US_WEST_1")
                
                @schemas.classproperty
                def US_WEST_2(cls):
                    return cls("US_WEST_2")
                
                @schemas.classproperty
                def CA_CENTRAL_1(cls):
                    return cls("CA_CENTRAL_1")
                
                @schemas.classproperty
                def EU_NORTH_1(cls):
                    return cls("EU_NORTH_1")
                
                @schemas.classproperty
                def EU_WEST_1(cls):
                    return cls("EU_WEST_1")
                
                @schemas.classproperty
                def EU_WEST_2(cls):
                    return cls("EU_WEST_2")
                
                @schemas.classproperty
                def EU_WEST_3(cls):
                    return cls("EU_WEST_3")
                
                @schemas.classproperty
                def EU_CENTRAL_1(cls):
                    return cls("EU_CENTRAL_1")
                
                @schemas.classproperty
                def AP_EAST_1(cls):
                    return cls("AP_EAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_1(cls):
                    return cls("AP_NORTHEAST_1")
                
                @schemas.classproperty
                def AP_NORTHEAST_2(cls):
                    return cls("AP_NORTHEAST_2")
                
                @schemas.classproperty
                def AP_NORTHEAST_3(cls):
                    return cls("AP_NORTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTHEAST_1(cls):
                    return cls("AP_SOUTHEAST_1")
                
                @schemas.classproperty
                def AP_SOUTHEAST_2(cls):
                    return cls("AP_SOUTHEAST_2")
                
                @schemas.classproperty
                def AP_SOUTHEAST_3(cls):
                    return cls("AP_SOUTHEAST_3")
                
                @schemas.classproperty
                def AP_SOUTH_1(cls):
                    return cls("AP_SOUTH_1")
                
                @schemas.classproperty
                def SA_EAST_1(cls):
                    return cls("SA_EAST_1")
                
                @schemas.classproperty
                def CN_NORTH_1(cls):
                    return cls("CN_NORTH_1")
                
                @schemas.classproperty
                def CN_NORTHWEST_1(cls):
                    return cls("CN_NORTHWEST_1")
                
                @schemas.classproperty
                def ME_SOUTH_1(cls):
                    return cls("ME_SOUTH_1")
                
                @schemas.classproperty
                def AF_SOUTH_1(cls):
                    return cls("AF_SOUTH_1")
                
                @schemas.classproperty
                def EU_SOUTH_1(cls):
                    return cls("EU_SOUTH_1")
                
                @schemas.classproperty
                def GLOBAL(cls):
                    return cls("GLOBAL")
            
            
            class volumeType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "STANDARD": "STANDARD",
                        "PROVISIONED": "PROVISIONED",
                    }
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("STANDARD")
                
                @schemas.classproperty
                def PROVISIONED(cls):
                    return cls("PROVISIONED")
            __annotations__ = {
                "providerName": providerName,
                "autoScaling": autoScaling,
                "diskIOPS": diskIOPS,
                "encryptEBSVolume": encryptEBSVolume,
                "instanceSizeName": instanceSizeName,
                "regionName": regionName,
                "volumeType": volumeType,
            }
    
    providerName: MetaOapg.properties.providerName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoScaling"]) -> 'AWSAutoScaling': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diskIOPS"]) -> MetaOapg.properties.diskIOPS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryptEBSVolume"]) -> MetaOapg.properties.encryptEBSVolume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceSizeName"]) -> MetaOapg.properties.instanceSizeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regionName"]) -> MetaOapg.properties.regionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeType"]) -> MetaOapg.properties.volumeType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["providerName", "autoScaling", "diskIOPS", "encryptEBSVolume", "instanceSizeName", "regionName", "volumeType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoScaling"]) -> typing.Union['AWSAutoScaling', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diskIOPS"]) -> typing.Union[MetaOapg.properties.diskIOPS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryptEBSVolume"]) -> typing.Union[MetaOapg.properties.encryptEBSVolume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceSizeName"]) -> typing.Union[MetaOapg.properties.instanceSizeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regionName"]) -> typing.Union[MetaOapg.properties.regionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeType"]) -> typing.Union[MetaOapg.properties.volumeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["providerName", "autoScaling", "diskIOPS", "encryptEBSVolume", "instanceSizeName", "regionName", "volumeType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        providerName: typing.Union[MetaOapg.properties.providerName, str, ],
        autoScaling: typing.Union['AWSAutoScaling', schemas.Unset] = schemas.unset,
        diskIOPS: typing.Union[MetaOapg.properties.diskIOPS, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        encryptEBSVolume: typing.Union[MetaOapg.properties.encryptEBSVolume, bool, schemas.Unset] = schemas.unset,
        instanceSizeName: typing.Union[MetaOapg.properties.instanceSizeName, str, schemas.Unset] = schemas.unset,
        regionName: typing.Union[MetaOapg.properties.regionName, str, schemas.Unset] = schemas.unset,
        volumeType: typing.Union[MetaOapg.properties.volumeType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AWSProviderSettings':
        return super().__new__(
            cls,
            *_args,
            providerName=providerName,
            autoScaling=autoScaling,
            diskIOPS=diskIOPS,
            encryptEBSVolume=encryptEBSVolume,
            instanceSizeName=instanceSizeName,
            regionName=regionName,
            volumeType=volumeType,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.aws_auto_scaling import AWSAutoScaling
