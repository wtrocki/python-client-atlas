# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiPolicyItemView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specifications for one policy.
    """


    class MetaOapg:
        required = {
            "frequencyInterval",
            "frequencyType",
            "retentionUnit",
            "retentionValue",
        }
        
        class properties:
            
            
            class frequencyInterval(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls(9)
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls(10)
                
                @schemas.classproperty
                def POSITIVE_11(cls):
                    return cls(11)
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls(12)
                
                @schemas.classproperty
                def POSITIVE_13(cls):
                    return cls(13)
                
                @schemas.classproperty
                def POSITIVE_14(cls):
                    return cls(14)
                
                @schemas.classproperty
                def POSITIVE_15(cls):
                    return cls(15)
                
                @schemas.classproperty
                def POSITIVE_16(cls):
                    return cls(16)
                
                @schemas.classproperty
                def POSITIVE_17(cls):
                    return cls(17)
                
                @schemas.classproperty
                def POSITIVE_18(cls):
                    return cls(18)
                
                @schemas.classproperty
                def POSITIVE_19(cls):
                    return cls(19)
                
                @schemas.classproperty
                def POSITIVE_20(cls):
                    return cls(20)
                
                @schemas.classproperty
                def POSITIVE_21(cls):
                    return cls(21)
                
                @schemas.classproperty
                def POSITIVE_22(cls):
                    return cls(22)
                
                @schemas.classproperty
                def POSITIVE_23(cls):
                    return cls(23)
                
                @schemas.classproperty
                def POSITIVE_24(cls):
                    return cls(24)
                
                @schemas.classproperty
                def POSITIVE_25(cls):
                    return cls(25)
                
                @schemas.classproperty
                def POSITIVE_26(cls):
                    return cls(26)
                
                @schemas.classproperty
                def POSITIVE_27(cls):
                    return cls(27)
                
                @schemas.classproperty
                def POSITIVE_28(cls):
                    return cls(28)
                
                @schemas.classproperty
                def POSITIVE_40(cls):
                    return cls(40)
            
            
            class frequencyType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("daily")
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("hourly")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("monthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("weekly")
                
                @schemas.classproperty
                def ONDEMAND(cls):
                    return cls("ondemand")
            
            
            class retentionUnit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def WEEKS(cls):
                    return cls("weeks")
                
                @schemas.classproperty
                def MONTHS(cls):
                    return cls("months")
            retentionValue = schemas.Int32Schema
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "frequencyInterval": frequencyInterval,
                "frequencyType": frequencyType,
                "retentionUnit": retentionUnit,
                "retentionValue": retentionValue,
                "id": id,
            }
    
    frequencyInterval: MetaOapg.properties.frequencyInterval
    frequencyType: MetaOapg.properties.frequencyType
    retentionUnit: MetaOapg.properties.retentionUnit
    retentionValue: MetaOapg.properties.retentionValue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyInterval"]) -> MetaOapg.properties.frequencyInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyType"]) -> MetaOapg.properties.frequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retentionUnit"]) -> MetaOapg.properties.retentionUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retentionValue"]) -> MetaOapg.properties.retentionValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["frequencyInterval", "frequencyType", "retentionUnit", "retentionValue", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyInterval"]) -> MetaOapg.properties.frequencyInterval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyType"]) -> MetaOapg.properties.frequencyType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retentionUnit"]) -> MetaOapg.properties.retentionUnit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retentionValue"]) -> MetaOapg.properties.retentionValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["frequencyInterval", "frequencyType", "retentionUnit", "retentionValue", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        frequencyInterval: typing.Union[MetaOapg.properties.frequencyInterval, decimal.Decimal, int, ],
        frequencyType: typing.Union[MetaOapg.properties.frequencyType, str, ],
        retentionUnit: typing.Union[MetaOapg.properties.retentionUnit, str, ],
        retentionValue: typing.Union[MetaOapg.properties.retentionValue, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiPolicyItemView':
        return super().__new__(
            cls,
            *_args,
            frequencyInterval=frequencyInterval,
            frequencyType=frequencyType,
            retentionUnit=retentionUnit,
            retentionValue=retentionValue,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )
