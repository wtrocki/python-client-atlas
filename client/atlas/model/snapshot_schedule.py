# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class SnapshotSchedule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "pointInTimeWindowHours",
            "snapshotRetentionDays",
            "dailySnapshotRetentionDays",
            "clusterCheckpointIntervalMin",
            "groupId",
            "monthlySnapshotRetentionMonths",
            "clusterId",
            "snapshotIntervalHours",
            "weeklySnapshotRetentionWeeks",
        }
        
        class properties:
            
            
            class clusterCheckpointIntervalMin(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        15: "POSITIVE_15",
                        30: "POSITIVE_30",
                        60: "POSITIVE_60",
                    }
                
                @schemas.classproperty
                def POSITIVE_15(cls):
                    return cls(15)
                
                @schemas.classproperty
                def POSITIVE_30(cls):
                    return cls(30)
                
                @schemas.classproperty
                def POSITIVE_60(cls):
                    return cls(60)
            
            
            class clusterId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class dailySnapshotRetentionDays(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                        6: "POSITIVE_6",
                        7: "POSITIVE_7",
                        15: "POSITIVE_15",
                        30: "POSITIVE_30",
                        60: "POSITIVE_60",
                        90: "POSITIVE_90",
                        120: "POSITIVE_120",
                        180: "POSITIVE_180",
                        360: "POSITIVE_360",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
                
                @schemas.classproperty
                def POSITIVE_15(cls):
                    return cls(15)
                
                @schemas.classproperty
                def POSITIVE_30(cls):
                    return cls(30)
                
                @schemas.classproperty
                def POSITIVE_60(cls):
                    return cls(60)
                
                @schemas.classproperty
                def POSITIVE_90(cls):
                    return cls(90)
                
                @schemas.classproperty
                def POSITIVE_120(cls):
                    return cls(120)
                
                @schemas.classproperty
                def POSITIVE_180(cls):
                    return cls(180)
                
                @schemas.classproperty
                def POSITIVE_360(cls):
                    return cls(360)
            
            
            class groupId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 24
                    min_length = 24
                    regex=[{
                        'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
                    }]
            
            
            class monthlySnapshotRetentionMonths(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                        6: "POSITIVE_6",
                        7: "POSITIVE_7",
                        8: "POSITIVE_8",
                        9: "POSITIVE_9",
                        10: "POSITIVE_10",
                        11: "POSITIVE_11",
                        12: "POSITIVE_12",
                        13: "POSITIVE_13",
                        18: "POSITIVE_18",
                        24: "POSITIVE_24",
                        36: "POSITIVE_36",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls(9)
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls(10)
                
                @schemas.classproperty
                def POSITIVE_11(cls):
                    return cls(11)
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls(12)
                
                @schemas.classproperty
                def POSITIVE_13(cls):
                    return cls(13)
                
                @schemas.classproperty
                def POSITIVE_18(cls):
                    return cls(18)
                
                @schemas.classproperty
                def POSITIVE_24(cls):
                    return cls(24)
                
                @schemas.classproperty
                def POSITIVE_36(cls):
                    return cls(36)
            pointInTimeWindowHours = schemas.Int32Schema
            
            
            class snapshotIntervalHours(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        6: "POSITIVE_6",
                        8: "POSITIVE_8",
                        12: "POSITIVE_12",
                        24: "POSITIVE_24",
                    }
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls(12)
                
                @schemas.classproperty
                def POSITIVE_24(cls):
                    return cls(24)
            
            
            class snapshotRetentionDays(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
            
            
            class weeklySnapshotRetentionWeeks(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    enum_value_to_name = {
                        0: "POSITIVE_0",
                        1: "POSITIVE_1",
                        2: "POSITIVE_2",
                        3: "POSITIVE_3",
                        4: "POSITIVE_4",
                        5: "POSITIVE_5",
                        6: "POSITIVE_6",
                        7: "POSITIVE_7",
                        8: "POSITIVE_8",
                        12: "POSITIVE_12",
                        16: "POSITIVE_16",
                        20: "POSITIVE_20",
                        24: "POSITIVE_24",
                        52: "POSITIVE_52",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls(0)
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls(6)
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls(7)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls(12)
                
                @schemas.classproperty
                def POSITIVE_16(cls):
                    return cls(16)
                
                @schemas.classproperty
                def POSITIVE_20(cls):
                    return cls(20)
                
                @schemas.classproperty
                def POSITIVE_24(cls):
                    return cls(24)
                
                @schemas.classproperty
                def POSITIVE_52(cls):
                    return cls(52)
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            __annotations__ = {
                "clusterCheckpointIntervalMin": clusterCheckpointIntervalMin,
                "clusterId": clusterId,
                "dailySnapshotRetentionDays": dailySnapshotRetentionDays,
                "groupId": groupId,
                "monthlySnapshotRetentionMonths": monthlySnapshotRetentionMonths,
                "pointInTimeWindowHours": pointInTimeWindowHours,
                "snapshotIntervalHours": snapshotIntervalHours,
                "snapshotRetentionDays": snapshotRetentionDays,
                "weeklySnapshotRetentionWeeks": weeklySnapshotRetentionWeeks,
                "links": links,
            }
    
    pointInTimeWindowHours: MetaOapg.properties.pointInTimeWindowHours
    snapshotRetentionDays: MetaOapg.properties.snapshotRetentionDays
    dailySnapshotRetentionDays: MetaOapg.properties.dailySnapshotRetentionDays
    clusterCheckpointIntervalMin: MetaOapg.properties.clusterCheckpointIntervalMin
    groupId: MetaOapg.properties.groupId
    monthlySnapshotRetentionMonths: MetaOapg.properties.monthlySnapshotRetentionMonths
    clusterId: MetaOapg.properties.clusterId
    snapshotIntervalHours: MetaOapg.properties.snapshotIntervalHours
    weeklySnapshotRetentionWeeks: MetaOapg.properties.weeklySnapshotRetentionWeeks
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterCheckpointIntervalMin"]) -> MetaOapg.properties.clusterCheckpointIntervalMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterId"]) -> MetaOapg.properties.clusterId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailySnapshotRetentionDays"]) -> MetaOapg.properties.dailySnapshotRetentionDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlySnapshotRetentionMonths"]) -> MetaOapg.properties.monthlySnapshotRetentionMonths: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pointInTimeWindowHours"]) -> MetaOapg.properties.pointInTimeWindowHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotIntervalHours"]) -> MetaOapg.properties.snapshotIntervalHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshotRetentionDays"]) -> MetaOapg.properties.snapshotRetentionDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weeklySnapshotRetentionWeeks"]) -> MetaOapg.properties.weeklySnapshotRetentionWeeks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clusterCheckpointIntervalMin", "clusterId", "dailySnapshotRetentionDays", "groupId", "monthlySnapshotRetentionMonths", "pointInTimeWindowHours", "snapshotIntervalHours", "snapshotRetentionDays", "weeklySnapshotRetentionWeeks", "links", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterCheckpointIntervalMin"]) -> MetaOapg.properties.clusterCheckpointIntervalMin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterId"]) -> MetaOapg.properties.clusterId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailySnapshotRetentionDays"]) -> MetaOapg.properties.dailySnapshotRetentionDays: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlySnapshotRetentionMonths"]) -> MetaOapg.properties.monthlySnapshotRetentionMonths: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pointInTimeWindowHours"]) -> MetaOapg.properties.pointInTimeWindowHours: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotIntervalHours"]) -> MetaOapg.properties.snapshotIntervalHours: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshotRetentionDays"]) -> MetaOapg.properties.snapshotRetentionDays: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weeklySnapshotRetentionWeeks"]) -> MetaOapg.properties.weeklySnapshotRetentionWeeks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clusterCheckpointIntervalMin", "clusterId", "dailySnapshotRetentionDays", "groupId", "monthlySnapshotRetentionMonths", "pointInTimeWindowHours", "snapshotIntervalHours", "snapshotRetentionDays", "weeklySnapshotRetentionWeeks", "links", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pointInTimeWindowHours: typing.Union[MetaOapg.properties.pointInTimeWindowHours, decimal.Decimal, int, ],
        snapshotRetentionDays: typing.Union[MetaOapg.properties.snapshotRetentionDays, decimal.Decimal, int, ],
        dailySnapshotRetentionDays: typing.Union[MetaOapg.properties.dailySnapshotRetentionDays, decimal.Decimal, int, ],
        clusterCheckpointIntervalMin: typing.Union[MetaOapg.properties.clusterCheckpointIntervalMin, decimal.Decimal, int, ],
        groupId: typing.Union[MetaOapg.properties.groupId, str, ],
        monthlySnapshotRetentionMonths: typing.Union[MetaOapg.properties.monthlySnapshotRetentionMonths, decimal.Decimal, int, ],
        clusterId: typing.Union[MetaOapg.properties.clusterId, str, ],
        snapshotIntervalHours: typing.Union[MetaOapg.properties.snapshotIntervalHours, decimal.Decimal, int, ],
        weeklySnapshotRetentionWeeks: typing.Union[MetaOapg.properties.weeklySnapshotRetentionWeeks, decimal.Decimal, int, ],
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SnapshotSchedule':
        return super().__new__(
            cls,
            *_args,
            pointInTimeWindowHours=pointInTimeWindowHours,
            snapshotRetentionDays=snapshotRetentionDays,
            dailySnapshotRetentionDays=dailySnapshotRetentionDays,
            clusterCheckpointIntervalMin=clusterCheckpointIntervalMin,
            groupId=groupId,
            monthlySnapshotRetentionMonths=monthlySnapshotRetentionMonths,
            clusterId=clusterId,
            snapshotIntervalHours=snapshotIntervalHours,
            weeklySnapshotRetentionWeeks=weeklySnapshotRetentionWeeks,
            links=links,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.link import Link
