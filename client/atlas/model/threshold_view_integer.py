# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ThresholdViewInteger(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A Limit that triggers an alert when  exceeded. The resource returns this parameter when **eventTypeName** has not been set to `OUTSIDE_METRIC_THRESHOLD`.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def operator() -> typing.Type['Operator']:
                return Operator
            threshold = schemas.Int32Schema
            
            
            class units(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "bits": "BITS",
                        "Kbits": "KBITS",
                        "Mbits": "MBITS",
                        "Gbits": "GBITS",
                        "bytes": "BYTES",
                        "KB": "KB",
                        "MB": "MB",
                        "GB": "GB",
                        "TB": "TB",
                        "PB": "PB",
                        "nsec": "NSEC",
                        "msec": "MSEC",
                        "sec": "SEC",
                        "min": "MIN",
                        "hours": "HOURS",
                        "million minutes": "MILLION_MINUTES",
                        "days": "DAYS",
                        "requests": "REQUESTS",
                        "1000 requests": "DIGIT_ONE_000_REQUESTS",
                        "GB seconds": "GB_SECONDS",
                        "GB hours": "GB_HOURS",
                        "GB days": "GB_DAYS",
                        "RPU": "RPU",
                        "thousand RPU": "THOUSAND_RPU",
                        "million RPU": "MILLION_RPU",
                        "WPU": "WPU",
                        "thousand WPU": "THOUSAND_WPU",
                        "million WPU": "MILLION_WPU",
                        "count": "COUNT",
                        "thousand": "THOUSAND",
                        "million": "MILLION",
                        "billion": "BILLION",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def BITS(cls):
                    return cls("bits")
                
                @schemas.classproperty
                def KBITS(cls):
                    return cls("Kbits")
                
                @schemas.classproperty
                def MBITS(cls):
                    return cls("Mbits")
                
                @schemas.classproperty
                def GBITS(cls):
                    return cls("Gbits")
                
                @schemas.classproperty
                def BYTES(cls):
                    return cls("bytes")
                
                @schemas.classproperty
                def KB(cls):
                    return cls("KB")
                
                @schemas.classproperty
                def MB(cls):
                    return cls("MB")
                
                @schemas.classproperty
                def GB(cls):
                    return cls("GB")
                
                @schemas.classproperty
                def TB(cls):
                    return cls("TB")
                
                @schemas.classproperty
                def PB(cls):
                    return cls("PB")
                
                @schemas.classproperty
                def NSEC(cls):
                    return cls("nsec")
                
                @schemas.classproperty
                def MSEC(cls):
                    return cls("msec")
                
                @schemas.classproperty
                def SEC(cls):
                    return cls("sec")
                
                @schemas.classproperty
                def MIN(cls):
                    return cls("min")
                
                @schemas.classproperty
                def HOURS(cls):
                    return cls("hours")
                
                @schemas.classproperty
                def MILLION_MINUTES(cls):
                    return cls("million minutes")
                
                @schemas.classproperty
                def DAYS(cls):
                    return cls("days")
                
                @schemas.classproperty
                def REQUESTS(cls):
                    return cls("requests")
                
                @schemas.classproperty
                def DIGIT_ONE_000_REQUESTS(cls):
                    return cls("1000 requests")
                
                @schemas.classproperty
                def GB_SECONDS(cls):
                    return cls("GB seconds")
                
                @schemas.classproperty
                def GB_HOURS(cls):
                    return cls("GB hours")
                
                @schemas.classproperty
                def GB_DAYS(cls):
                    return cls("GB days")
                
                @schemas.classproperty
                def RPU(cls):
                    return cls("RPU")
                
                @schemas.classproperty
                def THOUSAND_RPU(cls):
                    return cls("thousand RPU")
                
                @schemas.classproperty
                def MILLION_RPU(cls):
                    return cls("million RPU")
                
                @schemas.classproperty
                def WPU(cls):
                    return cls("WPU")
                
                @schemas.classproperty
                def THOUSAND_WPU(cls):
                    return cls("thousand WPU")
                
                @schemas.classproperty
                def MILLION_WPU(cls):
                    return cls("million WPU")
                
                @schemas.classproperty
                def COUNT(cls):
                    return cls("count")
                
                @schemas.classproperty
                def THOUSAND(cls):
                    return cls("thousand")
                
                @schemas.classproperty
                def MILLION(cls):
                    return cls("million")
                
                @schemas.classproperty
                def BILLION(cls):
                    return cls("billion")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            __annotations__ = {
                "operator": operator,
                "threshold": threshold,
                "units": units,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operator"]) -> 'Operator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threshold"]) -> MetaOapg.properties.threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["operator", "threshold", "units", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> typing.Union['Operator', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threshold"]) -> typing.Union[MetaOapg.properties.threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operator", "threshold", "units", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        operator: typing.Union['Operator', schemas.Unset] = schemas.unset,
        threshold: typing.Union[MetaOapg.properties.threshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThresholdViewInteger':
        return super().__new__(
            cls,
            *_args,
            operator=operator,
            threshold=threshold,
            units=units,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.operator import Operator
