# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataMetricAlertView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "acknowledgedUntil",
            "created",
            "alertConfigId",
            "eventTypeName",
            "id",
            "updated",
            "status",
        }
        
        class properties:
            acknowledgedUntil = schemas.DateTimeSchema
            
            
            class alertConfigId(
                schemas.StrSchema
            ):
                pass
            created = schemas.DateTimeSchema
        
            @staticmethod
            def eventTypeName() -> typing.Type['HostMetricEventTypeViewAlertable']:
                return HostMetricEventTypeViewAlertable
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
                
                @schemas.classproperty
                def CLOSED(cls):
                    return cls("CLOSED")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("OPEN")
                
                @schemas.classproperty
                def TRACKING(cls):
                    return cls("TRACKING")
            updated = schemas.DateTimeSchema
            
            
            class acknowledgementComment(
                schemas.StrSchema
            ):
                pass
            acknowledgingUsername = schemas.StrSchema
            
            
            class clusterName(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def currentValue() -> typing.Type['DataMetricValueView']:
                return DataMetricValueView
            
            
            class groupId(
                schemas.StrSchema
            ):
                pass
            hostnameAndPort = schemas.StrSchema
            lastNotified = schemas.DateTimeSchema
            
            
            class links(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'links':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            metricName = schemas.StrSchema
            
            
            class orgId(
                schemas.StrSchema
            ):
                pass
            replicaSetName = schemas.StrSchema
            resolved = schemas.DateTimeSchema
            __annotations__ = {
                "acknowledgedUntil": acknowledgedUntil,
                "alertConfigId": alertConfigId,
                "created": created,
                "eventTypeName": eventTypeName,
                "id": id,
                "status": status,
                "updated": updated,
                "acknowledgementComment": acknowledgementComment,
                "acknowledgingUsername": acknowledgingUsername,
                "clusterName": clusterName,
                "currentValue": currentValue,
                "groupId": groupId,
                "hostnameAndPort": hostnameAndPort,
                "lastNotified": lastNotified,
                "links": links,
                "metricName": metricName,
                "orgId": orgId,
                "replicaSetName": replicaSetName,
                "resolved": resolved,
            }
    
    acknowledgedUntil: MetaOapg.properties.acknowledgedUntil
    created: MetaOapg.properties.created
    alertConfigId: MetaOapg.properties.alertConfigId
    eventTypeName: 'HostMetricEventTypeViewAlertable'
    id: MetaOapg.properties.id
    updated: MetaOapg.properties.updated
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgedUntil"]) -> MetaOapg.properties.acknowledgedUntil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTypeName"]) -> 'HostMetricEventTypeViewAlertable': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgementComment"]) -> MetaOapg.properties.acknowledgementComment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acknowledgingUsername"]) -> MetaOapg.properties.acknowledgingUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterName"]) -> MetaOapg.properties.clusterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentValue"]) -> 'DataMetricValueView': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostnameAndPort"]) -> MetaOapg.properties.hostnameAndPort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastNotified"]) -> MetaOapg.properties.lastNotified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> MetaOapg.properties.links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricName"]) -> MetaOapg.properties.metricName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgId"]) -> MetaOapg.properties.orgId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicaSetName"]) -> MetaOapg.properties.replicaSetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolved"]) -> MetaOapg.properties.resolved: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acknowledgedUntil", "alertConfigId", "created", "eventTypeName", "id", "status", "updated", "acknowledgementComment", "acknowledgingUsername", "clusterName", "currentValue", "groupId", "hostnameAndPort", "lastNotified", "links", "metricName", "orgId", "replicaSetName", "resolved", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgedUntil"]) -> MetaOapg.properties.acknowledgedUntil: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertConfigId"]) -> MetaOapg.properties.alertConfigId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTypeName"]) -> 'HostMetricEventTypeViewAlertable': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgementComment"]) -> typing.Union[MetaOapg.properties.acknowledgementComment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acknowledgingUsername"]) -> typing.Union[MetaOapg.properties.acknowledgingUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterName"]) -> typing.Union[MetaOapg.properties.clusterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentValue"]) -> typing.Union['DataMetricValueView', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostnameAndPort"]) -> typing.Union[MetaOapg.properties.hostnameAndPort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastNotified"]) -> typing.Union[MetaOapg.properties.lastNotified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> typing.Union[MetaOapg.properties.links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricName"]) -> typing.Union[MetaOapg.properties.metricName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgId"]) -> typing.Union[MetaOapg.properties.orgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicaSetName"]) -> typing.Union[MetaOapg.properties.replicaSetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolved"]) -> typing.Union[MetaOapg.properties.resolved, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acknowledgedUntil", "alertConfigId", "created", "eventTypeName", "id", "status", "updated", "acknowledgementComment", "acknowledgingUsername", "clusterName", "currentValue", "groupId", "hostnameAndPort", "lastNotified", "links", "metricName", "orgId", "replicaSetName", "resolved", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        acknowledgedUntil: typing.Union[MetaOapg.properties.acknowledgedUntil, str, datetime, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        alertConfigId: typing.Union[MetaOapg.properties.alertConfigId, str, ],
        eventTypeName: 'HostMetricEventTypeViewAlertable',
        id: typing.Union[MetaOapg.properties.id, str, ],
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        acknowledgementComment: typing.Union[MetaOapg.properties.acknowledgementComment, str, schemas.Unset] = schemas.unset,
        acknowledgingUsername: typing.Union[MetaOapg.properties.acknowledgingUsername, str, schemas.Unset] = schemas.unset,
        clusterName: typing.Union[MetaOapg.properties.clusterName, str, schemas.Unset] = schemas.unset,
        currentValue: typing.Union['DataMetricValueView', schemas.Unset] = schemas.unset,
        groupId: typing.Union[MetaOapg.properties.groupId, str, schemas.Unset] = schemas.unset,
        hostnameAndPort: typing.Union[MetaOapg.properties.hostnameAndPort, str, schemas.Unset] = schemas.unset,
        lastNotified: typing.Union[MetaOapg.properties.lastNotified, str, datetime, schemas.Unset] = schemas.unset,
        links: typing.Union[MetaOapg.properties.links, list, tuple, schemas.Unset] = schemas.unset,
        metricName: typing.Union[MetaOapg.properties.metricName, str, schemas.Unset] = schemas.unset,
        orgId: typing.Union[MetaOapg.properties.orgId, str, schemas.Unset] = schemas.unset,
        replicaSetName: typing.Union[MetaOapg.properties.replicaSetName, str, schemas.Unset] = schemas.unset,
        resolved: typing.Union[MetaOapg.properties.resolved, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataMetricAlertView':
        return super().__new__(
            cls,
            *_args,
            acknowledgedUntil=acknowledgedUntil,
            created=created,
            alertConfigId=alertConfigId,
            eventTypeName=eventTypeName,
            id=id,
            updated=updated,
            status=status,
            acknowledgementComment=acknowledgementComment,
            acknowledgingUsername=acknowledgingUsername,
            clusterName=clusterName,
            currentValue=currentValue,
            groupId=groupId,
            hostnameAndPort=hostnameAndPort,
            lastNotified=lastNotified,
            links=links,
            metricName=metricName,
            orgId=orgId,
            replicaSetName=replicaSetName,
            resolved=resolved,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.data_metric_value_view import DataMetricValueView
from atlas.model.host_metric_event_type_view_alertable import HostMetricEventTypeViewAlertable
from atlas.model.link import Link
