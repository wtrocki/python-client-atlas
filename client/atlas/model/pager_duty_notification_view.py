# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class PagerDutyNotificationView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PagerDuty notification configuration for MongoDB Cloud to send information when an event triggers an alert condition.
    """


    class MetaOapg:
        required = {
            "typeName",
        }
        
        class properties:
            
            
            class typeName(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PAGER_DUTY": "PAGER_DUTY",
                    }
                
                @schemas.classproperty
                def PAGER_DUTY(cls):
                    return cls("PAGER_DUTY")
            delayMin = schemas.Int32Schema
            
            
            class intervalMin(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 5
            
            
            class region(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "US": "US",
                        "EU": "EU",
                    }
                
                @schemas.classproperty
                def US(cls):
                    return cls("US")
                
                @schemas.classproperty
                def EU(cls):
                    return cls("EU")
            serviceKey = schemas.StrSchema
            __annotations__ = {
                "typeName": typeName,
                "delayMin": delayMin,
                "intervalMin": intervalMin,
                "region": region,
                "serviceKey": serviceKey,
            }
    
    typeName: MetaOapg.properties.typeName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeName"]) -> MetaOapg.properties.typeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delayMin"]) -> MetaOapg.properties.delayMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["intervalMin"]) -> MetaOapg.properties.intervalMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceKey"]) -> MetaOapg.properties.serviceKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeName", "delayMin", "intervalMin", "region", "serviceKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeName"]) -> MetaOapg.properties.typeName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delayMin"]) -> typing.Union[MetaOapg.properties.delayMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["intervalMin"]) -> typing.Union[MetaOapg.properties.intervalMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceKey"]) -> typing.Union[MetaOapg.properties.serviceKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeName", "delayMin", "intervalMin", "region", "serviceKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        typeName: typing.Union[MetaOapg.properties.typeName, str, ],
        delayMin: typing.Union[MetaOapg.properties.delayMin, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        intervalMin: typing.Union[MetaOapg.properties.intervalMin, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        serviceKey: typing.Union[MetaOapg.properties.serviceKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PagerDutyNotificationView':
        return super().__new__(
            cls,
            *_args,
            typeName=typeName,
            delayMin=delayMin,
            intervalMin=intervalMin,
            region=region,
            serviceKey=serviceKey,
            _configuration=_configuration,
            **kwargs,
        )
