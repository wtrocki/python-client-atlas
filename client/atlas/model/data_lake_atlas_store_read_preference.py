# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DataLakeAtlasStoreReadPreference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    MongoDB Cloud cluster read preference, which describes how to route read requests to the cluster.
    """


    class MetaOapg:
        
        class properties:
            maxStalenessSeconds = schemas.Int32Schema
            
            
            class mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "primary": "PRIMARY",
                        "primaryPreferred": "PRIMARY_PREFERRED",
                        "secondary": "SECONDARY",
                        "secondaryPreferred": "SECONDARY_PREFERRED",
                        "nearest": "NEAREST",
                    }
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("primary")
                
                @schemas.classproperty
                def PRIMARY_PREFERRED(cls):
                    return cls("primaryPreferred")
                
                @schemas.classproperty
                def SECONDARY(cls):
                    return cls("secondary")
                
                @schemas.classproperty
                def SECONDARY_PREFERRED(cls):
                    return cls("secondaryPreferred")
                
                @schemas.classproperty
                def NEAREST(cls):
                    return cls("nearest")
            
            
            class tagSets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['DataLakeAtlasStoreReadPreferenceTag']:
                                return DataLakeAtlasStoreReadPreferenceTag
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['DataLakeAtlasStoreReadPreferenceTag'], typing.List['DataLakeAtlasStoreReadPreferenceTag']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'DataLakeAtlasStoreReadPreferenceTag':
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tagSets':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "maxStalenessSeconds": maxStalenessSeconds,
                "mode": mode,
                "tagSets": tagSets,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxStalenessSeconds"]) -> MetaOapg.properties.maxStalenessSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagSets"]) -> MetaOapg.properties.tagSets: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maxStalenessSeconds", "mode", "tagSets", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxStalenessSeconds"]) -> typing.Union[MetaOapg.properties.maxStalenessSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagSets"]) -> typing.Union[MetaOapg.properties.tagSets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maxStalenessSeconds", "mode", "tagSets", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        maxStalenessSeconds: typing.Union[MetaOapg.properties.maxStalenessSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mode: typing.Union[MetaOapg.properties.mode, str, schemas.Unset] = schemas.unset,
        tagSets: typing.Union[MetaOapg.properties.tagSets, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataLakeAtlasStoreReadPreference':
        return super().__new__(
            cls,
            *_args,
            maxStalenessSeconds=maxStalenessSeconds,
            mode=mode,
            tagSets=tagSets,
            _configuration=_configuration,
            **kwargs,
        )

from atlas.model.data_lake_atlas_store_read_preference_tag import DataLakeAtlasStoreReadPreferenceTag
