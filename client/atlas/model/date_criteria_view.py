# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class DateCriteriaView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    **DATE criteria.type**.
    """


    class MetaOapg:
        
        class properties:
            dateField = schemas.StrSchema
            
            
            class dateFormat(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ISODATE": "ISODATE",
                        "EPOCH_SECONDS": "EPOCH_SECONDS",
                        "EPOCH_MILLIS": "EPOCH_MILLIS",
                        "EPOCH_NANOSECONDS": "EPOCH_NANOSECONDS",
                    }
                
                @schemas.classproperty
                def ISODATE(cls):
                    return cls("ISODATE")
                
                @schemas.classproperty
                def EPOCH_SECONDS(cls):
                    return cls("EPOCH_SECONDS")
                
                @schemas.classproperty
                def EPOCH_MILLIS(cls):
                    return cls("EPOCH_MILLIS")
                
                @schemas.classproperty
                def EPOCH_NANOSECONDS(cls):
                    return cls("EPOCH_NANOSECONDS")
            expireAfterDays = schemas.Int32Schema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "DATE": "DATE",
                        "CUSTOM": "CUSTOM",
                    }
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
            __annotations__ = {
                "dateField": dateField,
                "dateFormat": dateFormat,
                "expireAfterDays": expireAfterDays,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateField"]) -> MetaOapg.properties.dateField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateFormat"]) -> MetaOapg.properties.dateFormat: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireAfterDays"]) -> MetaOapg.properties.expireAfterDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateField", "dateFormat", "expireAfterDays", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateField"]) -> typing.Union[MetaOapg.properties.dateField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateFormat"]) -> typing.Union[MetaOapg.properties.dateFormat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireAfterDays"]) -> typing.Union[MetaOapg.properties.expireAfterDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateField", "dateFormat", "expireAfterDays", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dateField: typing.Union[MetaOapg.properties.dateField, str, schemas.Unset] = schemas.unset,
        dateFormat: typing.Union[MetaOapg.properties.dateFormat, str, schemas.Unset] = schemas.unset,
        expireAfterDays: typing.Union[MetaOapg.properties.expireAfterDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DateCriteriaView':
        return super().__new__(
            cls,
            *_args,
            dateField=dateField,
            dateFormat=dateFormat,
            expireAfterDays=expireAfterDays,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
