# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class ApiPrometheusView(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details to integrate one Prometheus account with one MongoDB Cloud project.
    """


    class MetaOapg:
        required = {
            "scheme",
            "serviceDiscovery",
            "enabled",
            "username",
        }
        
        class properties:
            enabled = schemas.BoolSchema
            
            
            class scheme(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "http": "HTTP",
                        "https": "HTTPS",
                    }
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("http")
                
                @schemas.classproperty
                def HTTPS(cls):
                    return cls("https")
            
            
            class serviceDiscovery(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "http": "HTTP",
                        "file": "FILE",
                    }
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("http")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("file")
            username = schemas.StrSchema
            listenAddress = schemas.StrSchema
            password = schemas.StrSchema
            rateLimitInterval = schemas.Int32Schema
            tlsPemPath = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PROMETHEUS": "PROMETHEUS",
                    }
                
                @schemas.classproperty
                def PROMETHEUS(cls):
                    return cls("PROMETHEUS")
            __annotations__ = {
                "enabled": enabled,
                "scheme": scheme,
                "serviceDiscovery": serviceDiscovery,
                "username": username,
                "listenAddress": listenAddress,
                "password": password,
                "rateLimitInterval": rateLimitInterval,
                "tlsPemPath": tlsPemPath,
                "type": type,
            }
    
    scheme: MetaOapg.properties.scheme
    serviceDiscovery: MetaOapg.properties.serviceDiscovery
    enabled: MetaOapg.properties.enabled
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheme"]) -> MetaOapg.properties.scheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceDiscovery"]) -> MetaOapg.properties.serviceDiscovery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listenAddress"]) -> MetaOapg.properties.listenAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateLimitInterval"]) -> MetaOapg.properties.rateLimitInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tlsPemPath"]) -> MetaOapg.properties.tlsPemPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "scheme", "serviceDiscovery", "username", "listenAddress", "password", "rateLimitInterval", "tlsPemPath", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheme"]) -> MetaOapg.properties.scheme: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceDiscovery"]) -> MetaOapg.properties.serviceDiscovery: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listenAddress"]) -> typing.Union[MetaOapg.properties.listenAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateLimitInterval"]) -> typing.Union[MetaOapg.properties.rateLimitInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tlsPemPath"]) -> typing.Union[MetaOapg.properties.tlsPemPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "scheme", "serviceDiscovery", "username", "listenAddress", "password", "rateLimitInterval", "tlsPemPath", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        scheme: typing.Union[MetaOapg.properties.scheme, str, ],
        serviceDiscovery: typing.Union[MetaOapg.properties.serviceDiscovery, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        listenAddress: typing.Union[MetaOapg.properties.listenAddress, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        rateLimitInterval: typing.Union[MetaOapg.properties.rateLimitInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tlsPemPath: typing.Union[MetaOapg.properties.tlsPemPath, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiPrometheusView':
        return super().__new__(
            cls,
            *_args,
            scheme=scheme,
            serviceDiscovery=serviceDiscovery,
            enabled=enabled,
            username=username,
            listenAddress=listenAddress,
            password=password,
            rateLimitInterval=rateLimitInterval,
            tlsPemPath=tlsPemPath,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
