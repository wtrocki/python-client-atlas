# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401


class CloudProviderAccessEncryptionAtRestFeatureUsage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details that describe the Key Management Service (KMS) linked to this Amazon Web Services (AWS) Identity and Access Management (IAM) role.
    """


    class MetaOapg:
        
        class properties:
            
            
            class featureId(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'featureId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class featureType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ATLAS_DATA_LAKE(cls):
                    return cls("ATLAS_DATA_LAKE")
                
                @schemas.classproperty
                def ENCRYPTION_AT_REST(cls):
                    return cls("ENCRYPTION_AT_REST")
                
                @schemas.classproperty
                def EXPORT_SNAPSHOT(cls):
                    return cls("EXPORT_SNAPSHOT")
            __annotations__ = {
                "featureId": featureId,
                "featureType": featureType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureId"]) -> MetaOapg.properties.featureId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureType"]) -> MetaOapg.properties.featureType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["featureId", "featureType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureId"]) -> typing.Union[MetaOapg.properties.featureId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureType"]) -> typing.Union[MetaOapg.properties.featureType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["featureId", "featureType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        featureId: typing.Union[MetaOapg.properties.featureId, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        featureType: typing.Union[MetaOapg.properties.featureType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CloudProviderAccessEncryptionAtRestFeatureUsage':
        return super().__new__(
            cls,
            *_args,
            featureId=featureId,
            featureType=featureType,
            _configuration=_configuration,
            **kwargs,
        )
