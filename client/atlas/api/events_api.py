# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, conint, constr, validator

from typing import List, Optional

from atlas.models.event_type_for_nds_group import EventTypeForNdsGroup
from atlas.models.event_type_for_org import EventTypeForOrg
from atlas.models.event_view_for_nds_group import EventViewForNdsGroup
from atlas.models.event_view_for_org import EventViewForOrg
from atlas.models.group_paginated_event_view import GroupPaginatedEventView
from atlas.models.org_paginated_event_view import OrgPaginatedEventView

from atlas.api_client import ApiClient
from atlas.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EventsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_organization_event(self, org_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")], event_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listOrganizationEvents) endpoint to retrieve all events to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, **kwargs) -> EventViewForOrg:  # noqa: E501
        """Return One Event from One Organization  # noqa: E501

        Returns one event for the specified organization. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Organization Member role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-orgs-get-one/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_event(org_id, event_id, envelope, pretty, include_raw, async_req=True)
        >>> result = thread.get()

        :param org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access. (required)
        :type org_id: str
        :param event_id: Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listOrganizationEvents) endpoint to retrieve all events to which the authenticated user has access. (required)
        :type event_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventViewForOrg
        """
        kwargs['_return_http_data_only'] = True
        return self.get_organization_event_with_http_info(org_id, event_id, envelope, pretty, include_raw, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organization_event_with_http_info(self, org_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")], event_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listOrganizationEvents) endpoint to retrieve all events to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, **kwargs):  # noqa: E501
        """Return One Event from One Organization  # noqa: E501

        Returns one event for the specified organization. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Organization Member role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-orgs-get-one/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_event_with_http_info(org_id, event_id, envelope, pretty, include_raw, async_req=True)
        >>> result = thread.get()

        :param org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access. (required)
        :type org_id: str
        :param event_id: Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listOrganizationEvents) endpoint to retrieve all events to which the authenticated user has access. (required)
        :type event_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventViewForOrg, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'event_id',
            'envelope',
            'pretty',
            'include_raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_event" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']
        if _params['event_id']:
            _path_params['eventId'] = _params['event_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('include_raw') is not None:  # noqa: E501
            _query_params.append(('includeRaw', _params['include_raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "EventViewForOrg",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/orgs/{orgId}/events/{eventId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_project_event(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], event_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listProjectEvents) endpoint to retrieve all events to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, **kwargs) -> EventViewForNdsGroup:  # noqa: E501
        """Return One Event from One Project  # noqa: E501

        Returns one event for the specified project. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-projects-get-one/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_event(group_id, event_id, envelope, pretty, include_raw, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param event_id: Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listProjectEvents) endpoint to retrieve all events to which the authenticated user has access. (required)
        :type event_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EventViewForNdsGroup
        """
        kwargs['_return_http_data_only'] = True
        return self.get_project_event_with_http_info(group_id, event_id, envelope, pretty, include_raw, **kwargs)  # noqa: E501

    @validate_arguments
    def get_project_event_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], event_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listProjectEvents) endpoint to retrieve all events to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, **kwargs):  # noqa: E501
        """Return One Event from One Project  # noqa: E501

        Returns one event for the specified project. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-projects-get-one/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_event_with_http_info(group_id, event_id, envelope, pretty, include_raw, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param event_id: Unique 24-hexadecimal digit string that identifies the event that you want to return. Use the [/events](#tag/Events/operation/listProjectEvents) endpoint to retrieve all events to which the authenticated user has access. (required)
        :type event_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EventViewForNdsGroup, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'event_id',
            'envelope',
            'pretty',
            'include_raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_event" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['event_id']:
            _path_params['eventId'] = _params['event_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('include_raw') is not None:  # noqa: E501
            _query_params.append(('includeRaw', _params['include_raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "EventViewForNdsGroup",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/events/{eventId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_organization_events(self, org_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, event_type : Annotated[Optional[EventTypeForOrg], Field(description="Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, max_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, min_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, **kwargs) -> OrgPaginatedEventView:  # noqa: E501
        """Return All Events from One Organization  # noqa: E501

        Returns all events for the specified organization. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Organization Member role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-orgs-get-all/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_organization_events(org_id, envelope, include_count, items_per_page, page_num, pretty, event_type, include_raw, max_date, min_date, async_req=True)
        >>> result = thread.get()

        :param org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access. (required)
        :type org_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param event_type: Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.
        :type event_type: EventTypeForOrg
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param max_date: Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type max_date: datetime
        :param min_date: Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type min_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OrgPaginatedEventView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_organization_events_with_http_info(org_id, envelope, include_count, items_per_page, page_num, pretty, event_type, include_raw, max_date, min_date, **kwargs)  # noqa: E501

    @validate_arguments
    def list_organization_events_with_http_info(self, org_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, event_type : Annotated[Optional[EventTypeForOrg], Field(description="Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, max_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, min_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, **kwargs):  # noqa: E501
        """Return All Events from One Organization  # noqa: E501

        Returns all events for the specified organization. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Organization Member role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-orgs-get-all/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_organization_events_with_http_info(org_id, envelope, include_count, items_per_page, page_num, pretty, event_type, include_raw, max_date, min_date, async_req=True)
        >>> result = thread.get()

        :param org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access. (required)
        :type org_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param event_type: Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.
        :type event_type: EventTypeForOrg
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param max_date: Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type max_date: datetime
        :param min_date: Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type min_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OrgPaginatedEventView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_id',
            'envelope',
            'include_count',
            'items_per_page',
            'page_num',
            'pretty',
            'event_type',
            'include_raw',
            'max_date',
            'min_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_organization_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_id']:
            _path_params['orgId'] = _params['org_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
        if _params.get('include_raw') is not None:  # noqa: E501
            _query_params.append(('includeRaw', _params['include_raw']))
        if _params.get('max_date') is not None:  # noqa: E501
            _query_params.append(('maxDate', _params['max_date']))
        if _params.get('min_date') is not None:  # noqa: E501
            _query_params.append(('minDate', _params['min_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "OrgPaginatedEventView",
            '400': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/orgs/{orgId}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_project_events(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, cluster_names : Annotated[Optional[List[constr(strict=True, max_length=64, min_length=1)]], Field(description="Human-readable label that identifies the cluster.")] = None, event_type : Annotated[Optional[EventTypeForNdsGroup], Field(description="Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, max_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, min_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, **kwargs) -> GroupPaginatedEventView:  # noqa: E501
        """Return All Events from One Project  # noqa: E501

        Returns one event for the specified project. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-projects-get-all/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_events(group_id, envelope, include_count, items_per_page, page_num, pretty, cluster_names, event_type, include_raw, max_date, min_date, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param cluster_names: Human-readable label that identifies the cluster.
        :type cluster_names: List[str]
        :param event_type: Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.
        :type event_type: EventTypeForNdsGroup
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param max_date: Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type max_date: datetime
        :param min_date: Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type min_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GroupPaginatedEventView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_project_events_with_http_info(group_id, envelope, include_count, items_per_page, page_num, pretty, cluster_names, event_type, include_raw, max_date, min_date, **kwargs)  # noqa: E501

    @validate_arguments
    def list_project_events_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, cluster_names : Annotated[Optional[List[constr(strict=True, max_length=64, min_length=1)]], Field(description="Human-readable label that identifies the cluster.")] = None, event_type : Annotated[Optional[EventTypeForNdsGroup], Field(description="Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.")] = None, include_raw : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.")] = None, max_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, min_date : Annotated[Optional[datetime], Field(description="Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.")] = None, **kwargs):  # noqa: E501
        """Return All Events from One Project  # noqa: E501

        Returns one event for the specified project. Events identify significant database, billing, or security activities or status changes. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.   This resource remains under revision and may change. Refer to the [legacy documentation for this resource](https://www.mongodb.com/docs/atlas/reference/api/events-projects-get-all/).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_events_with_http_info(group_id, envelope, include_count, items_per_page, page_num, pretty, cluster_names, event_type, include_raw, max_date, min_date, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param cluster_names: Human-readable label that identifies the cluster.
        :type cluster_names: List[str]
        :param event_type: Category of incident recorded at this moment in time.  **IMPORTANT**: The complete list of event type values changes frequently.
        :type event_type: EventTypeForNdsGroup
        :param include_raw: Flag that indicates whether to include the raw document in the output. The raw document contains additional meta information about the event.
        :type include_raw: bool
        :param max_date: Date and time from when MongoDB Cloud stops returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type max_date: datetime
        :param min_date: Date and time from when MongoDB Cloud starts returning events. This parameter uses the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
        :type min_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GroupPaginatedEventView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'envelope',
            'include_count',
            'items_per_page',
            'page_num',
            'pretty',
            'cluster_names',
            'event_type',
            'include_raw',
            'max_date',
            'min_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_project_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('cluster_names') is not None:  # noqa: E501
            _query_params.append(('clusterNames', _params['cluster_names']))
            _collection_formats['clusterNames'] = 'multi'
        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type']))
        if _params.get('include_raw') is not None:  # noqa: E501
            _query_params.append(('includeRaw', _params['include_raw']))
        if _params.get('max_date') is not None:  # noqa: E501
            _query_params.append(('maxDate', _params['max_date']))
        if _params.get('min_date') is not None:  # noqa: E501
            _query_params.append(('minDate', _params['min_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GroupPaginatedEventView",
            '400': "ApiError",
            '401': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
