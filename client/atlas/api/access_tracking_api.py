# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr, conint, constr, validator

from typing import Optional

from atlas.models.api_mongo_db_access_logs_list_view import ApiMongoDBAccessLogsListView

from atlas.api_client import ApiClient
from atlas.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AccessTrackingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def list_access_logs_by_cluster_name(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, auth_result : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the successful authentication attempts only.")] = None, end : Annotated[Optional[StrictStr], Field(description="Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, ip_address : Annotated[Optional[constr(strict=True)], Field(description="One Internet Protocol address that attempted to authenticate with the database.")] = None, n_logs : Annotated[Optional[conint(strict=True, le=20000, ge=0)], Field(description="Maximum number of lines from the log to return.")] = None, start : Annotated[Optional[datetime], Field(description="Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, **kwargs) -> ApiMongoDBAccessLogsListView:  # noqa: E501
        """Return Database Access History for One Cluster using Its Cluster Name  # noqa: E501

        Returns the access logs of one cluster identified by the cluster's name. Access logs contain a list of authentication requests made against your cluster. You can't use this feature on tenant-tier clusters (M0, M2, M5). To use this resource, the requesting API Key must have the Project Monitoring Admin role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_access_logs_by_cluster_name(group_id, cluster_name, envelope, pretty, auth_result, end, ip_address, n_logs, start, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param auth_result: Flag that indicates whether the response returns the successful authentication attempts only.
        :type auth_result: bool
        :param end: Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type end: str
        :param ip_address: One Internet Protocol address that attempted to authenticate with the database.
        :type ip_address: str
        :param n_logs: Maximum number of lines from the log to return.
        :type n_logs: int
        :param start: Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type start: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiMongoDBAccessLogsListView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_access_logs_by_cluster_name_with_http_info(group_id, cluster_name, envelope, pretty, auth_result, end, ip_address, n_logs, start, **kwargs)  # noqa: E501

    @validate_arguments
    def list_access_logs_by_cluster_name_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, auth_result : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the successful authentication attempts only.")] = None, end : Annotated[Optional[StrictStr], Field(description="Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, ip_address : Annotated[Optional[constr(strict=True)], Field(description="One Internet Protocol address that attempted to authenticate with the database.")] = None, n_logs : Annotated[Optional[conint(strict=True, le=20000, ge=0)], Field(description="Maximum number of lines from the log to return.")] = None, start : Annotated[Optional[datetime], Field(description="Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, **kwargs):  # noqa: E501
        """Return Database Access History for One Cluster using Its Cluster Name  # noqa: E501

        Returns the access logs of one cluster identified by the cluster's name. Access logs contain a list of authentication requests made against your cluster. You can't use this feature on tenant-tier clusters (M0, M2, M5). To use this resource, the requesting API Key must have the Project Monitoring Admin role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_access_logs_by_cluster_name_with_http_info(group_id, cluster_name, envelope, pretty, auth_result, end, ip_address, n_logs, start, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param auth_result: Flag that indicates whether the response returns the successful authentication attempts only.
        :type auth_result: bool
        :param end: Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type end: str
        :param ip_address: One Internet Protocol address that attempted to authenticate with the database.
        :type ip_address: str
        :param n_logs: Maximum number of lines from the log to return.
        :type n_logs: int
        :param start: Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type start: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiMongoDBAccessLogsListView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty',
            'auth_result',
            'end',
            'ip_address',
            'n_logs',
            'start'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_access_logs_by_cluster_name" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('auth_result') is not None:  # noqa: E501
            _query_params.append(('authResult', _params['auth_result']))
        if _params.get('end') is not None:  # noqa: E501
            _query_params.append(('end', _params['end']))
        if _params.get('ip_address') is not None:  # noqa: E501
            _query_params.append(('ipAddress', _params['ip_address']))
        if _params.get('n_logs') is not None:  # noqa: E501
            _query_params.append(('nLogs', _params['n_logs']))
        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ApiMongoDBAccessLogsListView",
            '400': "ApiError",
            '401': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/dbAccessHistory/clusters/{clusterName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_access_logs_by_hostname(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], hostname : Annotated[StrictStr, Field(..., description="Fully qualified domain name or IP address of the MongoDB host that stores the log files that you want to download.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, auth_result : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the successful authentication attempts only.")] = None, end : Annotated[Optional[datetime], Field(description="Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, ip_address : Annotated[Optional[constr(strict=True)], Field(description="One Internet Protocol address that attempted to authenticate with the database.")] = None, n_logs : Annotated[Optional[conint(strict=True, le=20000, ge=0)], Field(description="Maximum number of lines from the log to return.")] = None, start : Annotated[Optional[datetime], Field(description="Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, **kwargs) -> ApiMongoDBAccessLogsListView:  # noqa: E501
        """Return Database Access History for One Cluster using Its Hostname  # noqa: E501

        Returns the access logs of one cluster identified by the cluster's hostname. Access logs contain a list of authentication requests made against your clusters. You can't use this feature on tenant-tier clusters (M0, M2, M5). To use this resource, the requesting API Key must have the Project Monitoring Admin role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_access_logs_by_hostname(group_id, hostname, envelope, pretty, auth_result, end, ip_address, n_logs, start, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param hostname: Fully qualified domain name or IP address of the MongoDB host that stores the log files that you want to download. (required)
        :type hostname: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param auth_result: Flag that indicates whether the response returns the successful authentication attempts only.
        :type auth_result: bool
        :param end: Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type end: datetime
        :param ip_address: One Internet Protocol address that attempted to authenticate with the database.
        :type ip_address: str
        :param n_logs: Maximum number of lines from the log to return.
        :type n_logs: int
        :param start: Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type start: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiMongoDBAccessLogsListView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_access_logs_by_hostname_with_http_info(group_id, hostname, envelope, pretty, auth_result, end, ip_address, n_logs, start, **kwargs)  # noqa: E501

    @validate_arguments
    def list_access_logs_by_hostname_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], hostname : Annotated[StrictStr, Field(..., description="Fully qualified domain name or IP address of the MongoDB host that stores the log files that you want to download.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, auth_result : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the successful authentication attempts only.")] = None, end : Annotated[Optional[datetime], Field(description="Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, ip_address : Annotated[Optional[constr(strict=True)], Field(description="One Internet Protocol address that attempted to authenticate with the database.")] = None, n_logs : Annotated[Optional[conint(strict=True, le=20000, ge=0)], Field(description="Maximum number of lines from the log to return.")] = None, start : Annotated[Optional[datetime], Field(description="Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.")] = None, **kwargs):  # noqa: E501
        """Return Database Access History for One Cluster using Its Hostname  # noqa: E501

        Returns the access logs of one cluster identified by the cluster's hostname. Access logs contain a list of authentication requests made against your clusters. You can't use this feature on tenant-tier clusters (M0, M2, M5). To use this resource, the requesting API Key must have the Project Monitoring Admin role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_access_logs_by_hostname_with_http_info(group_id, hostname, envelope, pretty, auth_result, end, ip_address, n_logs, start, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param hostname: Fully qualified domain name or IP address of the MongoDB host that stores the log files that you want to download. (required)
        :type hostname: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param auth_result: Flag that indicates whether the response returns the successful authentication attempts only.
        :type auth_result: bool
        :param end: Date and time when to stop retrieving database history. If you specify **end**, you must also specify **start**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type end: datetime
        :param ip_address: One Internet Protocol address that attempted to authenticate with the database.
        :type ip_address: str
        :param n_logs: Maximum number of lines from the log to return.
        :type n_logs: int
        :param start: Date and time when MongoDB Cloud begins retrieving database history. If you specify **start**, you must also specify **end**. This parameter uses the ISO 8601 timestamp format in UTC.
        :type start: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiMongoDBAccessLogsListView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'hostname',
            'envelope',
            'pretty',
            'auth_result',
            'end',
            'ip_address',
            'n_logs',
            'start'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_access_logs_by_hostname" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['hostname']:
            _path_params['hostname'] = _params['hostname']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('auth_result') is not None:  # noqa: E501
            _query_params.append(('authResult', _params['auth_result']))
        if _params.get('end') is not None:  # noqa: E501
            _query_params.append(('end', _params['end']))
        if _params.get('ip_address') is not None:  # noqa: E501
            _query_params.append(('ipAddress', _params['ip_address']))
        if _params.get('n_logs') is not None:  # noqa: E501
            _query_params.append(('nLogs', _params['n_logs']))
        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ApiMongoDBAccessLogsListView",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/dbAccessHistory/processes/{hostname}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
