# coding: utf-8

"""
    MongoDB Atlas Administration API

    The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, constr, validator

from typing import Optional

from atlas.models.data_protection_settings import DataProtectionSettings
from atlas.models.disk_backup_export_job import DiskBackupExportJob
from atlas.models.disk_backup_export_job_request import DiskBackupExportJobRequest
from atlas.models.disk_backup_on_demand_snapshot_request import DiskBackupOnDemandSnapshotRequest
from atlas.models.disk_backup_replica_set import DiskBackupReplicaSet
from atlas.models.disk_backup_restore_job import DiskBackupRestoreJob
from atlas.models.disk_backup_sharded_cluster_snapshot import DiskBackupShardedClusterSnapshot
from atlas.models.disk_backup_snapshot import DiskBackupSnapshot
from atlas.models.disk_backup_snapshot_aws_export_bucket import DiskBackupSnapshotAWSExportBucket
from atlas.models.disk_backup_snapshot_schedule import DiskBackupSnapshotSchedule
from atlas.models.paginated_api_atlas_disk_backup_export_job_view import PaginatedApiAtlasDiskBackupExportJobView
from atlas.models.paginated_api_atlas_serverless_backup_restore_job_view import PaginatedApiAtlasServerlessBackupRestoreJobView
from atlas.models.paginated_api_atlas_serverless_backup_snapshot_view import PaginatedApiAtlasServerlessBackupSnapshotView
from atlas.models.paginated_backup_snapshot_export_bucket_view import PaginatedBackupSnapshotExportBucketView
from atlas.models.paginated_cloud_backup_replica_set_view import PaginatedCloudBackupReplicaSetView
from atlas.models.paginated_cloud_backup_restore_job_view import PaginatedCloudBackupRestoreJobView
from atlas.models.paginated_cloud_backup_sharded_cluster_snapshot_view import PaginatedCloudBackupShardedClusterSnapshotView
from atlas.models.serverless_backup_restore_job import ServerlessBackupRestoreJob
from atlas.models.serverless_backup_snapshot import ServerlessBackupSnapshot
from atlas.models.snapshot_retention import SnapshotRetention

from atlas.api_client import ApiClient
from atlas.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudBackupsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def cancel_backup_restore_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to remove.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> None:  # noqa: E501
        """Cancel One Restore Job of One Cluster  # noqa: E501

        Cancels one cloud backup restore job of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_backup_restore_job(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to remove. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.cancel_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def cancel_backup_restore_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to remove.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Cancel One Restore Job of One Cluster  # noqa: E501

        Cancels one cloud backup restore job of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to remove. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'restore_job_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_backup_restore_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['restore_job_id']:
            _path_params['restoreJobId'] = _params['restore_job_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs/{restoreJobId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_backup_export_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_export_job_request : Annotated[DiskBackupExportJobRequest, Field(..., description="Information about the Cloud Backup Snapshot Export Job to create.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> DiskBackupExportJob:  # noqa: E501
        """Create One Cloud Backup Snapshot Export Job  # noqa: E501

        Exports one backup snapshot for dedicated Atlas cluster using Cloud Backups to an AWS bucket. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_backup_export_job(group_id, cluster_name, disk_backup_export_job_request, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_export_job_request: Information about the Cloud Backup Snapshot Export Job to create. (required)
        :type disk_backup_export_job_request: DiskBackupExportJobRequest
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupExportJob
        """
        kwargs['_return_http_data_only'] = True
        return self.create_backup_export_job_with_http_info(group_id, cluster_name, disk_backup_export_job_request, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def create_backup_export_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_export_job_request : Annotated[DiskBackupExportJobRequest, Field(..., description="Information about the Cloud Backup Snapshot Export Job to create.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Create One Cloud Backup Snapshot Export Job  # noqa: E501

        Exports one backup snapshot for dedicated Atlas cluster using Cloud Backups to an AWS bucket. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_backup_export_job_with_http_info(group_id, cluster_name, disk_backup_export_job_request, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_export_job_request: Information about the Cloud Backup Snapshot Export Job to create. (required)
        :type disk_backup_export_job_request: DiskBackupExportJobRequest
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupExportJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'disk_backup_export_job_request',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_backup_export_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['disk_backup_export_job_request']:
            _body_params = _params['disk_backup_export_job_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupExportJob",
            '400': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '409': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_backup_restore_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_restore_job : Annotated[DiskBackupRestoreJob, Field(..., description="Restores one snapshot of one cluster from the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupRestoreJob:  # noqa: E501
        """Restore One Snapshot of One Cluster  # noqa: E501

        Restores one snapshot of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_backup_restore_job(group_id, cluster_name, disk_backup_restore_job, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_restore_job: Restores one snapshot of one cluster from the specified project. (required)
        :type disk_backup_restore_job: DiskBackupRestoreJob
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupRestoreJob
        """
        kwargs['_return_http_data_only'] = True
        return self.create_backup_restore_job_with_http_info(group_id, cluster_name, disk_backup_restore_job, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_backup_restore_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_restore_job : Annotated[DiskBackupRestoreJob, Field(..., description="Restores one snapshot of one cluster from the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Restore One Snapshot of One Cluster  # noqa: E501

        Restores one snapshot of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_backup_restore_job_with_http_info(group_id, cluster_name, disk_backup_restore_job, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_restore_job: Restores one snapshot of one cluster from the specified project. (required)
        :type disk_backup_restore_job: DiskBackupRestoreJob
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupRestoreJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'disk_backup_restore_job',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_backup_restore_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['disk_backup_restore_job']:
            _body_params = _params['disk_backup_restore_job']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupRestoreJob",
            '400': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '409': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_export_bucket(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], disk_backup_snapshot_aws_export_bucket : Annotated[DiskBackupSnapshotAWSExportBucket, Field(..., description="Grants MongoDB Cloud access to the specified AWS S3 bucket.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupSnapshotAWSExportBucket:  # noqa: E501
        """Grant Access to AWS S3 Bucket for Cloud Backup Snapshot Exports  # noqa: E501

        Grants MongoDB Cloud access to the specified AWS S3 bucket. This enables this bucket to receive Atlas Cloud Backup snapshots. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_export_bucket(group_id, disk_backup_snapshot_aws_export_bucket, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param disk_backup_snapshot_aws_export_bucket: Grants MongoDB Cloud access to the specified AWS S3 bucket. (required)
        :type disk_backup_snapshot_aws_export_bucket: DiskBackupSnapshotAWSExportBucket
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshotAWSExportBucket
        """
        kwargs['_return_http_data_only'] = True
        return self.create_export_bucket_with_http_info(group_id, disk_backup_snapshot_aws_export_bucket, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_export_bucket_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], disk_backup_snapshot_aws_export_bucket : Annotated[DiskBackupSnapshotAWSExportBucket, Field(..., description="Grants MongoDB Cloud access to the specified AWS S3 bucket.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Grant Access to AWS S3 Bucket for Cloud Backup Snapshot Exports  # noqa: E501

        Grants MongoDB Cloud access to the specified AWS S3 bucket. This enables this bucket to receive Atlas Cloud Backup snapshots. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_export_bucket_with_http_info(group_id, disk_backup_snapshot_aws_export_bucket, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param disk_backup_snapshot_aws_export_bucket: Grants MongoDB Cloud access to the specified AWS S3 bucket. (required)
        :type disk_backup_snapshot_aws_export_bucket: DiskBackupSnapshotAWSExportBucket
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshotAWSExportBucket, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'disk_backup_snapshot_aws_export_bucket',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_export_bucket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['disk_backup_snapshot_aws_export_bucket']:
            _body_params = _params['disk_backup_snapshot_aws_export_bucket']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshotAWSExportBucket",
            '400': "ApiError",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/backup/exportBuckets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_serverless_backup_restore_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance whose snapshot you want to restore.")], serverless_backup_restore_job : Annotated[ServerlessBackupRestoreJob, Field(..., description="Restores one snapshot of one serverless instance from the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> ServerlessBackupRestoreJob:  # noqa: E501
        """Restore One Snapshot of One Serverless Instance  # noqa: E501

        Restores one snapshot of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_serverless_backup_restore_job(group_id, cluster_name, serverless_backup_restore_job, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance whose snapshot you want to restore. (required)
        :type cluster_name: str
        :param serverless_backup_restore_job: Restores one snapshot of one serverless instance from the specified project. (required)
        :type serverless_backup_restore_job: ServerlessBackupRestoreJob
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServerlessBackupRestoreJob
        """
        kwargs['_return_http_data_only'] = True
        return self.create_serverless_backup_restore_job_with_http_info(group_id, cluster_name, serverless_backup_restore_job, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_serverless_backup_restore_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance whose snapshot you want to restore.")], serverless_backup_restore_job : Annotated[ServerlessBackupRestoreJob, Field(..., description="Restores one snapshot of one serverless instance from the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Restore One Snapshot of One Serverless Instance  # noqa: E501

        Restores one snapshot of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_serverless_backup_restore_job_with_http_info(group_id, cluster_name, serverless_backup_restore_job, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance whose snapshot you want to restore. (required)
        :type cluster_name: str
        :param serverless_backup_restore_job: Restores one snapshot of one serverless instance from the specified project. (required)
        :type serverless_backup_restore_job: ServerlessBackupRestoreJob
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServerlessBackupRestoreJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'serverless_backup_restore_job',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_serverless_backup_restore_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['serverless_backup_restore_job']:
            _body_params = _params['serverless_backup_restore_job']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServerlessBackupRestoreJob",
            '400': "ApiError",
            '403': "ApiError",
            '404': "ApiError",
            '409': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_all_backup_schedules(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> DiskBackupSnapshotSchedule:  # noqa: E501
        """Remove All Cloud Backup Schedules  # noqa: E501

        Removes all cloud backup schedules for the specified cluster. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Atlas Admin role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_backup_schedules(group_id, cluster_name, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshotSchedule
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_all_backup_schedules_with_http_info(group_id, cluster_name, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_all_backup_schedules_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Remove All Cloud Backup Schedules  # noqa: E501

        Removes all cloud backup schedules for the specified cluster. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Atlas Admin role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_backup_schedules_with_http_info(group_id, cluster_name, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshotSchedule, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_backup_schedules" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshotSchedule",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_export_bucket(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], export_bucket_id : Annotated[constr(strict=True, max_length=63, min_length=3), Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> None:  # noqa: E501
        """Revoke Access to AWS S3 Bucket for Cloud Backup Snapshot Exports  # noqa: E501

        Revoke MongoDB Cloud access to the specified AWS S3 bucket. This prevents this bucket to receive Atlas Cloud Backup snapshots. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_export_bucket(group_id, export_bucket_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param export_bucket_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_bucket_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_export_bucket_with_http_info(group_id, export_bucket_id, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_export_bucket_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], export_bucket_id : Annotated[constr(strict=True, max_length=63, min_length=3), Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Revoke Access to AWS S3 Bucket for Cloud Backup Snapshot Exports  # noqa: E501

        Revoke MongoDB Cloud access to the specified AWS S3 bucket. This prevents this bucket to receive Atlas Cloud Backup snapshots. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_export_bucket_with_http_info(group_id, export_bucket_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param export_bucket_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_bucket_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'export_bucket_id',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_export_bucket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['export_bucket_id']:
            _path_params['exportBucketId'] = _params['export_bucket_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/backup/exportBuckets/{exportBucketId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_replica_set_backup(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove One Replica Set Cloud Backup  # noqa: E501

        Removes the specified snapshot. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_replica_set_backup(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_replica_set_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_replica_set_backup_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Remove One Replica Set Cloud Backup  # noqa: E501

        Removes the specified snapshot. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_replica_set_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_replica_set_backup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_sharded_cluster_backup(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> None:  # noqa: E501
        """Remove One Sharded Cluster Cloud Backup  # noqa: E501

        Removes one snapshot of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_sharded_cluster_backup(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_sharded_cluster_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_sharded_cluster_backup_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Remove One Sharded Cluster Cloud Backup  # noqa: E501

        Removes one snapshot of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_sharded_cluster_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sharded_cluster_backup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedCluster/{snapshotId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_backup_export_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], export_id : Annotated[StrictStr, Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> DiskBackupExportJob:  # noqa: E501
        """Return One Cloud Backup Snapshot Export Job  # noqa: E501

        Returns one Cloud Backup snapshot export job associated with the specified Atlas cluster. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_export_job(group_id, cluster_name, export_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param export_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupExportJob
        """
        kwargs['_return_http_data_only'] = True
        return self.get_backup_export_job_with_http_info(group_id, cluster_name, export_id, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def get_backup_export_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], export_id : Annotated[StrictStr, Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Return One Cloud Backup Snapshot Export Job  # noqa: E501

        Returns one Cloud Backup snapshot export job associated with the specified Atlas cluster. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_export_job_with_http_info(group_id, cluster_name, export_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param export_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupExportJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'export_id',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_export_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['export_id']:
            _path_params['exportId'] = _params['export_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupExportJob",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports/{exportId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_backup_restore_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster with the restore jobs you want to return.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupRestoreJob:  # noqa: E501
        """Return One Restore Job of One Cluster  # noqa: E501

        Returns one cloud backup restore job for one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_restore_job(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster with the restore jobs you want to return. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to return. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupRestoreJob
        """
        kwargs['_return_http_data_only'] = True
        return self.get_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_backup_restore_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster with the restore jobs you want to return.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return One Restore Job of One Cluster  # noqa: E501

        Returns one cloud backup restore job for one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster with the restore jobs you want to return. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to return. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupRestoreJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'restore_job_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_restore_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['restore_job_id']:
            _path_params['restoreJobId'] = _params['restore_job_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupRestoreJob",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs/{restoreJobId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_backup_schedule(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupSnapshotSchedule:  # noqa: E501
        """Return One Cloud Backup Schedule  # noqa: E501

        Returns the cloud backup schedule for the specified cluster within the specified project. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_schedule(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshotSchedule
        """
        kwargs['_return_http_data_only'] = True
        return self.get_backup_schedule_with_http_info(group_id, cluster_name, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_backup_schedule_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return One Cloud Backup Schedule  # noqa: E501

        Returns the cloud backup schedule for the specified cluster within the specified project. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_backup_schedule_with_http_info(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshotSchedule, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_schedule" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshotSchedule",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_data_protection_settings(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DataProtectionSettings:  # noqa: E501
        """Return the Data Protection Policy settings  # noqa: E501

        Returns the Data Protection Policy settings with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_protection_settings(group_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataProtectionSettings
        """
        kwargs['_return_http_data_only'] = True
        return self.get_data_protection_settings_with_http_info(group_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_data_protection_settings_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return the Data Protection Policy settings  # noqa: E501

        Returns the Data Protection Policy settings with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_data_protection_settings_with_http_info(group_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataProtectionSettings, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_protection_settings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DataProtectionSettings",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/dataProtection', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_export_bucket(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], export_bucket_id : Annotated[constr(strict=True, max_length=63, min_length=3), Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> DiskBackupSnapshotAWSExportBucket:  # noqa: E501
        """Return One AWS S3 Bucket Used for Cloud Backup Snapshot Exports  # noqa: E501

        Returns one AWS S3 bucket associated with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_export_bucket(group_id, export_bucket_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param export_bucket_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_bucket_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshotAWSExportBucket
        """
        kwargs['_return_http_data_only'] = True
        return self.get_export_bucket_with_http_info(group_id, export_bucket_id, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def get_export_bucket_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], export_bucket_id : Annotated[constr(strict=True, max_length=63, min_length=3), Field(..., description="Unique string that identifies the AWS S3 bucket to which you export your snapshots.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Return One AWS S3 Bucket Used for Cloud Backup Snapshot Exports  # noqa: E501

        Returns one AWS S3 bucket associated with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_export_bucket_with_http_info(group_id, export_bucket_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param export_bucket_id: Unique string that identifies the AWS S3 bucket to which you export your snapshots. (required)
        :type export_bucket_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshotAWSExportBucket, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'export_bucket_id',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_export_bucket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['export_bucket_id']:
            _path_params['exportBucketId'] = _params['export_bucket_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshotAWSExportBucket",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/backup/exportBuckets/{exportBucketId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_replica_set_backup(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupReplicaSet:  # noqa: E501
        """Return One Replica Set Cloud Backup  # noqa: E501

        Returns one snapshot from the specified cluster. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_replica_set_backup(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupReplicaSet
        """
        kwargs['_return_http_data_only'] = True
        return self.get_replica_set_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_replica_set_backup_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return One Replica Set Cloud Backup  # noqa: E501

        Returns one snapshot from the specified cluster. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_replica_set_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupReplicaSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_replica_set_backup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupReplicaSet",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_serverless_backup(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs) -> ServerlessBackupSnapshot:  # noqa: E501
        """Return One Snapshot of One Serverless Instance  # noqa: E501

        Returns one snapshot of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serverless_backup(group_id, cluster_name, snapshot_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServerlessBackupSnapshot
        """
        kwargs['_return_http_data_only'] = True
        return self.get_serverless_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, **kwargs)  # noqa: E501

    @validate_arguments
    def get_serverless_backup_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, **kwargs):  # noqa: E501
        """Return One Snapshot of One Serverless Instance  # noqa: E501

        Returns one snapshot of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serverless_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServerlessBackupSnapshot, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'envelope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_serverless_backup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServerlessBackupSnapshot",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/snapshots/{snapshotId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_serverless_backup_restore_job(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> ServerlessBackupRestoreJob:  # noqa: E501
        """Return One Restore Job for One Serverless Instance  # noqa: E501

        Returns one restore job for one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serverless_backup_restore_job(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to return. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ServerlessBackupRestoreJob
        """
        kwargs['_return_http_data_only'] = True
        return self.get_serverless_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_serverless_backup_restore_job_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], restore_job_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the restore job to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return One Restore Job for One Serverless Instance  # noqa: E501

        Returns one restore job for one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_serverless_backup_restore_job_with_http_info(group_id, cluster_name, restore_job_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param restore_job_id: Unique 24-hexadecimal digit string that identifies the restore job to return. (required)
        :type restore_job_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ServerlessBackupRestoreJob, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'restore_job_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_serverless_backup_restore_job" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['restore_job_id']:
            _path_params['restoreJobId'] = _params['restore_job_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ServerlessBackupRestoreJob",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs/{restoreJobId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_sharded_cluster_backup(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupShardedClusterSnapshot:  # noqa: E501
        """Return One Sharded Cluster Cloud Backup  # noqa: E501

        Returns one snapshot of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sharded_cluster_backup(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupShardedClusterSnapshot
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sharded_cluster_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def get_sharded_cluster_backup_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return One Sharded Cluster Cloud Backup  # noqa: E501

        Returns one snapshot of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sharded_cluster_backup_with_http_info(group_id, cluster_name, snapshot_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupShardedClusterSnapshot, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sharded_cluster_backup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupShardedClusterSnapshot",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedCluster/{snapshotId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_backup_export_jobs(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, **kwargs) -> PaginatedApiAtlasDiskBackupExportJobView:  # noqa: E501
        """Return All Cloud Backup Snapshot Export Jobs  # noqa: E501

        Returns all Cloud Backup snapshot export jobs associated with the specified Atlas cluster. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_backup_export_jobs(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedApiAtlasDiskBackupExportJobView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_backup_export_jobs_with_http_info(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, **kwargs)  # noqa: E501

    @validate_arguments
    def list_backup_export_jobs_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, **kwargs):  # noqa: E501
        """Return All Cloud Backup Snapshot Export Jobs  # noqa: E501

        Returns all Cloud Backup snapshot export jobs associated with the specified Atlas cluster. To use this resource, the requesting API Key must have the Project Atlas Admin role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_backup_export_jobs_with_http_info(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedApiAtlasDiskBackupExportJobView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty',
            'include_count',
            'items_per_page',
            'page_num'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_backup_export_jobs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedApiAtlasDiskBackupExportJobView",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/exports', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_backup_restore_jobs(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster with the restore jobs you want to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> PaginatedCloudBackupRestoreJobView:  # noqa: E501
        """Return All Restore Jobs for One Cluster  # noqa: E501

        Returns all cloud backup restore jobs for one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_backup_restore_jobs(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster with the restore jobs you want to return. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCloudBackupRestoreJobView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_backup_restore_jobs_with_http_info(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def list_backup_restore_jobs_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster with the restore jobs you want to return.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return All Restore Jobs for One Cluster  # noqa: E501

        Returns all cloud backup restore jobs for one cluster from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_backup_restore_jobs_with_http_info(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster with the restore jobs you want to return. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCloudBackupRestoreJobView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'include_count',
            'items_per_page',
            'page_num',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_backup_restore_jobs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedCloudBackupRestoreJobView",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/restoreJobs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_export_buckets(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> PaginatedBackupSnapshotExportBucketView:  # noqa: E501
        """Return All AWS S3 Buckets Used for Cloud Backup Snapshot Exports  # noqa: E501

        Returns all AWS S3 buckets associated with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_export_buckets(group_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedBackupSnapshotExportBucketView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_export_buckets_with_http_info(group_id, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def list_export_buckets_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return All AWS S3 Buckets Used for Cloud Backup Snapshot Exports  # noqa: E501

        Returns all AWS S3 buckets associated with the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_export_buckets_with_http_info(group_id, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedBackupSnapshotExportBucketView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_export_buckets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedBackupSnapshotExportBucketView",
            '401': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/backup/exportBuckets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_replica_set_backups(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> PaginatedCloudBackupReplicaSetView:  # noqa: E501
        """Return All Replica Set Cloud Backups  # noqa: E501

        Returns all snapshots of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_replica_set_backups(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCloudBackupReplicaSetView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_replica_set_backups_with_http_info(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def list_replica_set_backups_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return All Replica Set Cloud Backups  # noqa: E501

        Returns all snapshots of one cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_replica_set_backups_with_http_info(group_id, cluster_name, envelope, include_count, items_per_page, page_num, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCloudBackupReplicaSetView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'include_count',
            'items_per_page',
            'page_num',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_replica_set_backups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedCloudBackupReplicaSetView",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_serverless_backup_restore_jobs(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> PaginatedApiAtlasServerlessBackupRestoreJobView:  # noqa: E501
        """Return All Restore Jobs for One Serverless Instance  # noqa: E501

        Returns all restore jobs for one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_serverless_backup_restore_jobs(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedApiAtlasServerlessBackupRestoreJobView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_serverless_backup_restore_jobs_with_http_info(group_id, cluster_name, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def list_serverless_backup_restore_jobs_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return All Restore Jobs for One Serverless Instance  # noqa: E501

        Returns all restore jobs for one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_serverless_backup_restore_jobs_with_http_info(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedApiAtlasServerlessBackupRestoreJobView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_serverless_backup_restore_jobs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedApiAtlasServerlessBackupRestoreJobView",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/restoreJobs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_serverless_backups(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, **kwargs) -> PaginatedApiAtlasServerlessBackupSnapshotView:  # noqa: E501
        """Return All Snapshots of One Serverless Instance  # noqa: E501

        Returns all snapshots of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_serverless_backups(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedApiAtlasServerlessBackupSnapshotView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_serverless_backups_with_http_info(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, **kwargs)  # noqa: E501

    @validate_arguments
    def list_serverless_backups_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the serverless instance.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, include_count : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.")] = None, items_per_page : Annotated[Optional[conint(strict=True, le=500, ge=1)], Field(description="Number of items that the response returns per page.")] = None, page_num : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Number of the page that displays the current set of the total objects that the response returns.")] = None, **kwargs):  # noqa: E501
        """Return All Snapshots of One Serverless Instance  # noqa: E501

        Returns all snapshots of one serverless instance from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_serverless_backups_with_http_info(group_id, cluster_name, envelope, pretty, include_count, items_per_page, page_num, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the serverless instance. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param include_count: Flag that indicates whether the response returns the total number of items (**totalCount**) in the response.
        :type include_count: bool
        :param items_per_page: Number of items that the response returns per page.
        :type items_per_page: int
        :param page_num: Number of the page that displays the current set of the total objects that the response returns.
        :type page_num: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedApiAtlasServerlessBackupSnapshotView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty',
            'include_count',
            'items_per_page',
            'page_num'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_serverless_backups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))
        if _params.get('include_count') is not None:  # noqa: E501
            _query_params.append(('includeCount', _params['include_count']))
        if _params.get('items_per_page') is not None:  # noqa: E501
            _query_params.append(('itemsPerPage', _params['items_per_page']))
        if _params.get('page_num') is not None:  # noqa: E501
            _query_params.append(('pageNum', _params['page_num']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedApiAtlasServerlessBackupSnapshotView",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/serverless/{clusterName}/backup/snapshots', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_sharded_cluster_backups(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> PaginatedCloudBackupShardedClusterSnapshotView:  # noqa: E501
        """Return All Sharded Cluster Cloud Backups  # noqa: E501

        Returns all snapshots of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sharded_cluster_backups(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCloudBackupShardedClusterSnapshotView
        """
        kwargs['_return_http_data_only'] = True
        return self.list_sharded_cluster_backups_with_http_info(group_id, cluster_name, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def list_sharded_cluster_backups_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Return All Sharded Cluster Cloud Backups  # noqa: E501

        Returns all snapshots of one sharded cluster from the specified project. To use this resource, the requesting API Key must have the Project Read Only role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sharded_cluster_backups_with_http_info(group_id, cluster_name, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCloudBackupShardedClusterSnapshotView, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sharded_cluster_backups" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "PaginatedCloudBackupShardedClusterSnapshotView",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/shardedClusters', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def take_snapshot(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_on_demand_snapshot_request : Annotated[DiskBackupOnDemandSnapshotRequest, Field(..., description="Takes one on-demand snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupSnapshot:  # noqa: E501
        """Take One On-Demand Snapshot  # noqa: E501

        Takes one on-demand snapshot for the specified cluster. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.take_snapshot(group_id, cluster_name, disk_backup_on_demand_snapshot_request, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_on_demand_snapshot_request: Takes one on-demand snapshot. (required)
        :type disk_backup_on_demand_snapshot_request: DiskBackupOnDemandSnapshotRequest
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshot
        """
        kwargs['_return_http_data_only'] = True
        return self.take_snapshot_with_http_info(group_id, cluster_name, disk_backup_on_demand_snapshot_request, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def take_snapshot_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_on_demand_snapshot_request : Annotated[DiskBackupOnDemandSnapshotRequest, Field(..., description="Takes one on-demand snapshot.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Take One On-Demand Snapshot  # noqa: E501

        Takes one on-demand snapshot for the specified cluster. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.take_snapshot_with_http_info(group_id, cluster_name, disk_backup_on_demand_snapshot_request, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_on_demand_snapshot_request: Takes one on-demand snapshot. (required)
        :type disk_backup_on_demand_snapshot_request: DiskBackupOnDemandSnapshotRequest
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshot, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'disk_backup_on_demand_snapshot_request',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method take_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['disk_backup_on_demand_snapshot_request']:
            _body_params = _params['disk_backup_on_demand_snapshot_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshot",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_backup_schedule(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_snapshot_schedule : Annotated[DiskBackupSnapshotSchedule, Field(..., description="Updates the cloud backup schedule for one cluster within the specified project.  **Note**: In the request body, provide only the fields that you want to update.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupSnapshotSchedule:  # noqa: E501
        """Update Cloud Backup Schedule for One Cluster  # noqa: E501

        Updates the cloud backup schedule for one cluster within the specified project. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_backup_schedule(group_id, cluster_name, disk_backup_snapshot_schedule, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_snapshot_schedule: Updates the cloud backup schedule for one cluster within the specified project.  **Note**: In the request body, provide only the fields that you want to update. (required)
        :type disk_backup_snapshot_schedule: DiskBackupSnapshotSchedule
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupSnapshotSchedule
        """
        kwargs['_return_http_data_only'] = True
        return self.update_backup_schedule_with_http_info(group_id, cluster_name, disk_backup_snapshot_schedule, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def update_backup_schedule_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], disk_backup_snapshot_schedule : Annotated[DiskBackupSnapshotSchedule, Field(..., description="Updates the cloud backup schedule for one cluster within the specified project.  **Note**: In the request body, provide only the fields that you want to update.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Update Cloud Backup Schedule for One Cluster  # noqa: E501

        Updates the cloud backup schedule for one cluster within the specified project. This schedule defines when MongoDB Cloud takes scheduled snapshots and how long it stores those snapshots. To use this resource, the requesting API Key must have the Project Owner role and an entry for the project access list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_backup_schedule_with_http_info(group_id, cluster_name, disk_backup_snapshot_schedule, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param disk_backup_snapshot_schedule: Updates the cloud backup schedule for one cluster within the specified project.  **Note**: In the request body, provide only the fields that you want to update. (required)
        :type disk_backup_snapshot_schedule: DiskBackupSnapshotSchedule
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupSnapshotSchedule, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'disk_backup_snapshot_schedule',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_backup_schedule" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['disk_backup_snapshot_schedule']:
            _body_params = _params['disk_backup_snapshot_schedule']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupSnapshotSchedule",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/schedule', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_data_protection_settings(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], data_protection_settings : Annotated[DataProtectionSettings, Field(..., description="The new Data Protection Policy settings.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DataProtectionSettings:  # noqa: E501
        """Update or enable the Data Protection Policy settings  # noqa: E501

        Updates the Data Protection Policy settings for the specified project. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_data_protection_settings(group_id, data_protection_settings, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param data_protection_settings: The new Data Protection Policy settings. (required)
        :type data_protection_settings: DataProtectionSettings
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DataProtectionSettings
        """
        kwargs['_return_http_data_only'] = True
        return self.update_data_protection_settings_with_http_info(group_id, data_protection_settings, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def update_data_protection_settings_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], data_protection_settings : Annotated[DataProtectionSettings, Field(..., description="The new Data Protection Policy settings.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Update or enable the Data Protection Policy settings  # noqa: E501

        Updates the Data Protection Policy settings for the specified project. To use this resource, the requesting API Key must have the Project Owner role. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_data_protection_settings_with_http_info(group_id, data_protection_settings, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param data_protection_settings: The new Data Protection Policy settings. (required)
        :type data_protection_settings: DataProtectionSettings
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DataProtectionSettings, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'data_protection_settings',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_data_protection_settings" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['data_protection_settings']:
            _body_params = _params['data_protection_settings']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DataProtectionSettings",
            '401': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/dataProtection', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_snapshot_retention(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], snapshot_retention : Annotated[SnapshotRetention, Field(..., description="Changes the expiration date for one cloud backup snapshot for one cluster in the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs) -> DiskBackupReplicaSet:  # noqa: E501
        """Change Expiration Date for One Cloud Backup  # noqa: E501

        Changes the expiration date for one cloud backup snapshot for one cluster in the specified project. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_snapshot_retention(group_id, cluster_name, snapshot_id, snapshot_retention, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param snapshot_retention: Changes the expiration date for one cloud backup snapshot for one cluster in the specified project. (required)
        :type snapshot_retention: SnapshotRetention
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiskBackupReplicaSet
        """
        kwargs['_return_http_data_only'] = True
        return self.update_snapshot_retention_with_http_info(group_id, cluster_name, snapshot_id, snapshot_retention, envelope, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def update_snapshot_retention_with_http_info(self, group_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.")], cluster_name : Annotated[constr(strict=True, max_length=64, min_length=1), Field(..., description="Human-readable label that identifies the cluster.")], snapshot_id : Annotated[constr(strict=True, max_length=24, min_length=24), Field(..., description="Unique 24-hexadecimal digit string that identifies the desired snapshot.")], snapshot_retention : Annotated[SnapshotRetention, Field(..., description="Changes the expiration date for one cloud backup snapshot for one cluster in the specified project.")], envelope : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.")] = None, pretty : Annotated[Optional[StrictBool], Field(description="Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.")] = None, **kwargs):  # noqa: E501
        """Change Expiration Date for One Cloud Backup  # noqa: E501

        Changes the expiration date for one cloud backup snapshot for one cluster in the specified project. This resource doesn't require the API Key to have an Access List.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_snapshot_retention_with_http_info(group_id, cluster_name, snapshot_id, snapshot_retention, envelope, pretty, async_req=True)
        >>> result = thread.get()

        :param group_id: Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.  **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups. (required)
        :type group_id: str
        :param cluster_name: Human-readable label that identifies the cluster. (required)
        :type cluster_name: str
        :param snapshot_id: Unique 24-hexadecimal digit string that identifies the desired snapshot. (required)
        :type snapshot_id: str
        :param snapshot_retention: Changes the expiration date for one cloud backup snapshot for one cluster in the specified project. (required)
        :type snapshot_retention: SnapshotRetention
        :param envelope: Flag that indicates whether Application wraps the response in an `envelope` JSON object. Some API clients cannot access the HTTP response headers or status code. To remediate this, set envelope=true in the query. Endpoints that return a list of results use the results object as an envelope. Application adds the status parameter to the response body.
        :type envelope: bool
        :param pretty: Flag that indicates whether the response body should be in the <a href=\"https://en.wikipedia.org/wiki/Prettyprint\" target=\"_blank\" rel=\"noopener noreferrer\">prettyprint</a> format.
        :type pretty: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiskBackupReplicaSet, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'group_id',
            'cluster_name',
            'snapshot_id',
            'snapshot_retention',
            'envelope',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snapshot_retention" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['group_id']:
            _path_params['groupId'] = _params['group_id']
        if _params['cluster_name']:
            _path_params['clusterName'] = _params['cluster_name']
        if _params['snapshot_id']:
            _path_params['snapshotId'] = _params['snapshot_id']

        # process the query parameters
        _query_params = []
        if _params.get('envelope') is not None:  # noqa: E501
            _query_params.append(('envelope', _params['envelope']))
        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['snapshot_retention']:
            _body_params = _params['snapshot_retention']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.atlas.2023-01-01+json', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/vnd.atlas.2023-01-01+json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "DiskBackupReplicaSet",
            '400': "ApiError",
            '404': "ApiError",
            '500': "ApiError",
        }

        return self.api_client.call_api(
            '/api/atlas/v2/groups/{groupId}/clusters/{clusterName}/backup/snapshots/{snapshotId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
