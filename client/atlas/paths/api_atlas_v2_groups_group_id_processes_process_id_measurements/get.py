# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from atlas import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401

from atlas.model.api_measurements_general_view_atlas import ApiMeasurementsGeneralViewAtlas
from atlas.model.api_error import ApiError

from . import path

# Query params
EnvelopeSchema = schemas.BoolSchema
PrettySchema = schemas.BoolSchema


class MSchema(
    schemas.ListSchema
):


    class MetaOapg:
        unique_items = True
        max_items = 10
        min_items = 1
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "ASSERT_MSG": "ASSERT_MSG",
                    "ASSERT_REGULAR": "ASSERT_REGULAR",
                    "ASSERT_USER": "ASSERT_USER",
                    "ASSERT_WARNING": "ASSERT_WARNING",
                    "BACKGROUND_FLUSH_AVG": "BACKGROUND_FLUSH_AVG",
                    "CACHE_BYTES_READ_INTO": "CACHE_BYTES_READ_INTO",
                    "CACHE_BYTES_WRITTEN_FROM": "CACHE_BYTES_WRITTEN_FROM",
                    "CACHE_DIRTY_BYTES": "CACHE_DIRTY_BYTES",
                    "CACHE_USED_BYTES": "CACHE_USED_BYTES",
                    "COMPUTED_MEMORY": "COMPUTED_MEMORY",
                    "CONNECTIONS": "CONNECTIONS",
                    "CURSORS_TOTAL_OPEN": "CURSORS_TOTAL_OPEN",
                    "CURSORS_TOTAL_TIMED_OUT": "CURSORS_TOTAL_TIMED_OUT",
                    "DB_DATA_SIZE_TOTAL": "DB_DATA_SIZE_TOTAL",
                    "DB_STORAGE_TOTAL": "DB_STORAGE_TOTAL",
                    "DOCUMENT_METRICS_DELETED": "DOCUMENT_METRICS_DELETED",
                    "DOCUMENT_METRICS_INSERTED": "DOCUMENT_METRICS_INSERTED",
                    "DOCUMENT_METRICS_RETURNED": "DOCUMENT_METRICS_RETURNED",
                    "DOCUMENT_METRICS_UPDATED": "DOCUMENT_METRICS_UPDATED",
                    "EXTRA_INFO_PAGE_FAULTS": "EXTRA_INFO_PAGE_FAULTS",
                    "FTS_DISK_UTILIZATION": "FTS_DISK_UTILIZATION",
                    "FTS_MEMORY_MAPPED": "FTS_MEMORY_MAPPED",
                    "FTS_MEMORY_RESIDENT": "FTS_MEMORY_RESIDENT",
                    "FTS_MEMORY_VIRTUAL": "FTS_MEMORY_VIRTUAL",
                    "FTS_PROCESS_CPU_KERNEL": "FTS_PROCESS_CPU_KERNEL",
                    "FTS_PROCESS_CPU_USER": "FTS_PROCESS_CPU_USER",
                    "FTS_PROCESS_NORMALIZED_CPU_KERNEL": "FTS_PROCESS_NORMALIZED_CPU_KERNEL",
                    "FTS_PROCESS_NORMALIZED_CPU_USER": "FTS_PROCESS_NORMALIZED_CPU_USER",
                    "GLOBAL_ACCESSES_NOT_IN_MEMORY": "GLOBAL_ACCESSES_NOT_IN_MEMORY",
                    "GLOBAL_LOCK_CURRENT_QUEUE_READERS": "GLOBAL_LOCK_CURRENT_QUEUE_READERS",
                    "GLOBAL_LOCK_CURRENT_QUEUE_TOTAL": "GLOBAL_LOCK_CURRENT_QUEUE_TOTAL",
                    "GLOBAL_LOCK_CURRENT_QUEUE_WRITERS": "GLOBAL_LOCK_CURRENT_QUEUE_WRITERS",
                    "GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN": "GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN",
                    "INDEX_COUNTERS_BTREE_ACCESSES": "INDEX_COUNTERS_BTREE_ACCESSES",
                    "INDEX_COUNTERS_BTREE_HITS": "INDEX_COUNTERS_BTREE_HITS",
                    "INDEX_COUNTERS_BTREE_MISS_RATIO": "INDEX_COUNTERS_BTREE_MISS_RATIO",
                    "INDEX_COUNTERS_BTREE_MISSES": "INDEX_COUNTERS_BTREE_MISSES",
                    "JOURNALING_COMMITS_IN_WRITE_LOCK": "JOURNALING_COMMITS_IN_WRITE_LOCK",
                    "JOURNALING_MB": "JOURNALING_MB",
                    "JOURNALING_WRITE_DATA_FILES_MB": "JOURNALING_WRITE_DATA_FILES_MB",
                    "MAX_PROCESS_CPU_CHILDREN_KERNEL": "MAX_PROCESS_CPU_CHILDREN_KERNEL",
                    "MAX_PROCESS_CPU_CHILDREN_USER": "MAX_PROCESS_CPU_CHILDREN_USER",
                    "MAX_PROCESS_CPU_KERNEL": "MAX_PROCESS_CPU_KERNEL",
                    "MAX_PROCESS_CPU_USER": "MAX_PROCESS_CPU_USER",
                    "MAX_PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL": "MAX_PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL",
                    "MAX_PROCESS_NORMALIZED_CPU_CHILDREN_USER": "MAX_PROCESS_NORMALIZED_CPU_CHILDREN_USER",
                    "MAX_PROCESS_NORMALIZED_CPU_KERNEL": "MAX_PROCESS_NORMALIZED_CPU_KERNEL",
                    "MAX_PROCESS_NORMALIZED_CPU_USER": "MAX_PROCESS_NORMALIZED_CPU_USER",
                    "MAX_SWAP_USAGE_FREE": "MAX_SWAP_USAGE_FREE",
                    "MAX_SWAP_USAGE_USED ": "MAX_SWAP_USAGE_USED_",
                    "MAX_SYSTEM_CPU_GUEST": "MAX_SYSTEM_CPU_GUEST",
                    "MAX_SYSTEM_CPU_IOWAIT": "MAX_SYSTEM_CPU_IOWAIT",
                    "MAX_SYSTEM_CPU_IRQ": "MAX_SYSTEM_CPU_IRQ",
                    "MAX_SYSTEM_CPU_KERNEL": "MAX_SYSTEM_CPU_KERNEL",
                    "MAX_SYSTEM_CPU_SOFTIRQ": "MAX_SYSTEM_CPU_SOFTIRQ",
                    "MAX_SYSTEM_CPU_STEAL": "MAX_SYSTEM_CPU_STEAL",
                    "MAX_SYSTEM_CPU_USER": "MAX_SYSTEM_CPU_USER",
                    "MAX_SYSTEM_MEMORY_AVAILABLE": "MAX_SYSTEM_MEMORY_AVAILABLE",
                    "MAX_SYSTEM_MEMORY_FREE": "MAX_SYSTEM_MEMORY_FREE",
                    "MAX_SYSTEM_MEMORY_USED": "MAX_SYSTEM_MEMORY_USED",
                    "MAX_SYSTEM_NETWORK_IN": "MAX_SYSTEM_NETWORK_IN",
                    "MAX_SYSTEM_NETWORK_OUT": "MAX_SYSTEM_NETWORK_OUT",
                    "MAX_SYSTEM_NORMALIZED_CPU_GUEST": "MAX_SYSTEM_NORMALIZED_CPU_GUEST",
                    "MAX_SYSTEM_NORMALIZED_CPU_IOWAIT": "MAX_SYSTEM_NORMALIZED_CPU_IOWAIT",
                    "MAX_SYSTEM_NORMALIZED_CPU_IRQ": "MAX_SYSTEM_NORMALIZED_CPU_IRQ",
                    "MAX_SYSTEM_NORMALIZED_CPU_KERNEL": "MAX_SYSTEM_NORMALIZED_CPU_KERNEL",
                    "MAX_SYSTEM_NORMALIZED_CPU_NICE": "MAX_SYSTEM_NORMALIZED_CPU_NICE",
                    "MAX_SYSTEM_NORMALIZED_CPU_SOFTIRQ": "MAX_SYSTEM_NORMALIZED_CPU_SOFTIRQ",
                    "MAX_SYSTEM_NORMALIZED_CPU_STEAL": "MAX_SYSTEM_NORMALIZED_CPU_STEAL",
                    "MAX_SYSTEM_NORMALIZED_CPU_USER": "MAX_SYSTEM_NORMALIZED_CPU_USER",
                    "MEMORY_MAPPED": "MEMORY_MAPPED",
                    "MEMORY_RESIDENT": "MEMORY_RESIDENT",
                    "MEMORY_VIRTUAL": "MEMORY_VIRTUAL",
                    "NETWORK_BYTES_IN": "NETWORK_BYTES_IN",
                    "NETWORK_BYTES_OUT": "NETWORK_BYTES_OUT",
                    "NETWORK_NUM_REQUESTS": "NETWORK_NUM_REQUESTS",
                    "OP_EXECUTION_TIME_COMMANDS": "OP_EXECUTION_TIME_COMMANDS",
                    "OP_EXECUTION_TIME_READS": "OP_EXECUTION_TIME_READS",
                    "OP_EXECUTION_TIME_WRITES": "OP_EXECUTION_TIME_WRITES",
                    "OPCOUNTER_CMD": "OPCOUNTER_CMD",
                    "OPCOUNTER_DELETE": "OPCOUNTER_DELETE",
                    "OPCOUNTER_GETMORE": "OPCOUNTER_GETMORE",
                    "OPCOUNTER_INSERT": "OPCOUNTER_INSERT",
                    "OPCOUNTER_QUERY": "OPCOUNTER_QUERY",
                    "OPCOUNTER_REPL_CMD": "OPCOUNTER_REPL_CMD",
                    "OPCOUNTER_REPL_DELETE": "OPCOUNTER_REPL_DELETE",
                    "OPCOUNTER_REPL_INSERT": "OPCOUNTER_REPL_INSERT",
                    "OPCOUNTER_REPL_UPDATE": "OPCOUNTER_REPL_UPDATE",
                    "OPCOUNTER_UPDATE": "OPCOUNTER_UPDATE",
                    "OPERATIONS_SCAN_AND_ORDER": "OPERATIONS_SCAN_AND_ORDER",
                    "OPLOG_MASTER_LAG_TIME_DIFF": "OPLOG_MASTER_LAG_TIME_DIFF",
                    "OPLOG_MASTER_TIME": "OPLOG_MASTER_TIME",
                    "OPLOG_RATE_GB_PER_HOUR": "OPLOG_RATE_GB_PER_HOUR",
                    "OPLOG_SLAVE_LAG_MASTER_TIME": "OPLOG_SLAVE_LAG_MASTER_TIME",
                    "OPLOG_REPLICATION_LAG": "OPLOG_REPLICATION_LAG",
                    "PROCESS_CPU_CHILDREN_KERNEL": "PROCESS_CPU_CHILDREN_KERNEL",
                    "PROCESS_CPU_CHILDREN_USER": "PROCESS_CPU_CHILDREN_USER",
                    "PROCESS_CPU_KERNEL": "PROCESS_CPU_KERNEL",
                    "PROCESS_CPU_USER": "PROCESS_CPU_USER",
                    "PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL": "PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL",
                    "PROCESS_NORMALIZED_CPU_CHILDREN_USER": "PROCESS_NORMALIZED_CPU_CHILDREN_USER",
                    "PROCESS_NORMALIZED_CPU_KERNEL": "PROCESS_NORMALIZED_CPU_KERNEL",
                    "PROCESS_NORMALIZED_CPU_USER": "PROCESS_NORMALIZED_CPU_USER",
                    "QUERY_EXECUTOR_SCANNED": "QUERY_EXECUTOR_SCANNED",
                    "QUERY_EXECUTOR_SCANNED_OBJECTS": "QUERY_EXECUTOR_SCANNED_OBJECTS",
                    "QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED": "QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED",
                    "QUERY_TARGETING_SCANNED_PER_RETURNED": "QUERY_TARGETING_SCANNED_PER_RETURNED",
                    "RESTARTS_IN_LAST_HOUR": "RESTARTS_IN_LAST_HOUR",
                    "SWAP_USAGE_FREE": "SWAP_USAGE_FREE",
                    "SWAP_USAGE_USED": "SWAP_USAGE_USED",
                    "SYSTEM_CPU_GUEST": "SYSTEM_CPU_GUEST",
                    "SYSTEM_CPU_IOWAIT": "SYSTEM_CPU_IOWAIT",
                    "SYSTEM_CPU_IRQ": "SYSTEM_CPU_IRQ",
                    "SYSTEM_CPU_KERNEL": "SYSTEM_CPU_KERNEL",
                    "SYSTEM_CPU_NICE": "SYSTEM_CPU_NICE",
                    "SYSTEM_CPU_SOFTIRQ": "SYSTEM_CPU_SOFTIRQ",
                    "SYSTEM_CPU_STEAL": "SYSTEM_CPU_STEAL",
                    "SYSTEM_CPU_USER": "SYSTEM_CPU_USER",
                    "SYSTEM_MEMORY_AVAILABLE": "SYSTEM_MEMORY_AVAILABLE",
                    "SYSTEM_MEMORY_FREE": "SYSTEM_MEMORY_FREE",
                    "SYSTEM_MEMORY_USED": "SYSTEM_MEMORY_USED",
                    "SYSTEM_NETWORK_IN": "SYSTEM_NETWORK_IN",
                    "SYSTEM_NETWORK_OUT": "SYSTEM_NETWORK_OUT",
                    "SYSTEM_NORMALIZED_CPU_GUEST": "SYSTEM_NORMALIZED_CPU_GUEST",
                    "SYSTEM_NORMALIZED_CPU_IOWAIT": "SYSTEM_NORMALIZED_CPU_IOWAIT",
                    "SYSTEM_NORMALIZED_CPU_IRQ": "SYSTEM_NORMALIZED_CPU_IRQ",
                    "SYSTEM_NORMALIZED_CPU_KERNEL": "SYSTEM_NORMALIZED_CPU_KERNEL",
                    "SYSTEM_NORMALIZED_CPU_NICE": "SYSTEM_NORMALIZED_CPU_NICE",
                    "SYSTEM_NORMALIZED_CPU_SOFTIRQ": "SYSTEM_NORMALIZED_CPU_SOFTIRQ",
                    "SYSTEM_NORMALIZED_CPU_STEAL": "SYSTEM_NORMALIZED_CPU_STEAL",
                    "SYSTEM_NORMALIZED_CPU_USER": "SYSTEM_NORMALIZED_CPU_USER",
                    "TICKETS_AVAILABLE_READS": "TICKETS_AVAILABLE_READS",
                    "TICKETS_AVAILABLE_WRITE": "TICKETS_AVAILABLE_WRITE",
                }
            
            @schemas.classproperty
            def ASSERT_MSG(cls):
                return cls("ASSERT_MSG")
            
            @schemas.classproperty
            def ASSERT_REGULAR(cls):
                return cls("ASSERT_REGULAR")
            
            @schemas.classproperty
            def ASSERT_USER(cls):
                return cls("ASSERT_USER")
            
            @schemas.classproperty
            def ASSERT_WARNING(cls):
                return cls("ASSERT_WARNING")
            
            @schemas.classproperty
            def BACKGROUND_FLUSH_AVG(cls):
                return cls("BACKGROUND_FLUSH_AVG")
            
            @schemas.classproperty
            def CACHE_BYTES_READ_INTO(cls):
                return cls("CACHE_BYTES_READ_INTO")
            
            @schemas.classproperty
            def CACHE_BYTES_WRITTEN_FROM(cls):
                return cls("CACHE_BYTES_WRITTEN_FROM")
            
            @schemas.classproperty
            def CACHE_DIRTY_BYTES(cls):
                return cls("CACHE_DIRTY_BYTES")
            
            @schemas.classproperty
            def CACHE_USED_BYTES(cls):
                return cls("CACHE_USED_BYTES")
            
            @schemas.classproperty
            def COMPUTED_MEMORY(cls):
                return cls("COMPUTED_MEMORY")
            
            @schemas.classproperty
            def CONNECTIONS(cls):
                return cls("CONNECTIONS")
            
            @schemas.classproperty
            def CURSORS_TOTAL_OPEN(cls):
                return cls("CURSORS_TOTAL_OPEN")
            
            @schemas.classproperty
            def CURSORS_TOTAL_TIMED_OUT(cls):
                return cls("CURSORS_TOTAL_TIMED_OUT")
            
            @schemas.classproperty
            def DB_DATA_SIZE_TOTAL(cls):
                return cls("DB_DATA_SIZE_TOTAL")
            
            @schemas.classproperty
            def DB_STORAGE_TOTAL(cls):
                return cls("DB_STORAGE_TOTAL")
            
            @schemas.classproperty
            def DOCUMENT_METRICS_DELETED(cls):
                return cls("DOCUMENT_METRICS_DELETED")
            
            @schemas.classproperty
            def DOCUMENT_METRICS_INSERTED(cls):
                return cls("DOCUMENT_METRICS_INSERTED")
            
            @schemas.classproperty
            def DOCUMENT_METRICS_RETURNED(cls):
                return cls("DOCUMENT_METRICS_RETURNED")
            
            @schemas.classproperty
            def DOCUMENT_METRICS_UPDATED(cls):
                return cls("DOCUMENT_METRICS_UPDATED")
            
            @schemas.classproperty
            def EXTRA_INFO_PAGE_FAULTS(cls):
                return cls("EXTRA_INFO_PAGE_FAULTS")
            
            @schemas.classproperty
            def FTS_DISK_UTILIZATION(cls):
                return cls("FTS_DISK_UTILIZATION")
            
            @schemas.classproperty
            def FTS_MEMORY_MAPPED(cls):
                return cls("FTS_MEMORY_MAPPED")
            
            @schemas.classproperty
            def FTS_MEMORY_RESIDENT(cls):
                return cls("FTS_MEMORY_RESIDENT")
            
            @schemas.classproperty
            def FTS_MEMORY_VIRTUAL(cls):
                return cls("FTS_MEMORY_VIRTUAL")
            
            @schemas.classproperty
            def FTS_PROCESS_CPU_KERNEL(cls):
                return cls("FTS_PROCESS_CPU_KERNEL")
            
            @schemas.classproperty
            def FTS_PROCESS_CPU_USER(cls):
                return cls("FTS_PROCESS_CPU_USER")
            
            @schemas.classproperty
            def FTS_PROCESS_NORMALIZED_CPU_KERNEL(cls):
                return cls("FTS_PROCESS_NORMALIZED_CPU_KERNEL")
            
            @schemas.classproperty
            def FTS_PROCESS_NORMALIZED_CPU_USER(cls):
                return cls("FTS_PROCESS_NORMALIZED_CPU_USER")
            
            @schemas.classproperty
            def GLOBAL_ACCESSES_NOT_IN_MEMORY(cls):
                return cls("GLOBAL_ACCESSES_NOT_IN_MEMORY")
            
            @schemas.classproperty
            def GLOBAL_LOCK_CURRENT_QUEUE_READERS(cls):
                return cls("GLOBAL_LOCK_CURRENT_QUEUE_READERS")
            
            @schemas.classproperty
            def GLOBAL_LOCK_CURRENT_QUEUE_TOTAL(cls):
                return cls("GLOBAL_LOCK_CURRENT_QUEUE_TOTAL")
            
            @schemas.classproperty
            def GLOBAL_LOCK_CURRENT_QUEUE_WRITERS(cls):
                return cls("GLOBAL_LOCK_CURRENT_QUEUE_WRITERS")
            
            @schemas.classproperty
            def GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN(cls):
                return cls("GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN")
            
            @schemas.classproperty
            def INDEX_COUNTERS_BTREE_ACCESSES(cls):
                return cls("INDEX_COUNTERS_BTREE_ACCESSES")
            
            @schemas.classproperty
            def INDEX_COUNTERS_BTREE_HITS(cls):
                return cls("INDEX_COUNTERS_BTREE_HITS")
            
            @schemas.classproperty
            def INDEX_COUNTERS_BTREE_MISS_RATIO(cls):
                return cls("INDEX_COUNTERS_BTREE_MISS_RATIO")
            
            @schemas.classproperty
            def INDEX_COUNTERS_BTREE_MISSES(cls):
                return cls("INDEX_COUNTERS_BTREE_MISSES")
            
            @schemas.classproperty
            def JOURNALING_COMMITS_IN_WRITE_LOCK(cls):
                return cls("JOURNALING_COMMITS_IN_WRITE_LOCK")
            
            @schemas.classproperty
            def JOURNALING_MB(cls):
                return cls("JOURNALING_MB")
            
            @schemas.classproperty
            def JOURNALING_WRITE_DATA_FILES_MB(cls):
                return cls("JOURNALING_WRITE_DATA_FILES_MB")
            
            @schemas.classproperty
            def MAX_PROCESS_CPU_CHILDREN_KERNEL(cls):
                return cls("MAX_PROCESS_CPU_CHILDREN_KERNEL")
            
            @schemas.classproperty
            def MAX_PROCESS_CPU_CHILDREN_USER(cls):
                return cls("MAX_PROCESS_CPU_CHILDREN_USER")
            
            @schemas.classproperty
            def MAX_PROCESS_CPU_KERNEL(cls):
                return cls("MAX_PROCESS_CPU_KERNEL")
            
            @schemas.classproperty
            def MAX_PROCESS_CPU_USER(cls):
                return cls("MAX_PROCESS_CPU_USER")
            
            @schemas.classproperty
            def MAX_PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL(cls):
                return cls("MAX_PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL")
            
            @schemas.classproperty
            def MAX_PROCESS_NORMALIZED_CPU_CHILDREN_USER(cls):
                return cls("MAX_PROCESS_NORMALIZED_CPU_CHILDREN_USER")
            
            @schemas.classproperty
            def MAX_PROCESS_NORMALIZED_CPU_KERNEL(cls):
                return cls("MAX_PROCESS_NORMALIZED_CPU_KERNEL")
            
            @schemas.classproperty
            def MAX_PROCESS_NORMALIZED_CPU_USER(cls):
                return cls("MAX_PROCESS_NORMALIZED_CPU_USER")
            
            @schemas.classproperty
            def MAX_SWAP_USAGE_FREE(cls):
                return cls("MAX_SWAP_USAGE_FREE")
            
            @schemas.classproperty
            def MAX_SWAP_USAGE_USED_(cls):
                return cls("MAX_SWAP_USAGE_USED ")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_GUEST(cls):
                return cls("MAX_SYSTEM_CPU_GUEST")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_IOWAIT(cls):
                return cls("MAX_SYSTEM_CPU_IOWAIT")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_IRQ(cls):
                return cls("MAX_SYSTEM_CPU_IRQ")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_KERNEL(cls):
                return cls("MAX_SYSTEM_CPU_KERNEL")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_SOFTIRQ(cls):
                return cls("MAX_SYSTEM_CPU_SOFTIRQ")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_STEAL(cls):
                return cls("MAX_SYSTEM_CPU_STEAL")
            
            @schemas.classproperty
            def MAX_SYSTEM_CPU_USER(cls):
                return cls("MAX_SYSTEM_CPU_USER")
            
            @schemas.classproperty
            def MAX_SYSTEM_MEMORY_AVAILABLE(cls):
                return cls("MAX_SYSTEM_MEMORY_AVAILABLE")
            
            @schemas.classproperty
            def MAX_SYSTEM_MEMORY_FREE(cls):
                return cls("MAX_SYSTEM_MEMORY_FREE")
            
            @schemas.classproperty
            def MAX_SYSTEM_MEMORY_USED(cls):
                return cls("MAX_SYSTEM_MEMORY_USED")
            
            @schemas.classproperty
            def MAX_SYSTEM_NETWORK_IN(cls):
                return cls("MAX_SYSTEM_NETWORK_IN")
            
            @schemas.classproperty
            def MAX_SYSTEM_NETWORK_OUT(cls):
                return cls("MAX_SYSTEM_NETWORK_OUT")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_GUEST(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_GUEST")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_IOWAIT(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_IOWAIT")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_IRQ(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_IRQ")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_KERNEL(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_KERNEL")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_NICE(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_NICE")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_SOFTIRQ(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_SOFTIRQ")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_STEAL(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_STEAL")
            
            @schemas.classproperty
            def MAX_SYSTEM_NORMALIZED_CPU_USER(cls):
                return cls("MAX_SYSTEM_NORMALIZED_CPU_USER")
            
            @schemas.classproperty
            def MEMORY_MAPPED(cls):
                return cls("MEMORY_MAPPED")
            
            @schemas.classproperty
            def MEMORY_RESIDENT(cls):
                return cls("MEMORY_RESIDENT")
            
            @schemas.classproperty
            def MEMORY_VIRTUAL(cls):
                return cls("MEMORY_VIRTUAL")
            
            @schemas.classproperty
            def NETWORK_BYTES_IN(cls):
                return cls("NETWORK_BYTES_IN")
            
            @schemas.classproperty
            def NETWORK_BYTES_OUT(cls):
                return cls("NETWORK_BYTES_OUT")
            
            @schemas.classproperty
            def NETWORK_NUM_REQUESTS(cls):
                return cls("NETWORK_NUM_REQUESTS")
            
            @schemas.classproperty
            def OP_EXECUTION_TIME_COMMANDS(cls):
                return cls("OP_EXECUTION_TIME_COMMANDS")
            
            @schemas.classproperty
            def OP_EXECUTION_TIME_READS(cls):
                return cls("OP_EXECUTION_TIME_READS")
            
            @schemas.classproperty
            def OP_EXECUTION_TIME_WRITES(cls):
                return cls("OP_EXECUTION_TIME_WRITES")
            
            @schemas.classproperty
            def OPCOUNTER_CMD(cls):
                return cls("OPCOUNTER_CMD")
            
            @schemas.classproperty
            def OPCOUNTER_DELETE(cls):
                return cls("OPCOUNTER_DELETE")
            
            @schemas.classproperty
            def OPCOUNTER_GETMORE(cls):
                return cls("OPCOUNTER_GETMORE")
            
            @schemas.classproperty
            def OPCOUNTER_INSERT(cls):
                return cls("OPCOUNTER_INSERT")
            
            @schemas.classproperty
            def OPCOUNTER_QUERY(cls):
                return cls("OPCOUNTER_QUERY")
            
            @schemas.classproperty
            def OPCOUNTER_REPL_CMD(cls):
                return cls("OPCOUNTER_REPL_CMD")
            
            @schemas.classproperty
            def OPCOUNTER_REPL_DELETE(cls):
                return cls("OPCOUNTER_REPL_DELETE")
            
            @schemas.classproperty
            def OPCOUNTER_REPL_INSERT(cls):
                return cls("OPCOUNTER_REPL_INSERT")
            
            @schemas.classproperty
            def OPCOUNTER_REPL_UPDATE(cls):
                return cls("OPCOUNTER_REPL_UPDATE")
            
            @schemas.classproperty
            def OPCOUNTER_UPDATE(cls):
                return cls("OPCOUNTER_UPDATE")
            
            @schemas.classproperty
            def OPERATIONS_SCAN_AND_ORDER(cls):
                return cls("OPERATIONS_SCAN_AND_ORDER")
            
            @schemas.classproperty
            def OPLOG_MASTER_LAG_TIME_DIFF(cls):
                return cls("OPLOG_MASTER_LAG_TIME_DIFF")
            
            @schemas.classproperty
            def OPLOG_MASTER_TIME(cls):
                return cls("OPLOG_MASTER_TIME")
            
            @schemas.classproperty
            def OPLOG_RATE_GB_PER_HOUR(cls):
                return cls("OPLOG_RATE_GB_PER_HOUR")
            
            @schemas.classproperty
            def OPLOG_SLAVE_LAG_MASTER_TIME(cls):
                return cls("OPLOG_SLAVE_LAG_MASTER_TIME")
            
            @schemas.classproperty
            def OPLOG_REPLICATION_LAG(cls):
                return cls("OPLOG_REPLICATION_LAG")
            
            @schemas.classproperty
            def PROCESS_CPU_CHILDREN_KERNEL(cls):
                return cls("PROCESS_CPU_CHILDREN_KERNEL")
            
            @schemas.classproperty
            def PROCESS_CPU_CHILDREN_USER(cls):
                return cls("PROCESS_CPU_CHILDREN_USER")
            
            @schemas.classproperty
            def PROCESS_CPU_KERNEL(cls):
                return cls("PROCESS_CPU_KERNEL")
            
            @schemas.classproperty
            def PROCESS_CPU_USER(cls):
                return cls("PROCESS_CPU_USER")
            
            @schemas.classproperty
            def PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL(cls):
                return cls("PROCESS_NORMALIZED_CPU_CHILDREN_KERNEL")
            
            @schemas.classproperty
            def PROCESS_NORMALIZED_CPU_CHILDREN_USER(cls):
                return cls("PROCESS_NORMALIZED_CPU_CHILDREN_USER")
            
            @schemas.classproperty
            def PROCESS_NORMALIZED_CPU_KERNEL(cls):
                return cls("PROCESS_NORMALIZED_CPU_KERNEL")
            
            @schemas.classproperty
            def PROCESS_NORMALIZED_CPU_USER(cls):
                return cls("PROCESS_NORMALIZED_CPU_USER")
            
            @schemas.classproperty
            def QUERY_EXECUTOR_SCANNED(cls):
                return cls("QUERY_EXECUTOR_SCANNED")
            
            @schemas.classproperty
            def QUERY_EXECUTOR_SCANNED_OBJECTS(cls):
                return cls("QUERY_EXECUTOR_SCANNED_OBJECTS")
            
            @schemas.classproperty
            def QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED(cls):
                return cls("QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED")
            
            @schemas.classproperty
            def QUERY_TARGETING_SCANNED_PER_RETURNED(cls):
                return cls("QUERY_TARGETING_SCANNED_PER_RETURNED")
            
            @schemas.classproperty
            def RESTARTS_IN_LAST_HOUR(cls):
                return cls("RESTARTS_IN_LAST_HOUR")
            
            @schemas.classproperty
            def SWAP_USAGE_FREE(cls):
                return cls("SWAP_USAGE_FREE")
            
            @schemas.classproperty
            def SWAP_USAGE_USED(cls):
                return cls("SWAP_USAGE_USED")
            
            @schemas.classproperty
            def SYSTEM_CPU_GUEST(cls):
                return cls("SYSTEM_CPU_GUEST")
            
            @schemas.classproperty
            def SYSTEM_CPU_IOWAIT(cls):
                return cls("SYSTEM_CPU_IOWAIT")
            
            @schemas.classproperty
            def SYSTEM_CPU_IRQ(cls):
                return cls("SYSTEM_CPU_IRQ")
            
            @schemas.classproperty
            def SYSTEM_CPU_KERNEL(cls):
                return cls("SYSTEM_CPU_KERNEL")
            
            @schemas.classproperty
            def SYSTEM_CPU_NICE(cls):
                return cls("SYSTEM_CPU_NICE")
            
            @schemas.classproperty
            def SYSTEM_CPU_SOFTIRQ(cls):
                return cls("SYSTEM_CPU_SOFTIRQ")
            
            @schemas.classproperty
            def SYSTEM_CPU_STEAL(cls):
                return cls("SYSTEM_CPU_STEAL")
            
            @schemas.classproperty
            def SYSTEM_CPU_USER(cls):
                return cls("SYSTEM_CPU_USER")
            
            @schemas.classproperty
            def SYSTEM_MEMORY_AVAILABLE(cls):
                return cls("SYSTEM_MEMORY_AVAILABLE")
            
            @schemas.classproperty
            def SYSTEM_MEMORY_FREE(cls):
                return cls("SYSTEM_MEMORY_FREE")
            
            @schemas.classproperty
            def SYSTEM_MEMORY_USED(cls):
                return cls("SYSTEM_MEMORY_USED")
            
            @schemas.classproperty
            def SYSTEM_NETWORK_IN(cls):
                return cls("SYSTEM_NETWORK_IN")
            
            @schemas.classproperty
            def SYSTEM_NETWORK_OUT(cls):
                return cls("SYSTEM_NETWORK_OUT")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_GUEST(cls):
                return cls("SYSTEM_NORMALIZED_CPU_GUEST")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_IOWAIT(cls):
                return cls("SYSTEM_NORMALIZED_CPU_IOWAIT")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_IRQ(cls):
                return cls("SYSTEM_NORMALIZED_CPU_IRQ")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_KERNEL(cls):
                return cls("SYSTEM_NORMALIZED_CPU_KERNEL")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_NICE(cls):
                return cls("SYSTEM_NORMALIZED_CPU_NICE")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_SOFTIRQ(cls):
                return cls("SYSTEM_NORMALIZED_CPU_SOFTIRQ")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_STEAL(cls):
                return cls("SYSTEM_NORMALIZED_CPU_STEAL")
            
            @schemas.classproperty
            def SYSTEM_NORMALIZED_CPU_USER(cls):
                return cls("SYSTEM_NORMALIZED_CPU_USER")
            
            @schemas.classproperty
            def TICKETS_AVAILABLE_READS(cls):
                return cls("TICKETS_AVAILABLE_READS")
            
            @schemas.classproperty
            def TICKETS_AVAILABLE_WRITE(cls):
                return cls("TICKETS_AVAILABLE_WRITE")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
PeriodSchema = schemas.DateTimeSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'envelope': typing.Union[EnvelopeSchema, bool, ],
        'pretty': typing.Union[PrettySchema, bool, ],
        'm': typing.Union[MSchema, list, tuple, ],
        'period': typing.Union[PeriodSchema, str, datetime, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_envelope = api_client.QueryParameter(
    name="envelope",
    style=api_client.ParameterStyle.FORM,
    schema=EnvelopeSchema,
    explode=True,
)
request_query_pretty = api_client.QueryParameter(
    name="pretty",
    style=api_client.ParameterStyle.FORM,
    schema=PrettySchema,
    explode=True,
)
request_query_m = api_client.QueryParameter(
    name="m",
    style=api_client.ParameterStyle.FORM,
    schema=MSchema,
    explode=True,
)
request_query_period = api_client.QueryParameter(
    name="period",
    style=api_client.ParameterStyle.FORM,
    schema=PeriodSchema,
    explode=True,
)
# Path params


class GroupIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        max_length = 24
        min_length = 24
        regex=[{
            'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
        }]


class ProcessIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        regex=[{
            'pattern': r'^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$',  # noqa: E501
        }]
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'groupId': typing.Union[GroupIdSchema, str, ],
        'processId': typing.Union[ProcessIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_group_id = api_client.PathParameter(
    name="groupId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=GroupIdSchema,
    required=True,
)
request_path_process_id = api_client.PathParameter(
    name="processId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProcessIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationVndAtlas20230101json = ApiMeasurementsGeneralViewAtlas


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationVndAtlas20230101json,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/vnd.atlas.2023-01-01+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndAtlas20230101json),
    },
)
SchemaFor401ResponseBodyApplicationJson = ApiError


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ApiError


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/vnd.atlas.2023-01-01+json',
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_host_measurements_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_host_measurements_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_host_measurements_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_host_measurements_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Return Measurements for One MongoDB Process
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_group_id,
            request_path_process_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_envelope,
            request_query_pretty,
            request_query_m,
            request_query_period,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetHostMeasurements(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_host_measurements(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_host_measurements(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_host_measurements(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_host_measurements(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_host_measurements_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_host_measurements_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


