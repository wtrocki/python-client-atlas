# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from atlas import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from atlas import schemas  # noqa: F401

from atlas.model.api_measurements_indexes_view import ApiMeasurementsIndexesView
from atlas.model.api_error import ApiError

from . import path

# Query params
GranularitySchema = schemas.StrSchema
PeriodSchema = schemas.StrSchema
StartSchema = schemas.DateTimeSchema
EndSchema = schemas.DateTimeSchema
EnvelopeSchema = schemas.BoolSchema


class MetricsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        unique_items = True
        max_items = 10
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "INDEX_SIZE_ON_DISK": "INDEX_SIZE_ON_DISK",
                    "NUMBER_OF_DELETES": "NUMBER_OF_DELETES",
                    "NUMBER_OF_ERROR_QUERIES": "NUMBER_OF_ERROR_QUERIES",
                    "NUMBER_OF_GETMORE_COMMANDS": "NUMBER_OF_GETMORE_COMMANDS",
                    "NUMBER_OF_INDEX_FIELDS": "NUMBER_OF_INDEX_FIELDS",
                    "NUMBER_OF_INSERTS": "NUMBER_OF_INSERTS",
                    "NUMBER_OF_SUCCESS_QUERIES": "NUMBER_OF_SUCCESS_QUERIES",
                    "NUMBER_OF_UPDATES": "NUMBER_OF_UPDATES",
                    "REPLICATION_LAG": "REPLICATION_LAG",
                    "TOTAL_NUMBER_OF_QUERIES": "TOTAL_NUMBER_OF_QUERIES",
                }
            
            @schemas.classproperty
            def INDEX_SIZE_ON_DISK(cls):
                return cls("INDEX_SIZE_ON_DISK")
            
            @schemas.classproperty
            def NUMBER_OF_DELETES(cls):
                return cls("NUMBER_OF_DELETES")
            
            @schemas.classproperty
            def NUMBER_OF_ERROR_QUERIES(cls):
                return cls("NUMBER_OF_ERROR_QUERIES")
            
            @schemas.classproperty
            def NUMBER_OF_GETMORE_COMMANDS(cls):
                return cls("NUMBER_OF_GETMORE_COMMANDS")
            
            @schemas.classproperty
            def NUMBER_OF_INDEX_FIELDS(cls):
                return cls("NUMBER_OF_INDEX_FIELDS")
            
            @schemas.classproperty
            def NUMBER_OF_INSERTS(cls):
                return cls("NUMBER_OF_INSERTS")
            
            @schemas.classproperty
            def NUMBER_OF_SUCCESS_QUERIES(cls):
                return cls("NUMBER_OF_SUCCESS_QUERIES")
            
            @schemas.classproperty
            def NUMBER_OF_UPDATES(cls):
                return cls("NUMBER_OF_UPDATES")
            
            @schemas.classproperty
            def REPLICATION_LAG(cls):
                return cls("REPLICATION_LAG")
            
            @schemas.classproperty
            def TOTAL_NUMBER_OF_QUERIES(cls):
                return cls("TOTAL_NUMBER_OF_QUERIES")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MetricsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'granularity': typing.Union[GranularitySchema, str, ],
        'metrics': typing.Union[MetricsSchema, list, tuple, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'period': typing.Union[PeriodSchema, str, ],
        'start': typing.Union[StartSchema, str, datetime, ],
        'end': typing.Union[EndSchema, str, datetime, ],
        'envelope': typing.Union[EnvelopeSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_granularity = api_client.QueryParameter(
    name="granularity",
    style=api_client.ParameterStyle.FORM,
    schema=GranularitySchema,
    required=True,
    explode=True,
)
request_query_period = api_client.QueryParameter(
    name="period",
    style=api_client.ParameterStyle.FORM,
    schema=PeriodSchema,
    explode=True,
)
request_query_start = api_client.QueryParameter(
    name="start",
    style=api_client.ParameterStyle.FORM,
    schema=StartSchema,
    explode=True,
)
request_query_end = api_client.QueryParameter(
    name="end",
    style=api_client.ParameterStyle.FORM,
    schema=EndSchema,
    explode=True,
)
request_query_envelope = api_client.QueryParameter(
    name="envelope",
    style=api_client.ParameterStyle.FORM,
    schema=EnvelopeSchema,
    explode=True,
)
request_query_metrics = api_client.QueryParameter(
    name="metrics",
    style=api_client.ParameterStyle.FORM,
    schema=MetricsSchema,
    required=True,
    explode=True,
)
# Path params


class ProcessIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        regex=[{
            'pattern': r'^([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-f]{1,4}\:){7}([0-9a-f]{1,4})|(([a-z0-9]+\.){1,10}[a-z]+)?(\:[0-9]{4,5})$',  # noqa: E501
        }]
IndexNameSchema = schemas.StrSchema
DatabaseNameSchema = schemas.StrSchema
CollectionNameSchema = schemas.StrSchema


class GroupIdSchema(
    schemas.StrSchema
):


    class MetaOapg:
        max_length = 24
        min_length = 24
        regex=[{
            'pattern': r'^([a-f0-9]{24})$',  # noqa: E501
        }]
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'processId': typing.Union[ProcessIdSchema, str, ],
        'indexName': typing.Union[IndexNameSchema, str, ],
        'databaseName': typing.Union[DatabaseNameSchema, str, ],
        'collectionName': typing.Union[CollectionNameSchema, str, ],
        'groupId': typing.Union[GroupIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_process_id = api_client.PathParameter(
    name="processId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProcessIdSchema,
    required=True,
)
request_path_index_name = api_client.PathParameter(
    name="indexName",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IndexNameSchema,
    required=True,
)
request_path_database_name = api_client.PathParameter(
    name="databaseName",
    style=api_client.ParameterStyle.SIMPLE,
    schema=DatabaseNameSchema,
    required=True,
)
request_path_collection_name = api_client.PathParameter(
    name="collectionName",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CollectionNameSchema,
    required=True,
)
request_path_group_id = api_client.PathParameter(
    name="groupId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=GroupIdSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationVndAtlas20230101json = ApiMeasurementsIndexesView


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationVndAtlas20230101json,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/vnd.atlas.2023-01-01+json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndAtlas20230101json),
    },
)
SchemaFor400ResponseBodyApplicationJson = ApiError


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor404ResponseBodyApplicationJson = ApiError


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ApiError


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/vnd.atlas.2023-01-01+json',
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_index_metrics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_index_metrics_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_index_metrics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_index_metrics_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Return Atlas Search Metrics for One Index in One Specified Namespace
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_process_id,
            request_path_index_name,
            request_path_database_name,
            request_path_collection_name,
            request_path_group_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        prefix_separator_iterator = None
        for parameter in (
            request_query_granularity,
            request_query_period,
            request_query_start,
            request_query_end,
            request_query_envelope,
            request_query_metrics,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetIndexMetrics(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_index_metrics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_index_metrics(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_index_metrics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_index_metrics(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_index_metrics_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_index_metrics_oapg(
            query_params=query_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


